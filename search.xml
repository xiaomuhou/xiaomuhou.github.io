<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于柔度矩阵与变形叠加法的思考记录</title>
      <link href="/2025/01/11/%E5%85%B3%E4%BA%8E%E6%9F%94%E5%BA%A6%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%8F%98%E5%BD%A2%E5%8F%A0%E5%8A%A0%E6%B3%95%E7%9A%84%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/01/11/%E5%85%B3%E4%BA%8E%E6%9F%94%E5%BA%A6%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%8F%98%E5%BD%A2%E5%8F%A0%E5%8A%A0%E6%B3%95%E7%9A%84%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="关于小变形叠加法矩阵的认识与记录"><a href="#关于小变形叠加法矩阵的认识与记录" class="headerlink" title="关于小变形叠加法矩阵的认识与记录"></a>关于小变形叠加法矩阵的认识与记录</h1><p>柔度矩阵的叠加，小变形各个输入力单独作用下节点位移的线性叠加，柔度本质是类似于K的导数，串联并联叠加时候需要注意一下：</p><p>并联：</p><script type="math/tex; mode=display">\begin{equation}\frac{1}{k}=\frac{1}{k_1}+\frac{1}{k_2} \\{d}={d_1}+{d_2} \end{equation}</script><p>串联</p><script type="math/tex; mode=display">\begin{equation}{k}={k_1}+{k_2} \\\frac{1}{d}=\frac{1}{d_1}+\frac{1}{d_2} \\\end{equation}</script><span id="more"></span><p>柔度叠加矩阵案例说明：</p><p>d_ij,j坐标受力在i坐标产生位移</p><img src="/2025/01/11/%E5%85%B3%E4%BA%8E%E6%9F%94%E5%BA%A6%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%8F%98%E5%BD%A2%E5%8F%A0%E5%8A%A0%E6%B3%95%E7%9A%84%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/Q1.png" class="" title="Q1"><p>此时F1=1,F2=0,F1作用下，两个位置的位移，其柔度矩阵含义如图，即为各点的挠度，在实际柔性铰链中，则为各个铰链位置变形经过转换矩阵在统一坐标下的表达：</p><script type="math/tex; mode=display">x_1=F_1*d_{11} \\x_2=F_1*d_{21}</script><p>另一种情况，F1=0,F2=1;先列出点，其次看受力位置</p><img src="/2025/01/11/%E5%85%B3%E4%BA%8E%E6%9F%94%E5%BA%A6%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%8F%98%E5%BD%A2%E5%8F%A0%E5%8A%A0%E6%B3%95%E7%9A%84%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/Q2.png" class="" title="Q2"><script type="math/tex; mode=display">x_1=F_2*d_{12} \\x_2=F_2*d_{22}</script><p>所以，F1=1,F2=1,各自独立计算并且叠加，可以得到：</p><script type="math/tex; mode=display">x_1=F_1d_{11}+F_2d_{12}\\x_2=F_2d_{22}+F_1D_{21}</script><p>有一个案例，文中直接给出了柔度的参数，这里按照材料力学补充一下推导流程，略作复习：</p><img src="/2025/01/11/%E5%85%B3%E4%BA%8E%E6%9F%94%E5%BA%A6%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%8F%98%E5%BD%A2%E5%8F%A0%E5%8A%A0%E6%B3%95%E7%9A%84%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/Q3.png" class="" title="Q3"><p>d_11=d_22=8d,d_12=d_21=7d;推导说明，假定F1=0,F2=1;</p><p>以x_2为界限进行分类，挠度曲线参数分为两段</p><script type="math/tex; mode=display">\begin{equation}w_1=\frac{F x}{18 E I}\left[\frac{8}{9}l^2-x^2\right] \\w_2=\frac{F}{18 E I}\left[3(x-\frac{2}{3}l)^3+\frac{8}{9}l^2x-x^3\right]\end{equation}</script><p>可以计算，当仅有F2,输入时候，两点挠度为：</p><p>第一段中：</p><script type="math/tex; mode=display">\begin{equation}w_1=\frac{F}{18 E I}\left[\frac{7}{27}l^3\right] \\w_2=\frac{F}{18 E I}\left[\frac{8}{27}l^3\right] \end{equation}</script><p>第二段利用第二个公式计算可以得到上述挠度，所以柔度矩阵参数给定过程如上，另外，求取各点挠度过程中，按照节点分割计算，并不需要全部柔度矩阵，类似与B点按照分割后段进行计算，基础概念需要理解。</p><script type="math/tex; mode=display">\begin{equation}\left[\begin{array}{l}x_1 \\x_2\end{array}\right]=\left[\begin{array}{ll}8 d & 7 d \\7 d & 8 d\end{array}\right]\left(\left[\begin{array}{l}F_1 \\F_2\end{array}\right]-\left[\begin{array}{cc}m_1 & 0 \\0 & m_2\end{array}\right]\left[\begin{array}{l}\ddot{x}_1 \\\ddot{x}_2\end{array}\right]\right)\end{equation}</script><h2 id="待补充："><a href="#待补充：" class="headerlink" title="待补充："></a>待补充：</h2><p>两级放大柔度矩阵的左边转换关系，代码验证后补充</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 柔性铰链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>年终总结2024</title>
      <link href="/2024/12/30/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%932024/"/>
      <url>/2024/12/30/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%932024/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="2024年末随想"><a href="#2024年末随想" class="headerlink" title="2024年末随想"></a>2024年末随想</h1><p>年末的倒数第二天，现在一个人呆在寝室胡思乱想，过去的一年经历了很多，也算是正向的一年，略作总结，希望2025也能好一点！（明晚估计得跟朋友出去干饭，没啥时间写了，今完随便写写）</p><span id="more"></span><h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>还是先谈学业，毕竟这是眼下最重要的事情，论文有了一些保底，但是实验进度确实很慢，加工有点费劲，需要的东西太多，做好规划，尽快推进，对自己的专业还是要自信一些，踏踏实实的推进进度，跟翟师兄学习一下，迅速掌握一套基本方法并且应用真的是个很重要的能力，复现-套用，每一步都得认真思考，难理解意味着摸到了门槛，爬过去才有进度，认真一点，踏实一点，也不说一定啥时候毕业，只能说2025尽力而为，踏实的走好每一步，帆帆是个很踏实的人，也要多学习，做人做事，少画饼。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今年把游泳卡用完了，算是坚持下来了一个运动爱好，虽然还是只会蛙泳hh，体重啥的只能说还挺稳定，不过健康就好吧，放纵餐吃的有点过于好了，人生在世，吃喝二字，保证健康的前提下，还是开心最重要，2025继续坚持，也改改周末的饮食习惯，也想去到处吃一吃好吃的食物，民以食为天，一直觉得食物是感知每个地方灵魂的重要途径，沈阳的拉面真好吃，如果未来会呆在东北，那我只愿意呆在沈阳。</p><h2 id="为人处世"><a href="#为人处世" class="headerlink" title="为人处世"></a>为人处世</h2><p>这个就不总结，其实很清楚自己有啥缺点，不经意会暴露出来，人性始然，写几点勉励自己吧，其实过去的笔记也有记录：</p><p>1.少说废话，克制虚荣心。</p><p>2.做了什么事，如果做了就不要后悔，过于内耗反而不好，如果做了错的事，也要反思，前世之师后车之鉴还是有必要的。</p><p>3.不要受别人的干扰，大家都好都开心，才是最好的局面，保持好情绪，安安静静的。</p><p>4.性格过于摸鱼，效率提高点，总是害怕难题，踏实一点，硬骨头还是得一口一口啃。</p><p>5.算是心思比较细腻吧，其实经常可以感受到对方的想法，但是还是像往常一样吧，我做事是无所求的，希望大家都开心，并不求得到什么，有时候别人开心我也会开心，这也是做一些事情的原因，本质单纯只是为了自己开心，其实没啥别的想法，希望别人也不要多想，仅此而已。</p><h2 id="瞎溜达"><a href="#瞎溜达" class="headerlink" title="瞎溜达"></a>瞎溜达</h2><p>今年跑去了烟台、高密、泰安、沈阳、大连玩，很开心，也吃了很多好吃的，多出去转转还是心情愉悦，明年希望也有时间出去瞎溜达，不过也要努力毕业了。高密炉包太腻了不好吃，还是沈阳的饭合我胃口，泰安也很不错，都是很好的地方，不过我还是最喜欢成都，好吃的有点多，唯一缺陷是火锅没有麻酱，山东其实也蛮不错，至少老哥那里我还呆的蛮习惯的，安居乐业才是终极目标啊，确实有个自己的小窝才会安心。</p><h2 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h2><p>马上在哈尔滨第十年了，4年本科，2年硕士，还有仍在继续的博士，认识自己，走好每一步吧，</p><p>支付宝攒了一些钱了，没有什么炒股的想法，单纯觉得很麻烦，就继续放着吧，未来可能会买一些定期存存，毕业能买一辆老哥那个车了233，平时确实也没啥花销，也就游戏还有和朋友吃饭，明年要多去做一些没体验过得事情，钱重要但是也不重要，看淡一些。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>工作事情要带上脑子了，简历其实改了几版了，继续慢慢修改，也要多想想自己到底想做什么，每天目标也要完成，开始就做最重要的事情，任何时候都是。</p><p>要活的潇洒一点，自信一点，少纠结，拥抱未来，2025加油呀，希望大家都好，世界都好，想做事情就一定去做，今年下决心做的事情基本都成了，所以未来也是，加油！！！</p><img src="/2024/12/30/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%932024/OCTAQ.png" class="" title="八方">]]></content>
      
      
      <categories>
          
          <category> thought2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心情随笔20241129</title>
      <link href="/2024/11/29/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%9420241129/"/>
      <url>/2024/11/29/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%9420241129/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"><br>心情随笔</p><p>少有的没控制住情绪，做好自己的事情，少去管别人，虽然有人说话确实非常讨厌，但是被他激怒也是自己情绪上有点不对，自己想做一件事情，就去做，做到自己能做的所有事情，至于别人的行动其实无关紧要。</p><span id="more"></span><p>克制自己的表达欲望，还是少说话，少去说教别人，最近还是说了一些错的事情，但是倒没咋后悔，只是觉得不太合适，少说话啦，压制过分的炫耀欲；</p><p>你要克服的是你的虚荣心，是你的炫耀欲，你要对付的是你时刻想要冲出来想要出风头的小聪明；</p><p>确实至理名言，要常常铭记复习；</p><p>关于后续规划：</p><p>1.大样机及相关实验，需要一个文档，锁定思考</p><p>2.后续内容，研究cy师兄的速度推导，确定方向，局部规划；</p><p>3.静力学刚度差异性分析、微分运动学、控制内容。</p><p>其余的没想到啥，最近的进度还可以，但是也摸了一段时间，还好还好；</p><p>生活上，坚持游泳，至少接下来是的，饮食要规律，上周聚餐太多次了，注意一下。</p><p>每个人的缺点无法避免，但是可以反思克制就好，开心一点~</p><p>按照安排慢慢来，12月要再完成一部分工作，年前再完成一部分，要看一些有趣的电影…</p><p>放个最近感觉很好吃的川菜~</p><img src="/2024/11/29/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%9420241129/delicious.jpg" class="" title="最近好吃的，好开心">]]></content>
      
      
      <categories>
          
          <category> feel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缩短时间尺度</title>
      <link href="/2024/10/13/%E7%BC%A9%E7%9F%AD%E6%97%B6%E9%97%B4%E5%B0%BA%E5%BA%A6/"/>
      <url>/2024/10/13/%E7%BC%A9%E7%9F%AD%E6%97%B6%E9%97%B4%E5%B0%BA%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="平常心，慢慢来"><a href="#平常心，慢慢来" class="headerlink" title="平常心，慢慢来"></a>平常心，慢慢来</h1><p>最近问题缠身，课题全是困难，事情很多，慢慢来</p><p>踏踏实实的去做，别着急，对比思考一下后面的内容；</p><span id="more"></span><p>10月中旬，10月底的节点，下一周需要完成的是：</p><p>1.分割顶点的两部分内容，这部分工作很有特色，边学边改</p><p>2.新的组合运动学，考虑了厚度影响</p><p>3.对结果进行分析讨论，学一下hanyouc，总结分析与讨论</p><p>总的来讲，都是工作总结，不需要新的内容，按进度推进就好，虽然事项比较多，保持平常心一件一件去做就好。</p><p>11月，新的内容完成，shape inverse control and dynamic,</p><p>12月，除了正常学业外，需要去上海一躺，见个好朋友。</p><p>之后看论文，着重总结一下实验分类、实验讨论以及所谓的深入点，总结思考一下。</p><p>事情很多，心里总是很烦，但是缩短时间尺度，吃饭睡觉的时候还蛮开心的，跟朋友聊天的时候也很开心，想太远总是很无聊，眼前事做好就算了，填一下桌面端app的daily calendar</p><p>志哥的发言还蛮有启发的，之前做的对应还是不够，认真一点；</p><p>上周乱七八糟得，条理一点，少摸鱼少摸鱼，求其上得其中，其他随缘~</p><img src="/2024/10/13/%E7%BC%A9%E7%9F%AD%E6%97%B6%E9%97%B4%E5%B0%BA%E5%BA%A6/Octopath.png" class="" title="八方旅人">]]></content>
      
      
      <categories>
          
          <category> EMO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emotion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空间渐进曲线Matlab</title>
      <link href="/2024/10/02/%E7%A9%BA%E9%97%B4%E6%B8%90%E8%BF%9B%E6%9B%B2%E7%BA%BFMatlab/"/>
      <url>/2024/10/02/%E7%A9%BA%E9%97%B4%E6%B8%90%E8%BF%9B%E6%9B%B2%E7%BA%BFMatlab/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="空间曲线拟合笔记"><a href="#空间曲线拟合笔记" class="headerlink" title="空间曲线拟合笔记"></a>空间曲线拟合笔记</h1><p>渐进颜色修正与一点点origin</p><p>基础信息与参数说明</p><span id="more"></span><h2 id="基础参数"><a href="#基础参数" class="headerlink" title="基础参数"></a>基础参数</h2><img src="/2024/10/02/%E7%A9%BA%E9%97%B4%E6%B8%90%E8%BF%9B%E6%9B%B2%E7%BA%BFMatlab/1727880727916.png" class="" width="1727880727916"><p>subplot(2, 2, 1); plot(x, y);参考源文件‘</p><p> patch 利用填充函数绘制渐进曲线颜色,也可以用来表示边的颜色插补</p><p> ‘<strong>flat</strong>‘ - 对每个网格线段和面使用恒定颜色。 该颜色由该线段的端点或该面的角边处具有最小索引的颜色值确定。 </p><p>‘<strong>interp</strong>‘ - 对每个线段和面使用插补着色。 </p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">patch(x,y,z,<span class="string">'edgecolor'</span>,<span class="string">'flat'</span>,<span class="string">'facecolor'</span>,<span class="string">'none'</span>,<span class="string">'MarkerFaceColor'</span>,<span class="string">'flat'</span>,<span class="string">'LineWidth'</span>,<span class="number">2</span>) <span class="comment">%会导致封闭连接</span></span><br><span class="line">patch([x NaN],[y NaN,[z NaN],<span class="string">'edgecolor'</span>,<span class="string">'flat'</span>,<span class="string">'facecolor'</span>,<span class="string">'none'</span>,<span class="string">'MarkerFaceColor'</span>,<span class="string">'flat'</span>,<span class="string">'LineWidth'</span>,<span class="number">2</span>)</span><br><span class="line">view(<span class="number">3</span>)</span><br><span class="line">grid on; </span><br><span class="line">colorbar</span><br><span class="line"><span class="comment">%官方文档</span></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">patch(x,y,c,<span class="string">'EdgeColor'</span>,<span class="string">'interp'</span>,<span class="string">'Marker'</span>,<span class="string">'o'</span>,<span class="string">'MarkerFaceColor'</span>,<span class="string">'flat'</span>);</span><br><span class="line">colorbar;</span><br></pre></td></tr></tbody></table></figure><p>Fill</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=fill3(x,y,z,<span class="string">'r'</span>)</span><br><span class="line">p.FaceAlpha = <span class="number">0.5</span>;</span><br></pre></td></tr></tbody></table></figure><p><code>FaceAlpha</code> — 面透明度 1 (默认) | 范围 <code>[0,1]</code> 中的标量 | <code>'flat'</code> | <code>'interp'</code></p><p>EdgeColor<code>— 边颜色</code>[0 0 0]<code>(默认) |</code>‘none’<code>|</code>‘flat’<code>|</code>‘interp’<code>| RGB 三元组 | 十六进制颜色代码 |</code>‘r’<code>|</code>‘g’<code>|</code>‘b’` | …代码</p><h2 id="代码补充（假期后整理现阶段代码）"><a href="#代码补充（假期后整理现阶段代码）" class="headerlink" title="代码补充（假期后整理现阶段代码）"></a>代码补充（假期后整理现阶段代码）</h2><p>代填</p><h1 id="origin补充"><a href="#origin补充" class="headerlink" title="origin补充"></a>origin补充</h1>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中期-生活-随想</title>
      <link href="/2024/09/22/%E4%B8%AD%E6%9C%9F-%E7%94%9F%E6%B4%BB-%E9%9A%8F%E6%83%B3/"/>
      <url>/2024/09/22/%E4%B8%AD%E6%9C%9F-%E7%94%9F%E6%B4%BB-%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="中期结束之后的随笔"><a href="#中期结束之后的随笔" class="headerlink" title="中期结束之后的随笔"></a>中期结束之后的随笔</h1><p>有些感慨，突如其来的迷茫，若有若无的思绪</p><p>浅浅记录，来日可追~</p><span id="more"></span><p>​    低效的生活总是带给人迷惘，原本希望规律的习惯可以塑造思维，长时间下来虽有些许效果，但是仍在边边角角，主题推进慢慢悠悠，思考下来还是自己遇到困难下意识逃避，不够专注，然后思维涣散，开始摸鱼，仔细想来，浪费的时间有4个月，扣除掉放假瞎溜达，也有3个月，不奢望每天都可以高效推进，但总归没有多余的时间再如此休闲了，该做的事情也应该认真的去做了,在此记录一下，略作督促。</p><h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>中期结束之后，感觉确实进度慢，主要是两个部分：</p><p>规划的动力学其实存在一些问题，早先有些想当然，当初刘老师的说的缝隙问题到今天才理解了是什么意思，有点喜剧了，看来不可以按照分段耦合的方法去做，这条路是走不通的，跟两位师兄的沟通其实也验证了这一点，但是貌似也不是完全走不下去，直接用点去链接被动变形的连续体，我做的这个东西特色还是非常明显的，走这条路的问题就是不能考虑柔性结构的反作用力，直接去建造刚体动力学模型，真正的把驱动视为干扰，不去考虑建模问题，动力学目的变成优化问题，与四面体相比优势在于维度，两侧各自出现两条连续的控制点，本质上也是封闭的曲面控制，能够提供更多的点位控制，本身也是一种方案，只是严谨的理论模型就不能去做了，里面是个大坑，容易陷进去，绕一下，这个问题目前还不需要解决，慢慢思考吧。</p><p>模型的优化问题，这个是当下急需解决与思考的一个问题，主要是球副那个部分的实际轴线问题，以及相交面位置旋转模型的细化，球借鉴一下赵师兄的球副，其余需要尽快拿出细节方案，然后adams之类的仿真需要开始，这部分近期要开始思考落实，目标是完成一套二代模型—应该是没问题的默认一个两驱动的八面体，既然李可以2P1R，那就说明两驱没问题，问题就在于细化了。</p><p>小论文，就是需要尽快投，有三个问题，一是包装，分割顶点部分需要拔高一下，目前的有点low，二是模式转换，速率比不可以那样直接去说，是有问题的，这部分需要思考改进，其实后面放个精细版本的三维模型更好，所以得同步推进。分割包装、速率说明，大概需要一周的时间吧。</p><p>软著，这个其实可以放放，抽空去写完成一下</p><h2 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h2><p>要认真写，上午下午晚上不能无目的的摸鱼了，这个很重要，注重一下，求其上才能得其中</p><p>安安静静的推进进度，务实一点。</p><p>论文习惯、运动习惯、学习按照往常继续就好，多多游泳去了，现在是9月22日，11月底</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>本来就是个比较喜欢一个人呆着的人，现在这个状态也蛮好，前几天去当义工，感觉还蛮开心的，不带目的帮助陌生人体验还可以，就是自己有点质疑活动本身的意义，下次应该也不会再去了，下一步想做的事情是自驾游。</p><p>自己做这些没啥意义的事，本质还是为了让自己可以开心一点，散散心，没啥高尚的想法。</p><p>最近觉得自己做的很好的一件事情就是已经能够做到下意识的去换位思考了，不去把自己的想法强加给别人，吃饭是这样，为人做事也是这样，更成熟了一点，做一个控制欲望为0的人，大家都做自己想做的事情，不要互相干扰。</p><p>喜欢，经历之前的事情再加上这几年来的事情，感觉自己变得有点现实，权衡开始成了判断的前提，做好自己，还是去接触一下，不要封闭自己，拒绝别人也不太好，也和习惯规划有点相关，12月吧大概就这样~</p><p>大目标！算了不立flag了，踏踏实实的做好眼前的事情吧。</p><img src="/2024/09/22/%E4%B8%AD%E6%9C%9F-%E7%94%9F%E6%B4%BB-%E9%9A%8F%E6%83%B3/marry.jpg" class="">]]></content>
      
      
      <categories>
          
          <category> emotion </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网生存</title>
      <link href="/2024/08/21/%E4%BA%92%E8%81%94%E7%BD%91%E7%94%9F%E5%AD%98/"/>
      <url>/2024/08/21/%E4%BA%92%E8%81%94%E7%BD%91%E7%94%9F%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="互联网辩论"><a href="#互联网辩论" class="headerlink" title="互联网辩论"></a>互联网辩论</h1><p>网上冲浪看到了一些不好的言论，而且是自己一个很喜欢的博主发的，感觉很难过，于是默默取关了，然后想悄悄的聊聊。</p><span id="more"></span><h2 id="网络行为观察"><a href="#网络行为观察" class="headerlink" title="网络行为观察"></a>网络行为观察</h2><p>互联网上言论千奇百怪，各种弱智的言论存在都是合理的，当然看到一些自诩高尚但是喜欢和弱智大战三百回合的人也不在少数，但是我一直觉得能和明显反智的言论斗智斗勇的人，也应该反思一下，你到底是在维护正义，还是在捏软柿子从而获得优越感，说的有点过分，可能只是朴素的正义感作祟，但是后续如果借着这个软柿子宣扬自己观点的，那不用判断了，也是个弱智。</p><p>有些人喜欢骂小粉红，骂各种笨蛋操作，我觉得他们潜意识里其实是喜欢这些人的，只是自己没有发现，没有这些人，他们廉价的优越感就会消失，失去了所谓的乐趣，从这一点来看，他们是站在一起的。</p><p>有些人一看到群体行为出现，立马站在对面，也不去思考自己讨厌的是事情本身还是群体部分不理智的人群，总之就是一顿AOE,看到一些不理智的言论，立马借题发挥，自己把自己塑造成一夫当关的形象，还觉得自己悲壮且高尚，其实没选择拉黑不理的那一刻，你已经跟你借着发挥的人站在一起，一样的卑劣。</p><p>大家可能会讲，这样会不会助长不正之风？其实不然，说实话，忽视才是最好的手段，灭火最有效的向来都是惰性气体，温度的高度不能代表什么。</p><h2 id="个体行为思考"><a href="#个体行为思考" class="headerlink" title="个体行为思考"></a>个体行为思考</h2><p>作为一个经常偶尔在游戏群冒泡的人，总会看到吵来吵去，但我又想和一些人沟通，所以我经常是默默把我不喜欢的人拉黑，我不会向你宣告，只是默默地忽视你，所以这么多年来基本没跟人吵过架。</p><p>寻找存在感本身不是个贬义词，每个人的一生都是在寻找自己存在的意义，但是不能频繁刷存在感，尤其是对个人。</p><p>网上冲浪，看到很反感的人或者言论，默默拉黑，如果不符合社区规则，顺便送一个举报，然后感觉自己冲浪的环境就好了很多，这里表扬一下B站，拉黑之后不会再看到这些人，微博就不然，始终锲而不舍的给我推送垃圾，但是微博又是中文环境下时效最强的软件，只能没办法继续被它恶心，如果每个人都能做到控制自己情绪，忽视反智的言论，或许会平静很多吧，但是微博这种平台可能就赚不到钱了，这就是矛盾的世界hh</p><p>经常告诉自己不要因为一件事去否定别人，但是毕竟不是机器人，难免有时候情绪激动直接否定，但是一定要记住的是不要站在别人面前去刷否定的存在感，站在别人面前的那一刻就已经是个小丑了。</p><p>借自己最喜欢的电视剧士兵突击做个结尾，袁朗评价吴哲：“ 我喜欢他。知道为什么吗？坚持自己的原则，充满希望和乐观。重要的是，他能跟许三多这样的兵交朋友，这一点，就不会毁于他很容易产生的优越感 ”，年轻时候觉得自己像三多，不喜欢变化，后来觉得自己像成才，有时候有点自私，再后来觉得自己还是希望成为吴哲，经常告诉自己要平常心，说实话自己是不如三多和成才的，他们有各自的强项，但我很希望成为吴哲一类的人，做一个半吊子的理想主义者，充满希望和乐观。</p><p>碎碎念结束，感觉很生气就写个日记，写到这里已经完全没感觉了，人不是机器人，也可以理解。</p><img src="/2024/08/21/%E4%BA%92%E8%81%94%E7%BD%91%E7%94%9F%E5%AD%98/qq.jpg" class=""> <p>图源[<a href="https://x.com/Hitoimim/status/1807718505602797820">https://x.com/Hitoimim/status/1807718505602797820</a>]</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emotion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>transformation_feel</title>
      <link href="/2024/08/16/transformation-feel/transformation-feel/"/>
      <url>/2024/08/16/transformation-feel/transformation-feel/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="旋转变换的一些想法记录"><a href="#旋转变换的一些想法记录" class="headerlink" title="旋转变换的一些想法记录"></a><strong>旋转变换的一些想法记录</strong></h1><p>空间一点关于任意轴旋转，点变换之间的关系以及传统坐标转换的解读</p><span id="more"></span><h2 id="旋转轴"><a href="#旋转轴" class="headerlink" title="旋转轴"></a>旋转轴</h2><p>一般说法，已知P点在B坐标系下坐标，通过旋转矩阵可以求得P点在A坐标系下的坐标</p><script type="math/tex; mode=display">{ }^A P={ }_B^A R^B P</script><p>也可以理解为，P点A坐标系下的原运动点通过旋转运动得到新的点P’，均基于A坐标系，与前者的区别在于对于点意义的理解，即坐标系为主体变换与以点为主体变换，旋转矩阵则是绕某一根轴旋转theta，绕任意轴按照这个方式理解。</p><script type="math/tex; mode=display">{ }^A P^{\prime}=R(\theta)^A P</script><p>绕任意轴旋转的通式推导大家都很熟悉，本质也是在求取R的过程，</p><script type="math/tex; mode=display">P^{\prime}=T \cdot R \cdot T^{-1} \cdot P</script><script type="math/tex; mode=display">M=T(-x,-y,-z) \cdot R x(-\alpha) \cdot R y(\beta) \cdot R z(\theta) \cdot R y(-\beta) \cdot R x(\alpha) \cdot T(x, y, z)</script><script type="math/tex; mode=display">\left[\begin{array}{cccc}u^2+\left(v^2+w^2\right) \cos \theta & u v(1-\cos \theta)-w \sin \theta & u w(1-\cos \theta)+v \sin \theta & \left(a\left(v^2+w^2\right)-u(b v+c w)\right)(1-\cos \theta)+(b w-c v) \sin \theta \\u v(1-\cos \theta)+w \sin \theta & v^2+\left(u^2+w^2\right) \cos \theta & v w(1-\cos \theta)-u \sin \theta & \left(b\left(u^2+w^2\right)-v(a u+c w)\right)(1-\cos \theta)+(c u-a w) \sin \theta \\u w(1-\cos \theta)-v \sin \theta & v w(1-\cos \theta)+u \sin \theta & w^2+\left(u^2+v^2\right) \cos \theta & \left(c\left(u^2+v^2\right)-w(a u+b v)\right)(1-\cos \theta)+(a v-b u) \sin \theta \\0 & 0 & 0 & 1\end{array}\right]</script><p>前后的变换过程目的是将任意轴线与Z轴重合，然后恢复，保证相对基坐标系下进行变换，此时，P点表示A坐标下位置，而P‘表示A坐标系下旋转后的位置，这里附上已经验证过的matlab矩阵代码，方便使用：</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RT=[u^<span class="number">2</span>+(v^<span class="number">2</span>+w^<span class="number">2</span>)*<span class="built_in">cos</span>(theta),u*v*(<span class="number">1</span>-<span class="built_in">cos</span>(theta))-w*<span class="built_in">sin</span>(theta),u*w*(<span class="number">1</span>-<span class="built_in">cos</span>(theta))+v*<span class="built_in">sin</span>(theta),(a1*(v^<span class="number">2</span>+w^<span class="number">2</span>)-u*(b1*v+c1*w))*(<span class="number">1</span>-<span class="built_in">cos</span>(theta))+(b1*w-c1*v)*<span class="built_in">sin</span>(theta);</span><br><span class="line">    u*v*(<span class="number">1</span>-<span class="built_in">cos</span>(theta))+w*<span class="built_in">sin</span>(theta),v^<span class="number">2</span>+(u^<span class="number">2</span>+w^<span class="number">2</span>)*<span class="built_in">cos</span>(theta),v*w*(<span class="number">1</span>-<span class="built_in">cos</span>(theta))-u*<span class="built_in">sin</span>(theta),(b1*(u^<span class="number">2</span>+w^<span class="number">2</span>)-v*(a1*u+c1*w))*(<span class="number">1</span>-<span class="built_in">cos</span>(theta))+(c1*u-a1*w)*<span class="built_in">sin</span>(theta);</span><br><span class="line">    u*w*(<span class="number">1</span>-<span class="built_in">cos</span>(theta))-v*<span class="built_in">sin</span>(theta),v*w*(<span class="number">1</span>-<span class="built_in">cos</span>(theta))+u*<span class="built_in">sin</span>(theta),w^<span class="number">2</span>+(u^<span class="number">2</span>+v^<span class="number">2</span>)*<span class="built_in">cos</span>(theta),(c1*(u^<span class="number">2</span>+v^<span class="number">2</span>)-w*(a1*u+b1*v))*(<span class="number">1</span>-<span class="built_in">cos</span>(theta))+(a1*v-b1*u)*<span class="built_in">sin</span>(theta);</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="DH坐标及相对变换"><a href="#DH坐标及相对变换" class="headerlink" title="DH坐标及相对变换"></a>DH坐标及相对变换</h2><p>右乘的案例理解，动系指的各个阶段的坐标系，而非最终系（用词不标准，体会即可）</p><p>四面体作为一种稳定机构单元，其旋转过程中相邻旋转轴线的夹角是固定的，因此可以直接应用DH法获取各个轴系之间的运动关系，但是运动单元不然，各个轴线之间存在闭合并联支链，运动关系复杂，不能直接获取关系，应用四元数本身与直接在笛卡尔坐标系在进行变换的意义是相同的，只是表示方法不同，然后就四元数可以调用的包多一点，不需要基于原理摸代码，表示上也更为简单，但是后续的运动速度分析，存在一定问题，方案待定，需要进一步理解概念。</p><p>坐标A-B的变换，以四面体为例，两个相邻的轴线，以A系为基准，就难以寻找关系，以B系为基准，按照B系各个动坐标分阶段的变换获取关系，已知A-B,需要先平移后旋转，因此以第一阶段平移B动坐标为基础，初次平移结束，此时动B的Z轴与A的Z轴方向一致，因此按照此坐标则是沿着Z2轴正向平移，重合之后开始第二阶段的转换，该过程右乘。</p><p>总结，左乘最为常见，概念上右乘是指针对动坐标系，但是实际需要理解，针对的是A-B过程中每一次变换的动坐标系，而非最终合成B系，直接以B系进行参考，很容易糊涂，假设A-B,需要经过旋转1，平移1，旋转2，则DH关系转换中，则是以旋转1系，平移系，以及旋转2三个坐标系为基准依次右乘，其变换也是这个过程，据此可以理解转换公式，完成推导。</p><h2 id="对称变换及速度关系"><a href="#对称变换及速度关系" class="headerlink" title="对称变换及速度关系"></a>对称变换及速度关系</h2><p>待补充</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathematic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gbasisorder</title>
      <link href="/2024/08/12/gbasisorder/gbasisorder/"/>
      <url>/2024/08/12/gbasisorder/gbasisorder/</url>
      
        <content type="html"><![CDATA[<p><strong>[Groebner basis]</strong></p><p>三种排序（备份方便查询）</p><p> <code>'degreeInverseLexicographic'</code>, <code>'degreeLexicographic'</code>, or <code>'lexicographic'</code> </p><span id="more"></span><ol><li><strong><code>gbasis(poly)</code></strong> </li></ol><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">syms x y</span><br><span class="line">poly = [x^<span class="number">2</span> + y^<span class="number">2</span> - <span class="number">1</span>; x - y^<span class="number">3</span>];</span><br><span class="line">G = gbasis(poly);</span><br></pre></td></tr></tbody></table></figure><ol><li><strong><code>gbasis(poly, vars)</code></strong> </li></ol><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">syms x y z</span><br><span class="line">poly = [x^<span class="number">2</span> + y^<span class="number">2</span> - z^<span class="number">2</span>; x - y*z];</span><br><span class="line">vars = [x, y, z];</span><br><span class="line">G = gbasis(poly, vars);</span><br></pre></td></tr></tbody></table></figure><ol><li><strong><code>gbasis(___, 'MonomialOrder', MonomialOrder)</code></strong> </li></ol><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">syms x y</span><br><span class="line">poly = [x^<span class="number">2</span> + y^<span class="number">2</span> - <span class="number">1</span>; x - y^<span class="number">3</span>];</span><br><span class="line">G = gbasis(poly, [x, y], <span class="string">'MonomialOrder'</span>, <span class="string">'grlex'</span>);</span><br></pre></td></tr></tbody></table></figure><p>EXAMPLE:</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">syms x y z</span><br><span class="line">f1 = x^<span class="number">2</span> + y^<span class="number">2</span> - z^<span class="number">2</span>;</span><br><span class="line">f2 = x*y - <span class="number">1</span>;</span><br><span class="line">f3 = z - <span class="number">1</span>;</span><br><span class="line">polys = [f1; f2; f3];</span><br><span class="line"></span><br><span class="line"><span class="comment">% Compute the Gröbner basis</span></span><br><span class="line">G = grobner(polys, [x, y, z]);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Solve the system</span></span><br><span class="line">solutions = solve(G, [x, y, z]);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Display the solutions</span></span><br><span class="line">x_sol = solutions.x;</span><br><span class="line">y_sol = solutions.y;</span><br><span class="line">z_sol = solutions.z;</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'Solutions for x:'</span>);</span><br><span class="line"><span class="built_in">disp</span>(x_sol);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'Solutions for y:'</span>);</span><br><span class="line"><span class="built_in">disp</span>(y_sol);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'Solutions for z:'</span>);</span><br><span class="line"><span class="built_in">disp</span>(z_sol);</span><br></pre></td></tr></tbody></table></figure><h3 id="1-Lexicographic-Order-lex"><a href="#1-Lexicographic-Order-lex" class="headerlink" title="1. Lexicographic Order (lex)"></a>1. <strong>Lexicographic Order (lex)</strong></h3><p><strong>Advantages:</strong></p><ul><li><strong>Simplicity:</strong> Easy to understand and implement. It’s straightforward because it follows a strict variable precedence, similar to dictionary order.</li><li><strong>Algorithm Efficiency:</strong> Often used in algorithms where the precedence of variables is crucial, such as in Gröbner basis computations where the structure of the ideal is dependent on the variable ordering.</li><li><strong>Predictability:</strong> Provides consistent results that can be easier to predict and verify, especially in systems where variable ordering is well-defined.</li></ul><p><strong>Applications:</strong></p><ul><li>Preferred in problems where the order of variables has a natural hierarchy or importance, such as certain optimization problems or algorithms where variable prioritization is essential.</li></ul><h3 id="2-Graded-Lexicographic-Order-grlex"><a href="#2-Graded-Lexicographic-Order-grlex" class="headerlink" title="2. Graded Lexicographic Order (grlex)"></a>2. <strong>Graded Lexicographic Order (grlex)</strong></h3><p><strong>Advantages:</strong></p><ul><li><strong>Degree Consideration:</strong> First organizes monomials by their total degree, which is useful in contexts where the degree of the polynomial plays a significant role.</li><li><strong>Balanced Comparison:</strong> Within monomials of the same total degree, it applies lexicographic ordering, which can provide a balance between degree and variable precedence.</li><li><strong>Ideal Theory:</strong> Commonly used in algebraic geometry and commutative algebra to handle polynomial ideals where total degree matters.</li></ul><p><strong>Applications:</strong></p><ul><li>Useful in Gröbner basis computations where maintaining a balance between total degree and variable order helps in simplifying polynomial systems, especially when dealing with polynomial equations where the degree of terms influences the structure.</li></ul><h3 id="3-Graded-Reverse-Lexicographic-Order-grevlex"><a href="#3-Graded-Reverse-Lexicographic-Order-grevlex" class="headerlink" title="3. Graded Reverse Lexicographic Order (grevlex)"></a>3. <strong>Graded Reverse Lexicographic Order (grevlex)</strong></h3><p><strong>Advantages:</strong></p><ul><li><strong>Focus on Degree and Last Variables:</strong> Organizes monomials by total degree first, but within the same degree, it compares starting from the last variable, which can be useful in certain algebraic computations.</li><li><strong>Efficient Simplification:</strong> Often leads to more efficient simplifications in polynomial systems where last variables are less significant, and can simplify Gröbner basis computations by focusing on more “significant” terms first.</li><li><strong>Algebraic Variety:</strong> Provides a different perspective in solving polynomial systems, which can be advantageous in specific algebraic contexts or when dealing with varieties in algebraic geometry.</li></ul><p><strong>Applications:</strong></p><ul><li>Preferred in cases where polynomial systems or geometric problems benefit from handling terms with less importance first, such as certain types of algebraic geometry problems or when working with varieties where polynomial terms’ significance changes based on their position.</li></ul><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li><strong>Lexicographic Order (lex):</strong> Simplifies understanding and implementation; predictable results.</li><li><strong>Graded Lexicographic Order (grlex):</strong> Balances degree and variable ordering; useful for polynomial systems where degree is significant.</li><li><strong>Graded Reverse Lexicographic Order (grevlex):</strong> Focuses on degree first and then the last variables; efficient in simplifying systems where less significant terms are processed earlier.</li></ul><p>单论solve计算效率，化简之后的计算公式效率提高大概30%，删去分析 Gröbner 基阶次的内容。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algebraic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔II</title>
      <link href="/2024/08/05/%E9%9A%8F%E7%AC%94II/%E9%9A%8F%E7%AC%94II/"/>
      <url>/2024/08/05/%E9%9A%8F%E7%AC%94II/%E9%9A%8F%E7%AC%94II/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"><br>平常心平常心~</p><span id="more"></span><p>做事要有耐心，要对家人有耐心，要对陌生人有耐心。</p><p>经常遇到自己不乐意的事情就容易表露出来，给人一种拒人千里的感觉，事后老后悔让别人不开心了，真的不太好，多点换位思考，耐心一点。</p><hr><p>最近事情比较多，论文写的也不太顺利，其实内容上已经没有太大问题，运动模式部分还需要看数据才能判断怎么区分维度和驱动速度的关系，得得踏踏实实的推进实质内容了，8月5日周一，这周需要一些进度完成，动力学部分在运动模式部分加入一下，曲线规划也有一部分内容，至少20号之前要有个中期初版。</p><hr><p>看了个医疗电视剧问心，结局还是停留在美好了，其实往后想想还是一堆问题，曾经向往真挚的情感，现在开始更多考虑现实，与一些朋友要保持距离，开开心心的聊天就行，柴米油盐才是生活的本质，人的成分也基本一致，漫长的时光会磨灭一切。</p><p>护士长因为自己产检，没有及时把钱打回账户，刚看到的时候，那一瞬间有点怪人家，连带着辩护都有些讨厌，后来一想，其实是可以理解得，毕竟人家的事情更重要，比较下来这边的事情也不是很重要，后来也可以澄清，突然开始觉得自己可恶，怎么可以怪人家，现实里也是，真得多想想，耐心一点耐心一点，绕绕路等等人呗~</p><p>再就是年龄问题，平时看动漫看其他电视剧，看看主角的年龄总会觉得自己真老了，佟湘玉都说自己24岁，但是看看这个剧，又感觉自己也不是很老，培养一个医学博士需要耗费相当久的时间，虽然不是学医得，但是经历也算类似，所以还是希望像剧中人一样可以选择不受牵绊的去做一些自己想做的事情，没必要一直纠结。</p><p>毛晓彤确实有点甜分超标，过于可爱了属于是233</p><hr><ul><li>[x] 其实都不太重要，还是耐心比较重要，有时候自己麻烦一点，让别人舒心，后续也会开心一点，就这样，当然是对家人、对朋友。</li></ul>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EMO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>morphing_and_deformation</title>
      <link href="/2024/07/05/morphing-and-deformation/morphing-and-deformation/"/>
      <url>/2024/07/05/morphing-and-deformation/morphing-and-deformation/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"><br><strong>morphing与deformation区别</strong></p><span id="more"></span><h3 id="Shape-Morphing"><a href="#Shape-Morphing" class="headerlink" title="Shape Morphing"></a>Shape Morphing</h3><ul><li><strong>Context</strong>: Shape morphing is typically discussed in areas where objects or materials are designed to change shape in a controlled, intentional, and often reversible manner.</li><li><strong>Applications</strong>:<ul><li><strong>Computer Graphics and Animation</strong>: Smooth transitions between different shapes or forms, often used in character animations or special effects.</li><li><strong>Aerospace Engineering</strong>: Wings or other components that change shape to optimize performance under different conditions.</li><li><strong>Robotics</strong>: Soft robots that can change shape to navigate through different environments.</li><li><strong>Smart Materials</strong>: Materials that can change their shape in response to stimuli (e.g., temperature, light, electric fields).</li></ul></li><li><strong>Example</strong>: “The development of shape morphing structures can lead to more efficient and adaptable aircraft designs.”</li></ul><h3 id="Shape-Deformation"><a href="#Shape-Deformation" class="headerlink" title="Shape Deformation"></a>Shape Deformation</h3><ul><li><strong>Context</strong>: Shape deformation is a broader term that encompasses any change in shape, whether it is controlled or due to external forces. It includes both elastic (reversible) and plastic (permanent) deformations.</li><li><strong>Applications</strong>:<ul><li><strong>Physics and Mechanics</strong>: Studying how materials deform under various forces and conditions (e.g., tension, compression, shear).</li><li><strong>Materials Science</strong>: Understanding how different materials respond to stress and strain.</li><li><strong>Engineering</strong>: Designing structures and components that can withstand deformations without failing.</li><li><strong>Biology</strong>: Examining how biological tissues deform under pressure or during movement.</li></ul></li><li><strong>Example</strong>: “The research analyzes the shape deformation of metal alloys under high stress to improve their performance in structural applications.”</li></ul><h3 id="Academic-and-Idiomatic-Use"><a href="#Academic-and-Idiomatic-Use" class="headerlink" title="Academic and Idiomatic Use"></a>Academic and Idiomatic Use</h3><ul><li><strong>Shape Morphing</strong>:<ul><li>More specific and often used in advanced or niche fields.</li><li>Conveys a sense of smooth and intentional transformation.</li><li>Less common in general academic literature but highly relevant in fields like aerospace, robotics, and smart materials.</li></ul></li><li><strong>Shape Deformation</strong>:<ul><li>More general and widely applicable across many scientific and engineering disciplines.</li><li>Includes both controlled and uncontrolled changes in shape.</li><li>More commonly found in academic papers, textbooks, and research articles across a broad range of subjects.</li></ul></li></ul><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li><strong>Shape Morphing</strong>: Best used when discussing specific, controlled, and often reversible shape changes in specialized contexts.</li><li><strong>Shape Deformation</strong>: More suitable for general discussions about changes in shape, whether controlled or due to external forces, across a wide range of scientific and engineering disciplines.</li></ul><h3 id="Key-Differences"><a href="#Key-Differences" class="headerlink" title="Key Differences"></a>Key Differences</h3><ul><li><p>Influence</p><p> often implies a more subtle or indirect impact, potentially over time.</p><ul><li>Example: “Her advice influenced my career path over the years.”</li></ul></li><li><p>Affect</p><p> generally denotes a direct and immediate impact.</p><ul><li>Example: “The sudden change in temperature affected the crops.”</li></ul></li></ul><hr><p>老黄采访记录：</p><p>played the game,not the score</p><p>just do your best,go to school,take the right classes,do your best,do you homework,</p><p>dedicate your self to be a good student,</p><p>that  grades will take care of itself,</p><p>if you go backwards,and you teach children just focus on the grades,</p><p>they’ll take easier classes,</p><p>ther’ll focus on just doing well in class and test but not learning and they might learn the wrong thing.</p><p>they might take less risk,they might challenge themselves less</p><p>i would prefer that our company challenges itself more,</p><p>this discover unknown things, do things that no one else has ever done before,</p><p>and be willing to fail, and be willing to learn along the way.,rather than i want you to deliver growth,growth,growth…growth margin,growth margin or whatever results.</p><p>you cannot control those things. don’t worry about those things.</p><p>and so i created a system called early indicators of future success.</p><p>don’t worry about future sucess, worry about the early indicators of future success.</p><p>and what are some of the things of early indicators ,you decide for yourself? </p><p>what are the early indicatos that your believe will lead to future success.</p><p>and that’s why our company focus on that.</p><p>we don’t let somebody else decide for us.</p><p>what’s the definition of success.as we thought we created ourselves.</p><p>and that’s why the company has to go create those indicators on work</p><p>don’t worry about anything else</p><p>and the results will take care of yourself</p><p>“Analyse” and “analysis” have the same grammatical roles and meanings as “analyze” and “analysis,” respectively, but with a difference in spelling. “Analyse” is the British English spelling, while “analyze” is the American English spelling. Both terms are used to describe the process of examining something in detail and the result of that process.<br>Analyse<br>Part of Speech: Verb<br>Definition: To examine something methodically and in detail, typically in order to explain and interpret it.<br>Usage:<br>Action: “Analyse” describes the action of examining and breaking down information into components to understand it better.<br>Examples:”Scientists analyse data to draw conclusions.”<br>“We need to analyse the results of the experiment.”<br>Analysis<br>Part of Speech: Noun<br>Definition: The detailed examination of the elements or structure of something.<br>Usage:<br>Result: “Analysis” refers to the process or the result of analysing something.<br>Examples:”The analysis revealed important insights.”<br>“Her analysis of the market trends was thorough and detailed.”<br>Key Differences<br>Spelling:<br>Analyse: British English spelling of the verb.<br>Analyze: American English spelling of the verb.<br>Analysis: The spelling of the noun remains the same in both British and American English.<br>Function:<br>Analyse/Analyze: Describes the act or process of examining something.<br>Analysis: Refers to the outcome or result of the examination process.<br>Grammatical Role:<br>Analyse/Analyze: Verb, used to describe an action.<br>Analysis: Noun, used to describe a thing or concept.<br>Context:<br>Analyse/Analyze: Used when talking about performing the action of examining.Example: “They will analyse the financial statements.” (British English)<br>Example: “They will analyze the financial statements.” (American English)<br>Analysis: Used when referring to the completed work or the process of examination.Example: “The financial analysis was very insightful.”<br>Examples in Sentences<br>Analyse (British English):<br>“Before making a decision, it’s important to analyse all the available information.”<br>“The software can analys</p><hr><p>乱七八糟转载</p><p>不太过分就尽量忍让，开心就好。</p><p>  <em>家人、朋友和重要的人要放在优先位置。少数亲密朋友胜过一百个普通朋友。不要与老朋友失联。</em> </p><p>  <em>做让你快乐的事，不要做让你不快乐的事。不要和满是负能量的人联系。</em> </p><p> <em>努力工作，但不要错过生活。成为专业领域的顶尖，找到自己的生产力系统，<strong>不要害怕冒险。</strong></em> </p><p> <em>赚钱比花钱有趣，但在朋友、新体验、节省时间、旅行和事业上花的钱不要吝啬。</em> </p><p> <em>不要受人摆布。人们可以变得强大，自信与傲慢有区别，目标是前者</em>。 -表面听话，骨子里全是叛逆。。。</p><p> <em>为自己设定每天、每年和每十年的清晰目标</em>。 -有点难，每天比较重要。</p><p> <em>勇敢追求你想要的。如果你认为不做某事会后悔，那就去做。遗憾通常来自于没做的事</em> </p><p> <em>尽力帮助别人，对陌生人友好，即使在没人注意没有回报的时刻也要友好</em>。 -无目的的帮助别人确实会很开心</p><p> <em>要贪婪地学习。 - 经常尝试新事物：做新事物能让时间过得慢些，增加幸福感，保持生活有趣，还能防止思维僵化。每年在生活和工作中都要尝试一些重大、新颖、有挑战的事情。</em> </p><p>  <em>学会原谅：要学会原谅他人。</em> -这个确实，只要不是太过分，影响小，能退一步就退一步，心里过去自己也能舒服。毕竟不能指望每个人十全十美。</p><p> <em>不过分追求地位：地位没有真实价值维持不了多久，而且会让人感到空虚。</em> 平等就行，所谓年纪辈分都是没意义的垃圾；</p><p> <em>感恩和正确看待问题：学会感恩，不要过多抱怨，不要嫉妒别人的成功。有些人可能会嫉妒你的成功，你得学会忽略这些声音。</em> 走自己的路，平常心就是这样</p><p> <em>做行动派：做一个行动派，而不是只会空谈的人。</em> 低头，很难呀</p><p> <em>冷静思考：行动前先冷静思考几秒。如果你很愤怒，那就多思考几分钟。</em> </p><p> <em>不妄下定论：不要轻易对他人妄下定论，你可能永远无法完全了解他们的全部故事，要学会设身处地为他人着想。</em>  体会人的复杂，慎重决定</p><p> <em>不要轻易说‘很难’，不为失败找借口，只为成功找方法.</em>  尝试</p>]]></content>
      
      
      <categories>
          
          <category> GPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACADEMIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心情随笔</title>
      <link href="/2024/05/15/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
      <url>/2024/05/15/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<h1 id="心情随笔，胡思乱想"><a href="#心情随笔，胡思乱想" class="headerlink" title="心情随笔，胡思乱想"></a>心情随笔，胡思乱想</h1><p>胡乱笔记，想到什么记什么。</p><span id="more"></span><h2 id="无效预演"><a href="#无效预演" class="headerlink" title="无效预演"></a>无效预演</h2><p>最近发现一个不自主的问题，脑子里总是喜欢为不熟悉的事情做预演，但是其实是往往没啥作用，徒劳心力；</p><p>以KE为例，要注意区分用功复习与无效预演的差别，面对来临的安排，最好的做法就是只要没有必须拒绝的理由，就去接受，兵来将挡水来土掩，是一种从容的态度，之前二也是感觉很麻烦，但是结束之后又有一个还算完美的结局，所以接下来的事情，就继续下去；</p><h2 id="间隙性分心："><a href="#间隙性分心：" class="headerlink" title="间隙性分心："></a>间隙性分心：</h2><p>常常无法保持持续的专注力，上一次高效工作还是因为有个明确DDL的时候，反思一下，问题主要在于两个：</p><p>第一是目标比较模糊，虽然知道要去做哪个内容，但是缺少的内容不够明确，比方说已知需要看完那两篇博士论文，整理之前收集的SMM背景,目的是吸收方法，找一些新的分析工具，坐标转换想利用四元数，简洁表述，但是第一步还有问题，正无问题，逆所需要的信息、流程不明确，这是目前急需解决的问题，整理完论文应该就会有结果，周五之前需要结束。</p><p>第二没有完全切断干扰源，luna的视频给了我很大的启发，没有严格的限制就不会有强大的动力去切断干扰，自我设限催眠一下，是一个不错的手段，半执行状态已经能感受到方法的有效性，通过限制增加动力就可以。</p><p>第三短期目标的设置，按照工作量设定目标而非时间阶段非常有效，结合二去执行，受到限制，专注一点。</p><h2 id="对短视频的思考："><a href="#对短视频的思考：" class="headerlink" title="对短视频的思考："></a>对短视频的思考：</h2><p>前几天看了油管上chenlily的新视频，没想到也在为短视频的问题困扰，对我而言，短视频（不以时间长短作为区分，内容含量上的短）其实无所谓，因为我平时也不会去看，我讨厌那些没头没尾的创作内容，持续性的刺激多巴胺，我认为是一种非常下作的创作方法，但是人生就是这样，兜里请揣满人民币，叛逆之前也需要让别人先看到你。</p><p>C之前就表达过为了生存和播放量必须开始制作，其实我能理解，也以为她已经想通了，感觉那还蛮好的，没想到停更了那么久，新视频依然还是在为这个事情困扰，真的是个很纯粹的人了，如果是我的话，以此为生，可能会去双线并行，坚持长vlog的制作，虽然更耗心力，但是这样会有更加长远的好处，观众盘会更加稳定，风评也会越来越好；短视频不会耗费太多精力，那就继续乘着风口挣钱，不要把两类视频的播放量混在一起思考，当成赚钱的工具就行，兴趣当成工作固然幸运，但是大多不得行，做人百分比这个问题真的是个永恒的话题。</p><p>乱七八糟的想法在这里依次补充：</p><p>20240514：用到或者有了明确的想法再去做。</p><p>想得太多会不会活得很累？</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emotion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>skill</title>
      <link href="/2024/03/20/skill/skill/"/>
      <url>/2024/03/20/skill/skill/</url>
      
        <content type="html"><![CDATA[<h1 id="EVERYDAY速查总结"><a href="#EVERYDAY速查总结" class="headerlink" title="EVERYDAY速查总结"></a>EVERYDAY速查总结</h1><p>一些小技巧总结，方便补充查阅</p><span id="more"></span><h2 id="罗马数字："><a href="#罗马数字：" class="headerlink" title="罗马数字："></a>罗马数字：</h2><div class="table-container"><table><thead><tr><th>羅馬字</th><th>數字</th><th>羅馬字</th><th>數字</th><th>羅馬字</th><th>數字</th><th>羅馬字</th><th>數字</th></tr></thead><tbody><tr><td>I</td><td>1</td><td>XI</td><td>11</td><td>XXI</td><td>21</td><td>C</td><td>100</td></tr><tr><td>II</td><td>2</td><td>XII</td><td>12</td><td>XXIX</td><td>29</td><td>CI</td><td>101</td></tr><tr><td>III</td><td>3</td><td>XIII</td><td>13</td><td>XXX</td><td>30</td><td>CC</td><td>200</td></tr><tr><td>IV</td><td>4</td><td>XIV</td><td>14</td><td>XL</td><td>40</td><td>D</td><td>500</td></tr><tr><td>V</td><td>5</td><td>XV</td><td>15</td><td>XLVIII</td><td>48</td><td>DC</td><td>600</td></tr><tr><td>VI</td><td>6</td><td>XVI</td><td>16</td><td>IL</td><td>49</td><td>CM</td><td>900</td></tr><tr><td>VII</td><td>7</td><td>XVII</td><td>17</td><td>L</td><td>50</td><td>M</td><td>1000</td></tr><tr><td>VIII</td><td>8</td><td>XVIII</td><td>18</td><td>LX</td><td>60</td><td>MDCLXVI</td><td>1666</td></tr><tr><td>IX</td><td>9</td><td>XIX</td><td>19</td><td>XC</td><td>90</td><td>MCMLXX</td><td>1970</td></tr><tr><td>X</td><td>10</td><td>XX</td><td>20</td><td>XCVIII</td><td>98</td><td></td></tr></tbody></table></div><h2 id="刚度矩阵提取："><a href="#刚度矩阵提取：" class="headerlink" title="刚度矩阵提取："></a>刚度矩阵提取：</h2><ul><li>WB打开不显示： view-reset windows layout，显示前变形状态图</li><li>二力杆节点显示：搜索preference-勾选numbers nodes</li></ul><p>workb提取设置及流程：</p><ol><li>软件中生成 point-genernate-line来自点-截面建立</li><li>mesh sizing-生成修改节点数量</li><li>输出结果中设置：求解方法solution-solver type-direct，analysis data-delete 非必要结构-no</li></ol><p>导入APDL:</p><ol><li>analysis setting-advanced-:求解方法去掉分布式</li><li>读取-component-mechanical APDL模块-插入solution 更新</li><li>APDL read查看模态</li><li>file-list-binary-matrix-sys/mech/.ful文件选择stifness matrix，读取参数-转成txt</li><li>导入matlab文件转码(目前存在问题是，空间结构系统中自动生成的节点与理论节点数量有一定误差，这个后续解决来再补充，应该暂时不会再用到这个东西了)</li></ol><h2 id="PS图片绘制设置-像"><a href="#PS图片绘制设置-像" class="headerlink" title="PS图片绘制设置(像)"></a>PS图片绘制设置(像)</h2><p>图片无损方法：图像大小-重新取样/邻近(赢边缘)宽高</p><p>变形方法：</p><ol><li>滤镜液化 大小自定，压力25</li><li>冻结蒙版，压力100，眼睛下</li><li>转化成智能对象</li><li>视频帧转</li></ol><p>像素前置设置</p><ol><li>6464自订-拉入图片-窗口排列-双联垂直</li><li>视图-显示-像素网格</li><li>文件-存储为png 新建画布10，编辑-首选项-常规(邻近，非像素恢复 C+T放大)</li></ol><h2 id="视频剪辑"><a href="#视频剪辑" class="headerlink" title="视频剪辑"></a>视频剪辑</h2><ol><li>右键导入视频可以拆分轨道</li><li>去黑边方式-按住Crtl可以不锁定宽高比</li><li>缩略图全显示：选项-首选项-视频</li><li>Crtl+G时间点</li><li>反转-创建子剪辑</li><li>shift 工具多机位</li><li>先放大局部-导出视频-重新导入放大</li><li>抠图-视频色键</li><li>运动字幕-使用字幕与文字-文本后图标添加动画-出现关键帧</li><li>导出倍速视频：crtl按住视频边线：左加速右减速，直接拖边线不可以，只会恢复切片或者重复切片。</li></ol><h2 id="MATLAB"><a href="#MATLAB" class="headerlink" title="MATLAB"></a>MATLAB</h2><ol><li>三维矢量图解组失败，一般是由于三维矢量图无法通过图窗复制-导出设置-渲染-printers对钩-应用复制图窗</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Silence</title>
      <link href="/2024/03/20/Silence/Silence/"/>
      <url>/2024/03/20/Silence/Silence/</url>
      
        <content type="html"><![CDATA[<p>沉默的大多数决定一切，当然也可能一点不重要</p><span id="more"></span><p>之前很喜欢一个民谣歌手，从崖边跌落开始入坑，最后听的是茶酒伴，再然后就听的少了许多，可能是因为随着年龄增长，越来越喜欢怀旧，容易留恋过去，导致对于新鲜的事物接受度越来越低，新出的歌听起来总是没什么感觉，看到歌手各种各样“叛逆”动态，心里想想开心就好，自己没啥资格留下对别人的评论，于是就沉默下来，每个人都是为自己活着，确实是自己开心就好。</p><p>不幸的是，现实里却常常事与愿违，面对上位压迫，往往还是会做出妥协，面对下位请求，则是做自己，这样的做法是否是真的做自己呢？印象里有一次评论区说一句喜欢过去的借我，春花发出近乎切割这首歌的言论，但是后来雷军转发，还是转的歌手原版本，春花也会出来营业，不知道那时候心里作何想法。</p><p>无意贬低任何人，只是在描述自己看到的一切，毕竟自己也是个俗人，在面对不影响自己太大利益的问题前，我会做到保持自我，开心就好，但是面对不可抵抗的问题，我也常常妥协，只是常常会思考，这个百分比占到多少才能算开心就好，坦然接受不纯粹，是不是也算？</p><p>过去几年发生的很多事情改变了我很多对于这个世界的看法，依据不同的标准，就会做出不同的判断，以生死或者身边亲人朋友庞大的利益关系作为标准，沉默的大多数就不能被忽视，除非狠得下心放弃一切，所以最终大家都会成为俗人，只是没有被逼到那个程度（战争年代保有信仰的先辈是真的值得敬佩），这也是当今各种制度能够运行的基础，天下乌鸦一般黑，哪有绝对的是非对错，如果有，那只能是数学，但是这个世界又没有完全独立运转的事物，常常都是混杂在一起，所有常说难得糊涂，没有绝对的邪恶，只有正义的偏离。</p><p>言归正传，借用之前自己一句评论，朴树的歌能让我从难过变得平和，而春花的歌让我从平和到更加平和，未来依然会喜欢他们，但是也很好奇未来会是什么样子，毕竟很多老牌歌手几十年了还是被粉丝要求唱同一首歌，很喜欢观察完全不同生活的变化轨迹。</p><p>沉默、沉默，既要真实也要沉默，不带功利心的做一些事，人生才能持续下去…</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT开发</title>
      <link href="/2024/03/03/QT%E5%BC%80%E5%8F%91/QT%E5%BC%80%E5%8F%91/"/>
      <url>/2024/03/03/QT%E5%BC%80%E5%8F%91/QT%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="QT5开发总结"><a href="#QT5开发总结" class="headerlink" title="QT5开发总结"></a>QT5开发总结</h1><p>空间XX优化开发界面-2024.2.5完成提交版</p><h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求:"></a>功能需求:</h2><ul><li>基于控制逻辑界面跳转</li><li>调用底层计算代码并优化</li><li>几个虚拟加载进度条</li><li>多阶输入读取及判断方式</li></ul><p>总体：上位机需求功能比较简单，调用代码由于老师提供的底层的优化算法本身存在运行问题，导致一部分协调存在bug，因此整体功能存在问题，基本数据控制功能开发完成，已提交，暂时结束。</p><span id="more"></span><p>1.跳转算法：</p><p>基于py的开发逻辑与C++一致，常见的几种，这里我使用的是按键检测，几个功能就写几个子界面，比较笨，但是容易理解，示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Ui_ST1_1 <span class="keyword">import</span> Ui_Form1_1</span><br><span class="line">self.pushButton.clicked.connect(self.popWindow) <span class="comment">#调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">popWindow</span>(<span class="params">self</span>):<span class="comment">#定义</span></span><br><span class="line">        self.formZ=QtWidgets.QWidget()</span><br><span class="line">        self.uiZ= Ui_Form1_1() <span class="comment">#逻辑界面</span></span><br><span class="line">        self.uiZ.setupUi(self.formZ)</span><br><span class="line">        self.formZ.show()</span><br></pre></td></tr></tbody></table></figure><p>2.底层代码调用：</p><p>abaqus子程序存在bug，这部分暂缺，后续如需要继续开发，代码修正后补充。</p><p>商业软件调用，写了一种基于subprocess调用外部EXE程序的方式，同样通过定义函数实现，注意一些小问题</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">self.pushButton_3.clicked.connect(self.<span class="built_in">open</span>)<span class="comment">#steupUI</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">self</span>):</span><br><span class="line">        subprocess.Popen(<span class="string">r"E:\Program Files\Inkscape\bin\inkscape.exe"</span>)<span class="comment">#这里注意一下python中的路径转义字符，要不就使用正斜杆，否则如上。</span></span><br><span class="line"><span class="comment">#补充一个启动文件</span></span><br><span class="line">self.pushButton_2.clicked.connect(self.openFile)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openFile</span>(<span class="params">self</span>):</span><br><span class="line">        directory1 = QFileDialog.getExistingDirectory(<span class="literal">None</span>, <span class="string">"启动程序"</span>,<span class="string">"./"</span>)</span><br><span class="line">        <span class="built_in">print</span>(directory1)</span><br></pre></td></tr></tbody></table></figure><p>3.假装加载2333以及读取数据</p><p>读取doublespinbox与progressbar协调，延时用法以及其余读取代码句式参照那本书，边查边记。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">valu = <span class="number">1</span><span class="comment">#定义初值</span></span><br><span class="line">self.pushButton_2.clicked.connect(self.va)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">va</span>(<span class="params">self</span>):<span class="comment">#点击执行只是循环一个功能，记住以后不要一个按钮对应多个按键，功能全部放在一起，执行顺序会有变化</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            time.sleep(<span class="number">0.09</span>)</span><br><span class="line">            self.progressBar.setProperty(<span class="string">"value"</span>, i)</span><br><span class="line">        valu=self.doubleSpinBox_4.value()<span class="comment">#读取数据句式</span></span><br><span class="line">        <span class="built_in">print</span>(valu)</span><br><span class="line">        self.formZ=QtWidgets.QWidget()</span><br><span class="line">        <span class="keyword">if</span> valu==<span class="number">1</span>:</span><br><span class="line">            self.uiZ= Ui_Form2_3()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.uiZ= Ui_Form2_31()</span><br><span class="line">        self.uiZ.setupUi(self.formZ)</span><br><span class="line">        self.progressBar.setProperty(<span class="string">"value"</span>, <span class="number">100</span>)</span><br><span class="line">        self.formZ.show()</span><br></pre></td></tr></tbody></table></figure><p>4.图片读取流程，再次记录一下：</p><p>QTcreator中构建资源库，在转成代码后进行转换运行，图片加载均通过UI端完成。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyrcc5 apprcc.qrc -o apprcc_re.py<span class="comment">#转换</span></span><br><span class="line">pyinstaller -F -W XX.py<span class="comment">#启动文件，其余控项可以看书</span></span><br></pre></td></tr></tbody></table></figure><h2 id="后续总结："><a href="#后续总结：" class="headerlink" title="后续总结："></a>后续总结：</h2><p>希望早点把我的”雇佣兵”工资结了QAQ。</p><p>那本书多看看，后续完成底层代码的协调，以及一个上位机的编写，李工那边的火星车上位机，有空的话帮他了结一下。</p><p>学学特效，多看看语法书，慢慢牢固基础~</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Q</title>
      <link href="/2024/02/26/Q/Q/"/>
      <url>/2024/02/26/Q/Q/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="琥珀川与荻野千寻"><a href="#琥珀川与荻野千寻" class="headerlink" title="琥珀川与荻野千寻"></a>琥珀川与荻野千寻</h1><p>不乱于心，不困于情，不畏将来，不念过往。</p><span id="more"></span><p>看完之后脑子里立刻跳出来这句话。</p><p>又看了一遍台配版的千与千寻，童年的记忆来源于此版，有些东西确实只是忘记，而不会消失，偶然间看到一些痕迹，就会瞬间回忆，不过别回头就好，不念过往。</p><p>总是希望所有的一切事情按照自己的计划进行，面对未知的事情常常心怀恐惧而不愿意前进，权衡利弊之后，重要的事情可以克服，在一些小事上却常常让步，谓之不在意，其实不然，内心是在畏惧狭义上的未来，千寻初入汤屋有点这个感觉，但是随着故事的发展，千寻是做到不畏将来了，不论是给河神洗澡、给白龙和无脸怪吃河神的丸子，或者是爬梯子进入汤婆婆的房子，这些没有人给她指引，都是自己基于想法做出的选择，只要自己认为是对的，如果暂时判断不了，只要无愧于心，即使未来不可预测，脚踏实地的去做就很好，想必未来也不会后悔，不畏将来。</p><p>人生的环境总在不断变化，主动接受变化就是不畏将来，主动接受就不会恐惧，千寻开始的恐惧来源于被动，被动常常引起焦虑，负面情绪随之增长，以前很喜欢袁朗说的一句话：“不太焦虑，耐得住寂寞，有很多人天天都在焦虑，怕没得到，怕寂寞，我喜欢不焦虑的人”，千寻后来是不焦虑的，慢慢的去做事本身也是一种快乐的过程。</p><p>“容是别人，欲是自己”，去做一切自己想做的事情，少去思考虚无的无数可能性，不可预料的东西常常是惊喜，也是缘分。</p>]]></content>
      
      
      <categories>
          
          <category> feeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> movie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>start2024</title>
      <link href="/2024/02/19/start2024/start2024/"/>
      <url>/2024/02/19/start2024/start2024/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h1 id="又是一年春"><a href="#又是一年春" class="headerlink" title="又是一年春"></a>又是一年春</h1><p>距离上次笔记已有一年，没有做到经常写笔记，今年要改正，今天的目的是写一下总结以及对自己的要求，以及年后的一些规划，</p><p>几个指令备注一下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"学习笔记  六"</span></span><br><span class="line">hexo d</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>过去的一年其实还不错，论文项目都有进度，但是后期又有点偷懒了，开年需要向后拓展，这部分已经总结过，简单略过。</p><h2 id="预计要求"><a href="#预计要求" class="headerlink" title="预计要求"></a>预计要求</h2><p>过去的一段时间和很多人交流过，也一个人旅游过，发现自己还是有很多问题，认识自己，改正自己。</p><p>1.新的一年依然要强迫自己去做应该做的事情，见贤思齐，多多反省，心里逃避，但是还是要前进，太内向了确实不太好，应该多尝试主动与他人沟通，认识下总归没坏处。</p><p>2.新的一年接地气一点，不要太理性主义了，多多肯定别人的观点，别人的分享也要主动去看看，不要表现的不感兴趣，不要否定别人，少提意见，没有什么很俗的东西，生活就是这样，开心点，合群点。</p><p>3.与师长们相处，还是往常的态度就好，谦虚但是也要有自己的主见，这个去年大体上没有做错的地方。</p><p>4.生活上，过去的一年相对规律，新的一年依旧保持，但是之后的一段时间要去上一些强度。</p><h2 id="年后规划"><a href="#年后规划" class="headerlink" title="年后规划"></a>年后规划</h2><p>1.学业部分不用讲，按照规律坚持就行</p><p>2.拓展一下爱好，旅游拍摄和像素画，要过得开心一点</p><h2 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h2><p>内心依然有一些炫耀欲，与人相处很害怕别人把希望寄托在我身上，不想承担额外的责任。。。</p><p>沧浪之水，脚踏实地一点，多多与人沟通，人还是要接地气一点，虚荣驱动理想天天飘着，实际一点，开心一点。</p><h2 id="补充一些博客修复内容："><a href="#补充一些博客修复内容：" class="headerlink" title="补充一些博客修复内容："></a>补充一些博客修复内容：</h2><p>Permission denied (publickey) 没有权限的publickey ，出现这错误一般是以下两种原因</p><p>客户端与服务端未生成 ssh key<br>客户端与服务端的ssh key不匹配<br>找到问题的原因了，解决办法也就有了，重新生成一次ssh key ，服务端也重新配置一次即可。</p><p>ssh-keygen -t rsa -C “xx@qq.com”</p><p>然后再终端下执行命令：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git<span class="meta">@github</span>.<span class="property">com</span></span><br></pre></td></tr></tbody></table></figure><p>最后两句会出现</p><figure class="highlight erlang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　No more authentication methods to <span class="keyword">try</span>.  　　Permission denied (publickey).</span><br></pre></td></tr></tbody></table></figure><p>在终端再执行以下命令</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent -s </span><br></pre></td></tr></tbody></table></figure><p>接着在执行</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~<span class="regexp">/.ssh/i</span>d_rsa</span><br></pre></td></tr></tbody></table></figure><p>$ ssh-add ~/.ssh/id_rsa<br>出现Could not open a connection to your authentication agent.<br>这时可以使用：ssh-agent bash 命令，然后再次使用ssh-add ~/.ssh/id_rsa_name这个命令就没问题了。<br>根据路径查看文件内部的命令： Identity added: …这是ssh key文件路径的信息 </p><p> 打开你刚刚生成的id_rsa.pub，将里面的内容复制，进入你的<a href="https://so.csdn.net/so/search?q=github&amp;spm=1001.2101.3001.7020">github</a>账号，在settings下，SSH and GPG keys下new SSH key，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。 设置完成后</p><h4 id="验证Key"><a href="#验证Key" class="headerlink" title="验证Key"></a>验证Key</h4><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git<span class="meta">@github</span>.<span class="property">com</span> </span><br></pre></td></tr></tbody></table></figure><p> 提示：Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access </p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emotion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>plan</title>
      <link href="/2023/01/29/plan/plan/"/>
      <url>/2023/01/29/plan/plan/</url>
      
        <content type="html"><![CDATA[<p>2023开学随笔</p><span id="more"></span><p>说着要更新，但是因为各种各样的事情总是拖后，上个学期有了一些进度，但是后续仍然有很多需要落实的地方，今天顺便一起想了，生活上也有好多事情要处理，后天开学了，晚上闲来无事，大概想想~</p><p>1.总的来讲，很多事进度没有严格按计划落实，还是个人惰性的问题，我自己一个人呆着的时候进度总是很慢，喜欢摸鱼，我打算严格落实目标，坚持完成。</p><p>2.有句话我觉得很有用-“你的人生没有那么多观众”，我现在已经可以下意识的做的一部分，但是还是没办法完全做到，不必强求吧，太过了可能也不好，对所有事都没兴趣，终归有问题，但是对一些没意义的事情，还是要避免，不去做没意义的事情；电话 会议？2333</p><p>3.开学之后是31，到元宵节，6天时间要加班把那个任务完成，最重要的一件事是每天也要坚持看英文文献，如果可以理解两个，把任务压缩到分配到每天，必须完成这些事情，然后汇报一下；这个是现阶段最最重要的事情</p><p>4.之前每天坚持落实的事情，要继续坚持下去，这个细规划吧；</p><p>5.生活上，过了个年胖了几斤，去了还是要规律饮食，坚持游泳，加油呀；</p><p>总结一下，落实进度，不要着急，行胜于言；</p><p>少说话，事情多做，多出自己的想法，多总结论文，多学习；</p><p>抵制下惰性，要努力呀；</p><p>有些话还想说，我觉得以后要果断一点，但前提是这半年要把目标落实了，很重要；</p><p>其余的生活规划放在后半年的时间里，总之脚踏实地，慢慢推进吧；</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> airfact </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>newnote</title>
      <link href="/2022/08/02/newnote/newnote/"/>
      <url>/2022/08/02/newnote/newnote/</url>
      
        <content type="html"><![CDATA[<p>又要重新开始更新啦，人生很难，总要继续，接下来会好好在这个无人知晓的角落记录我的人生，加油</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> airfact </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/02/life/life/"/>
      <url>/2022/08/02/life/life/</url>
      
        <content type="html"><![CDATA[<p> <strong>怎么会迷上你，我在问自己</strong></p><p> <strong>我什么都能放弃，居然今天难离去</strong></p><p>我是个什么人呢？</p><p>乐观、向上、热心又冷漠</p><p>犹豫、常常忽略一些事情、讨厌很多事情</p><p>一个半吊子的理想主义者～</p><p><a href="/img/R.jpg">r</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Quaternion</title>
      <link href="/2021/11/24/Quaternion/Quaternion/"/>
      <url>/2021/11/24/Quaternion/Quaternion/</url>
      
        <content type="html"><![CDATA[<h1 id="万向锁问题"><a href="#万向锁问题" class="headerlink" title="万向锁问题"></a>万向锁问题</h1><h2 id="造成影响："><a href="#造成影响：" class="headerlink" title="造成影响："></a>造成影响：</h2><p>出现万向锁后会丢失自由度</p><span id="more"></span><h2 id="从结构角度分析："><a href="#从结构角度分析：" class="headerlink" title="从结构角度分析："></a>从结构角度分析：</h2><p>主要原因是由于各旋转轴之间存在运动关系，即动态欧拉角，角度变化后，坐标系随之发生变化，比如万向锁结构，三个坐标轴分别可以用环结构表示，外环、中环、内环，当内环转动，即等效沿某一轴转动，内环与中、外环都存在运动关系，坐标系同时变化，就不会发生重叠现象，；当中环运动时，内环不会运动，只有外环会进行运动，那么内环所代表的坐标系可能会与外环所代表的坐标系重合，当进行动态旋转时，沿着外环与内环代表的坐标系运动，只会产生一个方向的自由度，由此发生了万向锁现象，即丢失一个自由度。</p><h2 id="后续一些想法"><a href="#后续一些想法" class="headerlink" title="后续一些想法"></a>后续一些想法</h2><p>看b站评论说为什么不选取惯性坐标系作为参考运动，这样就不会出现万向锁现象了？</p><p>其实这是一个概念的问题，首先需要理解欧拉角的意义，欧拉角是用来描述姿态的三个角度，包含静态、动态两种，静态欧拉角即沿着惯性坐标系进行运动，而动态欧拉角则会出现万向锁现象，动态有12种旋转方式，XYZ、XZY、XYX、XZX、YXZ、YZX、YXY、YZY、ZXY、ZYX、ZXZ、ZYZ,含有中间轴Y都存在万向锁问题。</p><p>因此该问题的本质是动态欧拉角的意义是什么？</p><p>基于动态坐标的欧拉角旋转，其惯性张量不随着时间改变而改变，将其进行对角化处理，即可以得到一个一组主轴和一个只含三个分量的主动惯量，动力学计算较为容易，这一部分内容可以机器人动力学模型计算案例中深入理解。</p><h2 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h2><p>为了描述复杂运动以及规避一些特殊点，可以用四元数工具进行描述分析，最近正在整理旋量与四元数的并联应用分析内容，以后会写一个小总结。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathematica </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>note</title>
      <link href="/2021/09/10/note/note/"/>
      <url>/2021/09/10/note/note/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的几个latex图片框架以及公式"><a href="#常用的几个latex图片框架以及公式" class="headerlink" title="常用的几个latex图片框架以及公式"></a>常用的几个latex图片框架以及公式</h1><span id="more"></span><figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">常用补充</span><br><span class="line"></span><br><span class="line">公式备注</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{tabularx}{<span class="keyword">\textwidth</span>}{@{}l@{<span class="keyword">\quad</span>}r@{———}X@{}}   </span><br><span class="line">式中<span class="built_in">&amp;</span> <span class="built_in">$</span>C<span class="built_in">_</span>{D, i}<span class="built_in">$</span><span class="built_in">&amp;</span>表示阻力系数，数值可根据表xx查询确定 <span class="keyword">\\</span> </span><br><span class="line"><span class="keyword">\end</span>{tabularx}<span class="keyword">\vspace</span>{3.15bp}  </span><br><span class="line"></span><br><span class="line">图片备注</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{figure}[!h]</span><br><span class="line"><span class="keyword">\setlength</span>{<span class="keyword">\subfigcapskip</span>}{-1bp}</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\begin</span>{minipage}{<span class="keyword">\textwidth</span>}</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\subfigure</span>{<span class="keyword">\label</span>{a}}<span class="keyword">\addtocounter</span>{subfigure}{-2}</span><br><span class="line"><span class="keyword">\subfigure</span>{<span class="keyword">\subfigure</span>[R=80mm]{<span class="keyword">\includegraphics</span>[width=0.25<span class="keyword">\textwidth</span>]{80}}}</span><br><span class="line"><span class="keyword">\hspace</span>{1em}</span><br><span class="line"><span class="keyword">\subfigure</span>{<span class="keyword">\label</span>{b}}<span class="keyword">\addtocounter</span>{subfigure}{-2}</span><br><span class="line"><span class="keyword">\subfigure</span>{<span class="keyword">\subfigure</span>[R=90mm]{<span class="keyword">\includegraphics</span>[width=0.25<span class="keyword">\textwidth</span>]{90}}}</span><br><span class="line"><span class="keyword">\hspace</span>{1em}</span><br><span class="line"><span class="keyword">\end</span>{minipage}</span><br><span class="line"><span class="keyword">\vspace</span>{0.2em}</span><br><span class="line"><span class="keyword">\caption</span>{不同静平台半径机构条件数分布图}</span><br><span class="line"><span class="keyword">\end</span>{figure}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{figure}[htbp]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\begin</span>{minipage}[t]{0.4<span class="keyword">\textwidth</span>}</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{431}</span><br><span class="line"><span class="keyword">\caption</span>{静平台坐标系}</span><br><span class="line"><span class="keyword">\end</span>{minipage}</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\begin</span>{minipage}[t]{0.4<span class="keyword">\textwidth</span>}</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{432}</span><br><span class="line"><span class="keyword">\caption</span>{动平台坐标系}</span><br><span class="line"><span class="keyword">\end</span>{minipage}</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\begin</span>{minipage}[t]{0.8<span class="keyword">\textwidth</span>}</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{45}</span><br><span class="line"><span class="keyword">\caption</span>{等效四面体示意图}</span><br><span class="line"><span class="keyword">\end</span>{minipage}</span><br><span class="line"><span class="keyword">\end</span>{figure}</span><br></pre></td></tr></tbody></table></figure><p>无用</p><p>结构紧凑，速度响应更快，定位精度更高，刚度更高，负载支持更好，动态性能更好，功耗更低</p><p>可以将辐射引起的力和力矩确定为三个新分量的总和：</p><p>（1）由于周围流体的惯性而增加的质量</p><p>（2）由于产生的表面波带走的能量而引起的辐射诱导的电位阻尼 。</p><p>（3）由于阿基米德（重量和浮力）而恢复。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> formula </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcyyy</title>
      <link href="/2021/09/10/gcyyy/gcyyy/"/>
      <url>/2021/09/10/gcyyy/gcyyy/</url>
      
        <content type="html"><![CDATA[<h1 id="并联机构弹性动力学建模与振动主动控制论文"><a href="#并联机构弹性动力学建模与振动主动控制论文" class="headerlink" title="并联机构弹性动力学建模与振动主动控制论文"></a>并联机构弹性动力学建模与振动主动控制论文</h1><p>2021.9.8</p><h4 id="并联机器人高维运动规划研究—刚柔耦合"><a href="#并联机器人高维运动规划研究—刚柔耦合" class="headerlink" title="并联机器人高维运动规划研究—刚柔耦合"></a>并联机器人高维运动规划研究—刚柔耦合</h4><p>非线性力学—————-形变+运动规划————非线性数学模型—————-弹性运动规划算法</p><p>无碰撞未超过运动规划极限—自由位形</p><p>（缺少论文整理部分）</p><span id="more"></span><p><strong>特殊规划-路径无奇异且路径具备刚度与精度</strong></p><p>弹性路径数学模型—内力与内力矩微分方程传递性，作用于整条路径，外部不具有传递性，只发生于作用点。</p><p>本构模型—-激励与响应的关系</p><p>路径形变控制机理</p><p>子任务内容：耦合作用机理、弹性运动模型、运动控制反解模型</p><p><strong>联合运动</strong>：动舵/直接力复合控制的难点在于如何有效、快速地融合气动舵的连续输出与直接力的离散输出。传统的优化融合策略需在每个控制周期内求解最优分配问题，这将消耗大量的机载计算资源。</p><p>问题：非线性弹性动力模型建立不够清晰</p><p>来源：TUOsd_cjm</p><p>动力模型过程清晰，验证存在一定疑问</p><p>3RRR构型</p><p>柔性机器人-造价低、操作速度快、驱动力小、能耗低、良好的机动性能、安全性高</p><p>关键词：并联、刚柔耦合动力学、振动抑制</p><p>杆件关节变形能</p><p>柔性机器人动力学方程—多自由度偏微分方程—有限维常微分方程近似替代</p><p>连续系统离散化处理—-假设模态法AMM、有限元方法FEM、集中参数法IPM。</p><p>记录一下小概念</p><p><strong>动力学方程</strong>：研究力和位移或力矩和转角的关系</p><ol><li>获得描述广义坐标随时间变化的闭环方程——-牛顿拉格朗日</li><li>给定广义坐标后，需要给系统多大的广义力，可以实现预期的广义坐标轨迹———-牛顿欧拉</li></ol><p>动力学建模方法：笛卡尔坐标、关节坐标、动力学样条法、波方法，李群李代数。</p><p>柔性机器人振动控制：</p><p>被动控制：</p><ul><li>优化构件截面参数及几何参数</li><li>复合材料替代金属材料</li><li>阻尼处理构件—减振</li></ul><p>主动控制：</p><ul><li>传感器与作动器</li><li>设计多个可控原动件的受控机构</li><li>基于动力模型的控制系统</li></ul><p>压电陶瓷片</p><p>压电陶瓷驱动器相关应用：压电驱动器绑定在弹性结构表面或嵌入压层复合材料中Edward</p><p>柔性机器人研究包含毂-两结构、柔性两杆和四杆机构，对于柔性并联研究较少。</p><p>质量、运动轨迹导致各关节驱动力矩和能耗差别很大</p><h2 id="柔性机器人动力学特性分析内容"><a href="#柔性机器人动力学特性分析内容" class="headerlink" title="柔性机器人动力学特性分析内容"></a>柔性机器人动力学特性分析内容</h2><p>频率特性分析、灵敏度分析、模态分析、动应力分析</p><p>系统弹性振动主要有低阶模态决定，固有频率越低，系统刚度越小，越容易振动</p><p>两步法：KED假设弹性变形位移是小的，忽略弹性变形对于刚体运动的影响，建立系统刚体动力学方程，将运动学变量带入弹性变形运动动力学方程。</p><p>一步法：考虑刚体运动与弹性变形运动耦合，更精确的模型求解方法</p><h2 id="力热固耦合弹性动力学（一致温度）"><a href="#力热固耦合弹性动力学（一致温度）" class="headerlink" title="力热固耦合弹性动力学（一致温度）"></a>力热固耦合弹性动力学（一致温度）</h2><p>基于有限元方法和Hamilton原理</p><p>建立单元弹性动力学模型，假设热载荷导致机构产生的变形量与应力导致的变形线性且各向同性，建立联立应变方程。</p><p>基于ANSYS瞬态动力学仿真，计算了主动关节和被动关节没有热载荷和多种温度下最大等效应力图</p><p>记录了多地温度变化曲线，测量连杆最大等效应力随时间的变化关系</p><p><strong>结论：</strong>温度变化，最大等效应力保持周期性上升；气温不变，最大等效应力保持周期性稳定。</p><p>温度高低不是决定因素，温差大小决定应力变化</p><p>柔性并联机器人的动态性能不仅与温度该改变量大小和材料的温度膨胀系数有关，而且与温度变化曲线也密切相关。</p><p><em>文章通过气象台的温度数据，导入CFD软件中，进行瞬态动力学分析，得到应力变化图，进而分析温度关系</em>，还是没能给出一个直接的解析式呀，复杂机构的耦合动力学模型建模还是一个难解。</p><h2 id="弹性动力学的动力钢化问题"><a href="#弹性动力学的动力钢化问题" class="headerlink" title="弹性动力学的动力钢化问题"></a>弹性动力学的动力钢化问题</h2><p>高速、高加速柔性并联机器人是否存在动力钢化现象。</p><p>单元—系统   </p><p>一阶近似耦合模型FOAC:包含名义运动相关的<em>动力刚度项</em></p><p>传统混合坐标建模方法 ZOAC：无法很好的反应系统的动力学性能，假设轴向与横向变形位移解耦。适用于并联机构</p><p>无论系统运动速度、加速度多大，系统刚度项对系统动力学特性影响微小。</p><p>执行机构动力学模型建立结束，基于模型的振动控制</p><h2 id="主动振动控制研究"><a href="#主动振动控制研究" class="headerlink" title="主动振动控制研究"></a>主动振动控制研究</h2><p>控制目的：抑制并联机器人柔性连杆的残余振动，保证动平台精确地到达给定的位姿。</p><p>PZT压电驱动器作用机理：给驱动器施加电压信号，PZT驱动器产生应变，在驱动器两端，这种应变将在梁单元对应的位置上引起剪切变形</p><p>通过驱动器对梁单元施加外力矩</p><p>控制器优化方向-能量优化，在更低的控制电压下可以取得更好的控制效果。一对PZT控制效果优于一片。</p><p>控制内容后续完善</p><p><strong>结论：</strong>单独控制柔性杆时，可以抑制自身的弹性振动，无法控制其他两柔性杆振动，当三根杆同时振动时，各柔性杆的弹性振动都能得到很好的抑制。</p><p>平台质量和运动轨迹对驱动能耗有直接影响。——-</p><p><em>轻量化设计以及轨迹规划内容，不过这篇文章感觉这部分写不了啥论文</em></p><p>建立并联机器人刚柔耦合非线性动力学方程</p><p><em>构件弹性变形与刚体运动之间互相耦合影响</em></p><p><strong>感觉压电陶瓷驱动器抑振是文章最重要的点。</strong></p><p>文章方向整理：</p>]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DOC_exercise</title>
      <link href="/2021/08/29/DOC-exercise/DOC-exercise/"/>
      <url>/2021/08/29/DOC-exercise/DOC-exercise/</url>
      
        <content type="html"><![CDATA[<h1 id="随笔加一些更新计划"><a href="#随笔加一些更新计划" class="headerlink" title="随笔加一些更新计划"></a>随笔加一些更新计划</h1><p>人生不长，总归还是想做一些有意义的事情——-这是一切的出发点</p><span id="more"></span><h2 id="更新计划"><a href="#更新计划" class="headerlink" title="更新计划"></a>更新计划</h2><p>之后会更新一些视频与博客，博客文案，视频过程，在记录的同时巩固自己，希望可以帮助到一些朋友，要更新一些硬货，2333</p><p>1.专业相关内容的研究，根据情况落实</p><p>2.ROS、模拟软件以及一些算法记录过程</p><p>3.游戏历史考据，比方说最近想得是重装的怪物史，总不可能是凭空出现的，回忆下过去，开拓下视野。</p><p>4.文学方面的内容，提高一下，没想好更新什么，以后慢慢来</p><h2 id="一些需要时刻记住的事情"><a href="#一些需要时刻记住的事情" class="headerlink" title="一些需要时刻记住的事情"></a>一些需要时刻记住的事情</h2><p>行甚于言，很重要的一点；</p><p>前段时间总是自我怀疑，希望不要忘记自己的初心，我还是有一些优点的，踏踏实实的做事就好；</p><p>操千曲而后晓声，观千剑而后识器，大量且规律的积累是以后必须做到的；</p><p><strong>要努力提高英语呀，坚持日积月累；</strong></p><p>拓展视野，坚实基础；保持信心，提高自己；</p><p>去做一些更好玩的事情，记住自己的初心，坚持下去（已经确确实实是个成年人了，以后要更成熟一点）</p><h2 id="未来很精彩，坚持自己，去看看更大的世界，变成一个更好的人"><a href="#未来很精彩，坚持自己，去看看更大的世界，变成一个更好的人" class="headerlink" title="未来很精彩，坚持自己，去看看更大的世界，变成一个更好的人"></a>未来很精彩，坚持自己，去看看更大的世界，变成一个更好的人</h2>]]></content>
      
      
      
        <tags>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>plan_emotion</title>
      <link href="/2021/08/26/plan-emotion/plan-emotion/"/>
      <url>/2021/08/26/plan-emotion/plan-emotion/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu修复windows无法启动问题"><a href="#Ubuntu修复windows无法启动问题" class="headerlink" title="Ubuntu修复windows无法启动问题"></a>Ubuntu修复windows无法启动问题</h1><span id="more"></span><p>配置：ubuntu16.04+windows8.1</p><p>背景：电脑不小心被砸了一下，然后windows系统无法启动，也无法进入bios和安全模式，尝试启动Ubuntu系统，发现可以进入，Linux永远的神！！</p><p>linux端进入后，发现电脑系统盘无法读取，出现挂载错误，可能windows就是因为这个问题无法启动，尝试修复，记录一下最后有效的过程：</p><h5 id="1-查看系统下所有分区的挂载情况是否正常"><a href="#1-查看系统下所有分区的挂载情况是否正常" class="headerlink" title="1.查看系统下所有分区的挂载情况是否正常"></a>1.查看系统下所有分区的挂载情况是否正常</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l </span><br></pre></td></tr></tbody></table></figure><p>根据×号判断</p><h5 id="2-修复对应分区，我显示的是-dev-sdb3"><a href="#2-修复对应分区，我显示的是-dev-sdb3" class="headerlink" title="2.修复对应分区，我显示的是/dev/sdb3"></a>2.修复对应分区，我显示的是/dev/sdb3</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ntfsfix /dev/sdb3</span><br></pre></td></tr></tbody></table></figure><p>全部修复后，windows可以正常启动</p><p>以后正常更新啦…</p><p>等会儿再写一个生活计划日志…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fluid_model</title>
      <link href="/2021/02/03/fluid-model/fluid-model/"/>
      <url>/2021/02/03/fluid-model/fluid-model/</url>
      
        <content type="html"><![CDATA[<h1 id="流体相关"><a href="#流体相关" class="headerlink" title="流体相关"></a>流体相关</h1><p>开个坑，后续补充</p><span id="more"></span><p>运动阻力与速度平方成正比</p><p>阻力与流体密度成正比，水中和空气中阻力系数同一量级，但是水的密度是空气的800倍</p>]]></content>
      
      
      <categories>
          
          <category> learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ff14宏</title>
      <link href="/2021/02/03/ff14%E5%AE%8F/ff14%E5%AE%8F/"/>
      <url>/2021/02/03/ff14%E5%AE%8F/ff14%E5%AE%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="ff14宏学相关"><a href="#ff14宏学相关" class="headerlink" title="ff14宏学相关"></a>ff14宏学相关</h1><p>记录一下常用宏，方便玩游戏</p><p>资料来源：ff14wiki、素素</p><span id="more"></span><div class="table-container"><table><thead><tr><th>代名词</th><th>解释</th></tr></thead><tbody><tr><td><t></t></td><td>当前选中目标的名字</td></tr><tr><td><tt></tt></td><td>当前选中目标的选中目标的名字</td></tr><tr><td><me></me></td><td>自己的名字</td></tr><tr><td>&lt;1~8&gt;<!--1~8--></td><td>队伍列表中对应编号的人的名字</td></tr><tr><td><f></f></td><td>焦点目标的名字</td></tr><tr><td><lt></lt></td><td>上个选中的目标的名字</td></tr><tr><td><le></le></td><td>上个选中的敌人的名字(当你的当前目标是敌人时，会显示你的当前目标)</td></tr><tr><td><la></la></td><td>上个对自己造成伤害的敌人的名字</td></tr><tr><td><c></c></td><td>自己的陆行鸟的名字</td></tr><tr><td><p></p></td><td>自己的召唤物的名字</td></tr><tr><td><pos></pos></td><td>自己的当前坐标，可以被点击插旗</td></tr><tr><td><flag></flag></td><td>当前插旗地点的坐标，可以被别人点击插旗</td></tr><tr><td><mo></mo></td><td>当前鼠标指向的目标的名字，指向小队列表/仇恨列表/目标模型都算。手柄注意：手柄的预选中状态不算</td></tr><tr><td><item></item></td><td>最近选择过“展示道具属性”的道具链接。装备上的魔晶石、签名、精炼度、耐久等全部不能正确显示，只能显示基本属性</td></tr><tr><td><recast.技能名></recast.技能名></td><td>指定技能的剩余冷却时间，格式为—:—(分:秒)，因此不能用来作为wait的时间参数。已冷却完毕的技能会显示为—:—。只有当前职业的技能可以被正确显示，并且不能用定型文。</td></tr><tr><td><attack1~5></attack1~5></td><td>被标记了“攻击1~5”记号的单位的名字，同理还有<bindx>，<stopx>，<cross>等。</cross></stopx></bindx></td></tr><tr><td><r></r></td><td>上一个悄悄话你的人的名字</td></tr><tr><td><hp></hp></td><td>自己的当前hp值/最大hp值，同理还有<mp>(魔力)、<bhp>(你的陆行鸟hp)</bhp></mp></td></tr><tr><td><hpp></hpp></td><td>自己的当前hp百分比，同理还有<mpp>、<bhpp>、<thpp>(当前选中目标)、<fhpp>(焦点目标)</fhpp></thpp></bhpp></mpp></td></tr><tr><td><job></job></td><td>自己的当前职业(等级)，同理还有<targetjob>(当前选中目标)、<focusjob>(焦点目标)</focusjob></targetjob></td></tr><tr><td><e1-4></e1-4></td><td>群狼盛宴专用，直接指代对方1-4号</td></tr></tbody></table></div><ul><li><p><wait.x>：等同于/wait X，在发言中使用不会在发言中显示，但同一排后面的内容会消失，具体说明见下文。</wait.x></p></li><li><p><se.1~16>：发出提示音，只在小队/团队/默语频道有效果。可以认为是指代了一个本来不能用语言描述的“声音”，会显示在发言中。</se.1~16></p></li></ul><p>例子</p><p>释放指定地面目标的能力技，这样可以省去点击地面的时间，但是有些情况下不能灵活的调整放置的地点。</p><p>/ac 野战治疗阵 <t></t></p><p>释放非战斗职业的技能，比如一键生产宏，一键精选宏。(生产职业所有制作、加工、观察、专家技能后wait3，松弛、其他buff技能后wait2，采集职业精选buff技能后wait1，甄别技能后wait3，若网络条件不佳，可适当延长)优先级的思想同样适用(主要针对秘诀、集中加工、审美眼等)。</p><p>/ac 审美眼 <wait.1><br>/ac 直觉甄别 <wait.3><br>/ac 审美眼<br>/ac 聚精会神 <wait.1><br>/ac 直觉甄别 <wait.3><br>/ac 审美眼<br>/ac 聚精会神 <wait.1><br>/ac 慎重甄别</wait.1></wait.3></wait.1></wait.3></wait.1></p><p>在发动技能后等待一段时间喊话提示，如无敌。</p><p>/ac 神圣领域<br>/p 我已经天下无敌了！！！<se.1><br>/wait 10<br>/p 停一停奶妈快爱我！！！<se.2></se.2></se.1></p><p>[进阶向]在生产宏中打时间差，实现5仓促中任换至多一个为集中加工一类的高级功能</p><p>/ac 集中加工 <wait.1><br>/ac 仓促 <wait.2><br>/ac 仓促 <wait.1><br>/ac 集中加工 <wait.1><br>/ac 仓促 <wait.2><br>/ac 仓促 <wait.1><br>/ac 集中加工 <wait.1><br>/ac 仓促 <wait.2><br>/ac 仓促 <wait.1><br>/ac 集中加工 <wait.1><br>/ac 仓促 <wait.2><br>/ac 仓促 <wait.1><br>/ac 集中加工<br>/ac 加工 <wait.3></wait.3></wait.1></wait.2></wait.1></wait.1></wait.2></wait.1></wait.1></wait.2></wait.1></wait.1></wait.2></wait.1></p><p>文本指令</p><p>对应频道及说明</p><p>/s</p><p>说话频道，可见范围比较小，对连续发言有限制——大约在0.76s-1s内只能在<strong>该频道</strong>说一句话，多的会被吞掉——其他玩家看不到，但是系统仍然认为你说了这句话，任务要求说话的能被成功判定。例如：</p><p>/s 1111111111 /s 有库啵果哦 /s 线轴 /s 展翅高飞 /s 乌姆·阿拉 /s 乘风而起</p><p>后面五行都不会被其他玩家看见。<br>/s的上屏延迟大约是0.16s，一句话可以压掉下面五句话。</p><p>/em</p><p>情感动作频道，和说话频道基本相同，ID和内容之间没有冒号。限制连续发言——尽管你在连续发言时不会收到系统提示。</p><p>/y</p><p>呼喊频道，可见范围比说话频道大一些，对连续发言有限制</p><p>/sh</p><p>喊话频道，该地图内全屏可见，对连续发言有限制，se提示音没有效果 请不要再试图在报点宏上加声音了</p><p>/tell</p><p>悄悄话频道，格式/tell 人物名@服务器名(同服省略) 内容，对连续发言有限制，省略内容将改变悄悄话默认目标</p><p>/reply</p><p>悄悄话频道，送信目标为上一个给你发悄悄话人，不会因为下线而消除</p><p>/p</p><p>小队频道，不限制连续发言，se提示音有效</p><p>/a</p><p>团队频道，不限制连续发言，se提示音有效</p><p>/fc</p><p>部队频道，不限制连续发言</p><p>/pvpteam</p><p>战队频道， 我还没有</p><p>/cwlx</p><p>跨服通讯贝频道，x为通讯贝编号，省略则为最近一个激活的通讯贝——最近一个激活可以是用指令发言(未切换频道)或者主动切换默认频道(不管有没有发言)，省略内容将改变默认频道，不限制连续发言</p><p>/lx</p><p>通讯贝频道，x为通讯贝编号，省略则为最近一个激活的通讯贝——最近一个激活可以是用指令发言(未切换频道)或者主动切换默认频道(不管有没有发言)，省略内容将改变默认频道，不限制连续发言</p><p>/b</p><p>新人频道， 不好意思在里面测试</p><p>/e</p><p>默语频道，仅自己可见，发送速度比其他频道都快得多，se提示音有效</p><p>/cth</p><p>清除悄悄话记录，清除的实际上是曾悄悄话过的对象而不是悄悄话内容</p><p>/cl</p><p>清空聊天窗口的所有信息</p><h2 id="宏专用文本指令"><a href="#宏专用文本指令" class="headerlink" title="宏专用文本指令"></a>宏专用文本指令</h2><p>标准格式/micon 图标名 分类名</p>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>impedance_control</title>
      <link href="/2021/02/03/impedance-control/impedance-control/"/>
      <url>/2021/02/03/impedance-control/impedance-control/</url>
      
        <content type="html"><![CDATA[<h1 id="阻抗相关"><a href="#阻抗相关" class="headerlink" title="阻抗相关"></a>阻抗相关</h1><p>记录部分内容</p><span id="more"></span><h2 id="人机协作"><a href="#人机协作" class="headerlink" title="人机协作"></a>人机协作</h2><p>协作定义：协作参与方具备共同目标、具备感知交流能力、协同能力</p><p>标准：安全、协作、智能</p><h2 id="交互控制-力控制"><a href="#交互控制-力控制" class="headerlink" title="交互控制-力控制"></a>交互控制-力控制</h2><h3 id="直接力控"><a href="#直接力控" class="headerlink" title="直接力控"></a>直接力控</h3><p>直接设定数值，通过反馈进行精确设定控制</p><p>1.成本高、精度差、存在噪声、干扰难以判断</p><p>2.无法确定具体所需控制数值</p><h3 id="间接控制"><a href="#间接控制" class="headerlink" title="间接控制"></a>间接控制</h3><h4 id="柔顺控制"><a href="#柔顺控制" class="headerlink" title="柔顺控制"></a>柔顺控制</h4><p>被动柔顺：通过含有弹性元件的机械设备在接触过程中体现柔顺</p><p>主动柔顺：通过控制的方式实现，越位设置，在接触过程中产生作用</p><h4 id="阻抗-导纳控制："><a href="#阻抗-导纳控制：" class="headerlink" title="阻抗/导纳控制："></a>阻抗/导纳控制：</h4><p>关节空间</p><p>笛卡尔空间：常用</p><h4 id="力-位混合控制"><a href="#力-位混合控制" class="headerlink" title="力/位混合控制"></a>力/位混合控制</h4><h2 id="关节空间阻抗控制"><a href="#关节空间阻抗控制" class="headerlink" title="关节空间阻抗控制"></a>关节空间阻抗控制</h2><p>阻尼：抵消机械震荡</p><p>弹性元件：柔顺性调整</p><p>控制理论</p><p>阻抗控制主要是控制运动与力之间的动态关系控制</p><p>实现理想阻抗控制需要满足：</p><p>1.机器人动态模型及相关参数</p><p>2.机器人关节角、关节角速度的实时反馈（传感器）</p><p>3.机器人关节力矩实时反馈（转矩传感器获得/测量驱动电机电流，通过电流关系进行计算分析）</p><p>4.机器人转矩控制</p><p>设定k值</p><p>k大—抵抗性较强</p><p>k小—柔顺性较高</p><p>k=0，随外力改变位置</p><h2 id="笛卡尔关节控制"><a href="#笛卡尔关节控制" class="headerlink" title="笛卡尔关节控制"></a>笛卡尔关节控制</h2><p>1.求解雅克比（伪）逆矩阵，以及雅克比矩阵导数矩阵</p><p>2.精确测量机器人执行器末端所受外力</p><p>3.精确的机器人运动学以及动力学模型</p><p>4.机器人关节位置及转速的测量</p><p>5.机器人关节转矩控制</p><p>姿态不要过度接近奇异点</p><p>控制机器人运动与外力之间的动态关系，使其等效为弹簧-阻尼-质量组成的二阶系统</p><p>需要条件</p><p>1.机器人动力学及运动学模型</p><p>2.关节角及角速度反馈</p><p>3.关节转矩控制</p><p>4.外力（矩）的测量（非必要）</p><p>导纳控制与阻抗控制区别</p><p>1.计算出力，控制器输入位置输出力</p><p>2.控制器输入力输出位置，机器人输入位移输出力</p><p><em>当外界环境阻抗系数高，采用阻抗控制</em></p><p><em>当外界环境阻抗系数低，采用导纳控制？？</em></p><p>导纳控制有点像变刚度控制，区分并进行理解。</p><h1 id="自适应阻抗控制"><a href="#自适应阻抗控制" class="headerlink" title="自适应阻抗控制"></a>自适应阻抗控制</h1><p>自主调整阻抗，满足环境要求</p><p>1.自主目标 阻抗系数或者运动设定</p><p>2.如何实现参数修改</p><p>基准：保证机器人稳定性</p><p>一些例子</p><p>1.根据外力反馈调整阻尼系数，预测运动意图</p><p>2.稳定性分析</p><p>3.估算人的阻抗系数</p><p>力增大-意图为该方向加速-机器人减小阻抗系数以顺应需求-减小接触力，反之亦然</p><p>思路可以换一下，外力作为负反馈进行相应调节</p><p>阻抗模型</p><p>水的阻抗模型？？？</p><p>参数辨识法</p><p>通过速度反馈调节参数进行示教学习</p><p>提高舒适跟随</p><p>根据实验进行确定稳定区域模型而非理论推导—不严谨但是更贴近实际</p><p>1.基于可操作性</p><p>2.基于阻抗控制误差</p><p>三.</p><p>1.多传感器融合，建立手臂运动中 姿态以及肌肉信号实时反馈</p><p>2.基于机电信息，建立手臂阻抗模型，并调整机器的阻抗系数</p><p>3.力/阻抗混合控制</p><p>肌肉电信号EMG使用方法</p><p>optitrack 视觉信息使用</p><p>该方案中捕捉手臂姿态的变化，根据姿态变化调整机器人阻抗系数在空间上的分布</p><p>力传感器</p><p>机械臂末端</p><p>四</p><p>1.基于视觉信息，利用高斯过程回归，在线预测人运动轨迹，评估预测不确定性</p><p>2.基于预测结果，调整机器人运动</p><p>3.利用阻抗控制跟随设定轨迹，同时改变参数大小，保证safe</p><h1 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h1><p>阻抗控制引入强化学习</p><p>学习力场？？？？学习一下</p><p>强化学习是机器学习的一个领域，强调如何基于换将反馈而行动，已取得最大化的预期利益。</p><p>寻找最优策略，使得价值函数最大</p><p>1.基于模型的强化学习</p><p>需要建立模型</p><p>2.基于价值函数的强化学习</p><p>根据价值调整策略</p><p>3.基于策略函数的强化学习</p><p>不依赖于模型</p><p>缺点 ：收敛慢、可能会到达危险状态、</p><p>原因：</p><p>1.建模较为困难</p><p>2.机器人可以不断优化自身行为，理论上可以得到最优解</p><p>核心;</p><p>求解问题：</p><p>1.基于价值函数</p><p>2.基于神经网络的Actor-critic算法</p><p>3.策略迭代</p><p>策略 —-如何保障安全性</p><p>基于价值函数的强化学习</p><p>1.定义人机协作最优控制问题，基于Q-leaning设计自适应阻抗</p><p>2.利用人和机器人的阻抗模型及线性回归的方法估测人的示教轨迹</p><p>自适应阻抗学习时间最小，同时保证了一定时间</p><p>基于策略函数的强化学习</p><p>价值</p><p>理论完整，可以达到全局最优</p><p>实现简单，收敛较快</p><p>缺点：维数灾难，控制策略会受到函数近似误差影响</p><p>策略</p><p>不存在维数灾难</p><p>理论上只能局部最优，收敛较慢</p><p>案例分析</p><p>1.基于策略函数的强化学习算法</p><p>2.运用于机器人的自适应阻抗中，并在不同平台测试</p><p>机器人仅在任务需要时候保证高阻抗，其余保证低阻抗</p><p>目前问题：有些不可达到的点集成于学习过程中，进行处理</p><p>强化学习应用于控制理论阶段</p><p>1.机器人动力学参数辨识</p><p>2.关节摩擦力的建模和补偿</p><p>3.基于电流环或关节转矩测量外力估算</p><p>4.阻抗系数矩阵非对角元素设计</p><p>方向</p><p>1.基于多传感器多信息融合的自适应阻抗控制</p><p>2.与人工智能相关技术结合</p><p>3.基于强化学习的阻抗控制</p><ol><li>与基于模型的最优控制结合（发挥各自有点）</li><li>状态约束和稳定性分析</li><li>基于策略搜索的强化学习</li></ol>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录</title>
      <link href="/2021/01/06/%E8%AE%B0%E5%BD%95/%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/01/06/%E8%AE%B0%E5%BD%95/%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="会议记录"><a href="#会议记录" class="headerlink" title="会议记录"></a>会议记录</h1><p>学习，学习一下</p><span id="more"></span><p> human-like，行为传递</p><p>接触性作业—需要涉及force control</p><p>阻抗控制</p><p>刚度无法直接测量—机电信号与刚度信号</p><p>类人控制从两方面思考</p><p>1.控制器 </p><p>2.操作</p><p>敲钉子—固定位置，但是又不可以握紧，松一点反而方便操作</p><p>对刚度矩阵进行操作，控制</p><p>接触力与刚度</p><hr><p>刚度不变，改变接触力；接触力基本不变改变刚度</p><hr><p>控制模型（学习模型）</p><p>对干扰方向增加刚度，其余方向保持柔顺，</p><p>变刚度控制—保证精确控制</p><p>其余应用：</p><p>人机协同领域：根据人力改变刚度，比如锯木头案例</p><p>机器人与环境交互</p><p><strong>一项思考，针对水阻力进行变刚度控制，是否能实现精确位置控制，抵抗阻力呢，可以尝试··</strong></p><p>2011文章</p><p>分布于力场中的机构，运动，未知力场（流体力场？）保证机器人进行直线运动，进行轨迹规划，可以借鉴，论文</p><p>如何分析力场？神经网络学习力场</p><p>增量学习法控制器，是机械臂沿直线运动，学习之后进行目标运动</p><p>示教学习</p><p>c.yang ieee tll 2018</p><p>泛化—分割</p><p>大多考虑运动控制，考虑力控制，才能实现精确作业</p><p>通过机械脉冲，测量刚度</p><p>基于IMUs和ARM model测量</p><p>力、刚度stiffness、位置控制</p><h2 id="遥操作相关"><a href="#遥操作相关" class="headerlink" title="遥操作相关"></a>遥操作相关</h2><p>特殊环境通信？？</p><p>避障—机器人建模</p><p>了解一下  MYO armhand</p><p>双臂操作 控制小车</p><p>利用操作杆 控制小车</p><p>优点：手环只有视觉效果，这里是否可以应用于目前手机厂商的手环产品上呢？可以尝试一下</p><p>操作杆：可以有力反馈</p><p>虚拟环境力反馈，模仿了人类的视角作业</p><p>12.30 — 20.30</p><p>增量学习-鲁棒项</p><p>希望实现全局稳定—当运动范围过大时，加入鲁棒项进行回收。</p><p>学习外界环境</p><p>力场，不考虑机构本身，利用机构本身控制模型去学习外场，这样是否可以在动力模型不引入外阻力项，仅仅通过外刚度变化控制，实现对于未知力场学习后，进行精确轨迹路线的规划。</p><p>示教学习是一个良好的方向</p><p>云服务应用于示教学习，案例共享。</p><p>组装工序</p><p>LQR线性模型学习人体阻抗模型</p><p>保持本身—外部环境隔开-学习外部环境</p><p>机电信号测量刚度—-匹配刚度矩阵—</p><p>长时间泛化 误差累积和噪声累积</p><p>RBF神经网络学习</p><p>扩大范围，进行控制覆盖，建立地图。</p><p>神经网络用于提高性能，优化</p><p>稳定利用传统控制方法进行稳定</p><p>一对多控制</p><p>emgsensor 8通道</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ros问题总结</title>
      <link href="/2021/01/05/ros%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/ros%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2021/01/05/ros%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/ros%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="常见问题总结"><a href="#常见问题总结" class="headerlink" title="常见问题总结"></a>常见问题总结</h1><span id="more"></span><h2 id="缺少cmake文件，安装方式"><a href="#缺少cmake文件，安装方式" class="headerlink" title="缺少cmake文件，安装方式"></a>缺少cmake文件，安装方式</h2><p>提示 xxConfig.cmake 找不到</p><p>查找上一行 …provided by “xx”</p><p>补充  sudo apt-get install ros-ROS版本-xx </p><p>roscore运行出错</p><p>Unable to contact my own server a</p><p>xiaomu@GL:~$ export ROS_HOSTNAME=localhost<br>xiaomu@GL:~$ export ROS_MASTER_URI=<a href="http://localhost:11311">http://localhost:11311</a></p><p>Unable to contact my own server at [<a href="http://192.168.0.106:35623/">http://192.168.0.106:35623/</a>].</p><p>This usually means that the network is not configured properly.</p><p>A common cause is that the machine cannot connect to itself.  Please check<br>for errors by running:</p><pre><code>ping 192.168.0.106</code></pre><p>For more tips, please see</p><pre><code>http://www.ros.org/wiki/ROS/NetworkSetup</code></pre><p>修正：</p><ol><li>$ export ROS_HOSTNAME=localhost</li><li>$ export ROS_MASTER_URI=<a href="http://localhost:11311">http://localhost:11311</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++_qt_note</title>
      <link href="/2020/12/14/c-qt-note/c-qt-note/"/>
      <url>/2020/12/14/c-qt-note/c-qt-note/</url>
      
        <content type="html"><![CDATA[<h1 id="c-与QT学习记录"><a href="#c-与QT学习记录" class="headerlink" title="c++与QT学习记录"></a>c++与QT学习记录</h1><p>给李工干项目涉及到相关知识，终究躲不过c艹，开个帖子记录学习，方便查询相关</p><p>FF</p><span id="more"></span><p>资料来源</p><p>C++：<a href="http://c.biancheng.net/cplus/">http://c.biancheng.net/cplus/</a></p><p>QT：<a href="http://c.biancheng.net/qt/">http://c.biancheng.net/qt/</a>    // QT官方教程</p><p>快捷键记录</p><p>1）帮助文件：<code>F1</code> （光标在函数名字或类名上，按 <code>F1</code> 即可跳转到对应帮助文档，查看其详细用法）</p><p>2）.h 文件和对应.cpp 文件切换：<code>F4</code></p><p>3）编译并运行：<code>Ctrl + R</code></p><p>4）函数声明和定义(函数调用和定义)切换：<code>F2</code></p><p>5）代码注释取消注释：<code>Ctrl + /</code> （选中代码再按快捷键）</p><p>6）字体变大变小：<code>Ctrl + 鼠标滚轮向上向下</code></p><p>7）移动代码：<code>选中所要移动的代码 -&gt; 按住 ctrl + shift -&gt; 键盘方向键</code></p><p>8）查找替换关键字：<code>Ctrl + F</code></p><p>9）快速打开代码所在目录：编辑模式下 -&gt; 选中项目文件 -&gt; 右击 -&gt; 选择“显示包含的目录”，即可显示项目所在目录（此方法同样可以打开代码文件所在目录）</p><p>关于语言相关资料来源<a href="https://wizardforcel.gitbooks.io/wudi-qt4/content/19.html">https://wizardforcel.gitbooks.io/wudi-qt4/content/19.html</a></p><p>linux常用指令</p><div class="table-container"><table><thead><tr><th style="text-align:left">man</th><th style="text-align:left">获得联机帮助，是类 Unix 用户的在线帮助手册</th></tr></thead><tbody><tr><td style="text-align:left">cd</td><td style="text-align:left">切换当前路径命令</td></tr><tr><td style="text-align:left">pwd</td><td style="text-align:left">显示当前路径</td></tr><tr><td style="text-align:left">ls</td><td style="text-align:left">显示目录下面的文件和子目录情况</td></tr><tr><td style="text-align:left">chmod</td><td style="text-align:left">变更文件和目录的属性</td></tr><tr><td style="text-align:left">mkdir</td><td style="text-align:left">建立目录</td></tr><tr><td style="text-align:left">rm</td><td style="text-align:left">删除目录或文件</td></tr><tr><td style="text-align:left">su</td><td style="text-align:left">切换用户登录到 shell，常见从一般用户到 root 用户或者相反顺序</td></tr><tr><td style="text-align:left">exec</td><td style="text-align:left">执行程序，并且不返回到当前 shell</td></tr><tr><td style="text-align:left">ldd</td><td style="text-align:left">查看应用程序使用的动态库</td></tr><tr><td style="text-align:left">nm</td><td style="text-align:left">查看程序或库的调试信息</td></tr><tr><td style="text-align:left">objdump</td><td style="text-align:left">查看程序或库的信息</td></tr><tr><td style="text-align:left">env</td><td style="text-align:left">查看环境变量</td></tr><tr><td style="text-align:left">grep</td><td style="text-align:left">从文件中查找字符串</td></tr><tr><td style="text-align:left">find</td><td style="text-align:left">查找文件</td></tr><tr><td style="text-align:left">which</td><td style="text-align:left">查找命令的可执行文件</td></tr><tr><td style="text-align:left">uname</td><td style="text-align:left">查看操作系统版本</td></tr><tr><td style="text-align:left">ps</td><td style="text-align:left">查看进程信息</td></tr><tr><td style="text-align:left">top</td><td style="text-align:left">查看系统资源信息</td></tr><tr><td style="text-align:left">vmstat</td><td style="text-align:left">查看系统虚拟机各资源信息</td></tr><tr><td style="text-align:left">vi/vim</td><td style="text-align:left">使用 vi/vim 编辑器</td></tr><tr><td style="text-align:left">make</td><td style="text-align:left">处理工程文件，生成可执行文件或库或其他资源文件</td></tr><tr><td style="text-align:left">gdb/dbx</td><td style="text-align:left">调试工具命令</td></tr><tr><td style="text-align:left">strace/ltrace</td><td style="text-align:left">跟踪程序调用的系统函数情况</td></tr><tr><td style="text-align:left">file</td><td style="text-align:left">查看文件的格式</td></tr><tr><td style="text-align:left">fuser</td><td style="text-align:left">查看进程使用了哪些文件</td></tr></tbody></table></div><p>关于各个文件配合关系—距离说明</p><div class="table-container"><table><thead><tr><th>.h</th><th>定义窗体类的头文件，定义了类Widget</th></tr></thead><tbody><tr><td>.cpp</td><td>Widget 类的功能实现源程序文件</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>.ui</th><th>窗体界面文件，由UI设计器自动生成，存储了窗体上各个组件的属性设置和布局</th></tr></thead><tbody><tr><td>ui_widget.h</td><td>编译后，根据窗体上的组件及其属性、信号与槽的关联等自动生成的一个类的定义文件，类的名称是Ui_Widget</td></tr></tbody></table></div><h2 id="UI布局"><a href="#UI布局" class="headerlink" title="UI布局"></a>UI布局</h2><div class="table-container"><table><thead><tr><th>布局组件</th><th>功能</th></tr></thead><tbody><tr><td>Vertical Layout</td><td>垂直方向布局，组件自动在垂直方向上分布</td></tr><tr><td>Horizontal Layout</td><td>水平方向布局，组件自动在水平方向上分布</td></tr><tr><td>Grid Layout</td><td>网格状布局，网状布局大小改变时，每个网格的大小都改变</td></tr><tr><td>Form Layout</td><td>窗体布局，与网格状布局类似，但是只有最右侧的一列网格会改变大小</td></tr><tr><td>Horizontal Spacer</td><td>一个用于水平分隔的空格</td></tr><tr><td>Vertical Spacer</td><td>一个用于垂直分隔的空格</td></tr></tbody></table></div><h2 id="快捷键查询"><a href="#快捷键查询" class="headerlink" title="快捷键查询"></a>快捷键查询</h2><div class="table-container"><table><thead><tr><th>按钮及快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Edit Widget (F3)</td><td>界面设计进入编辑状态，就是正常的设计状态</td></tr><tr><td>Edit Signals/Slots(F4)</td><td>进入信号与槽的可视化设计状态</td></tr><tr><td>Edit Buddies</td><td>进入伙伴关系编辑状态，可以设置一个Label 与一个组件成为伙伴关系</td></tr><tr><td>Edit Tab Order</td><td>进入Tab 顺序编辑状态，Tab 顺序是在键盘上按Tab 键时，输入焦点在界面各组件之间跳动的顺序</td></tr><tr><td>Lay Out Horizontally (Ctrl+H)</td><td>将窗体上所选组件水平布局</td></tr><tr><td>Lay Out Vertically (Ctrl+L)</td><td>将窗体上所选组件垂直布局</td></tr><tr><td>Lay Out Horizontally in Splitter</td><td>将窗体上所选组件用一个分割条进行水平分割布局</td></tr><tr><td>Lay Out Vertically in Splitter</td><td>将窗体上所选组件用一个分割条进行垂直分割布局</td></tr><tr><td>Lay Out in a Form Layout</td><td>将窗体上所选组件按窗体布局</td></tr><tr><td>Lay Out in a Grid</td><td>将窗体上所选组件网格布局</td></tr><tr><td>Break Layout</td><td>解除窗体上所选组件的布局，也就是打散现有的布局</td></tr><tr><td>Adjust Size(Ctrl+J)</td><td>自动调整所选组件的大小</td></tr></tbody></table></div><h2 id="项目功能实现"><a href="#项目功能实现" class="headerlink" title="项目功能实现"></a>项目功能实现</h2><h2 id="ui-xxx-h-文件"><a href="#ui-xxx-h-文件" class="headerlink" title="ui_xxx.h 文件"></a>ui_xxx.h 文件</h2><p>查看  crtl在头文件查询 资料来源</p><p><a href="https://blog.csdn.net/modi000/article/details/107550427">https://blog.csdn.net/modi000/article/details/107550427</a></p><h2 id="关于使用designer-ui编写c"><a href="#关于使用designer-ui编写c" class="headerlink" title="关于使用designer  ui编写c++"></a>关于使用designer  ui编写c++</h2><p>第二种方法相对比较简单一点，就是将Ui::Dialog ui或Ui::Dialog <em>ui写成一个新定义类的一个数据成员，也就是qtcreator提供的那种方法。（也叫<em>*单继承方法</em></em>，只继承了QDialog类）</p><p>以下来源：<a href="https://www.cnblogs.com/rainbow70626/p/6919240.html">https://www.cnblogs.com/rainbow70626/p/6919240.html</a></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">include</span> <span class="string">"ui_dialog.h"</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dialog</span> : <span class="keyword">public</span> QDialog {</span><br><span class="line">                Q_OBJECT</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">                <span class="built_in">Dialog</span>(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">                ~<span class="built_in">Dialog</span>();</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">                <span class="function"><span class="type">void</span> <span class="title">changeEvent</span><span class="params">(QEvent *e)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">                Ui::Dialog *ui;</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">                <span class="function"><span class="type">void</span> <span class="title">on_pushButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">        };</span><br></pre></td></tr></tbody></table></figure><p>/home/xiaomu/QT/build-Application-Desktop-Debug/ui_qwdialog.h</p><p>UI—go to slot</p><ol><li><pre><code>*//定义bool型输出变量*</code></pre></li><li>​    bool enable = false;</li><li>​    <em>//调用文字属性设置变量,传输输入变量enable用于保存是否点击了ok按钮，第二个参数为文字属性对话框默认值</em></li><li>​    QFont font = QFontDialog::getFont(&amp;enable,QFont(“宋体”,20,QFont::Bold),this,”自定义文字属性”);</li><li>​    <em>//当点击属性对话框的ok按钮后，变量enable的值为true</em></li><li>​    if(enable)</li><li>​    {</li><li>​        ui-&gt;label-&gt;setFont(font);</li><li></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    qApp-&gt;setFont(QFont("宋体",20,QFont::Bold));</span></span><br><span class="line">    QFont font;</span><br><span class="line">    <span class="comment">//设置文字字体</span></span><br><span class="line">    font.<span class="built_in">setFamily</span>(<span class="string">"宋体"</span>);</span><br><span class="line">    <span class="comment">//设置文字大小为50像素</span></span><br><span class="line">    font.<span class="built_in">setPixelSize</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//设置文字为粗体</span></span><br><span class="line">    font.<span class="built_in">setBold</span>(<span class="literal">true</span>);             <span class="comment">//封装的setWeight函数</span></span><br><span class="line">    <span class="comment">//设置文字为斜体</span></span><br><span class="line">    font.<span class="built_in">setItalic</span>(<span class="literal">true</span>);           <span class="comment">//封装的setStyle函数</span></span><br><span class="line">    <span class="comment">//设置文字大小</span></span><br><span class="line">    font.<span class="built_in">setPointSize</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">//设置文字倾斜</span></span><br><span class="line">    font.<span class="built_in">setStyle</span>(QFont::StyleItalic);</span><br><span class="line">    <span class="comment">//设置文字粗细//enum Weight 存在5个值</span></span><br><span class="line">    font.<span class="built_in">setWeight</span>(QFont::Light);</span><br><span class="line">    <span class="comment">//设置文字上划线</span></span><br><span class="line">    font.<span class="built_in">setOverline</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//设置文字下划线</span></span><br><span class="line">    font.<span class="built_in">setUnderline</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//设置文字中划线</span></span><br><span class="line">    font.<span class="built_in">setStrikeOut</span>(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//设置字间距%</span></span><br><span class="line">    font.<span class="built_in">setLetterSpacing</span>(QFont::PercentageSpacing,<span class="number">300</span>);          <span class="comment">//300%,100为默认</span></span><br><span class="line">    <span class="comment">//设置字间距像素值</span></span><br><span class="line">    font.<span class="built_in">setLetterSpacing</span>(QFont::AbsoluteSpacing,<span class="number">20</span>);             <span class="comment">//设置字间距为100像素</span></span><br><span class="line">    <span class="comment">//设置首个字母大写（跟参数有关，也可以设置全部大写AllUppercase）</span></span><br><span class="line">    font.<span class="built_in">setCapitalization</span>(QFont::Capitalize);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//通过QFontMetrics获取字体的值</span></span><br><span class="line">    <span class="function">QFontMetrics <span class="title">fm</span><span class="params">(font)</span></span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; fm.<span class="built_in">height</span>();            <span class="comment">//获取文字高度</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; fm.<span class="built_in">maxWidth</span>();          <span class="comment">//获取文字宽度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//通过QFontInfo获取也能获取字体信息</span></span><br><span class="line"> </span><br><span class="line">    <span class="function">QFontInfo <span class="title">fInfo</span><span class="params">(font)</span></span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; fInfo.<span class="built_in">family</span>() &lt;&lt;<span class="string">"  "</span>&lt;&lt;fInfo.<span class="built_in">style</span>() &lt;&lt; fInfo.<span class="built_in">pixelSize</span>() &lt;&lt; fInfo.<span class="built_in">overline</span>();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//设可以单独置QPlainTextEdit字体</span></span><br><span class="line">    <span class="comment">//ui-&gt;plainTextEdit-&gt;setFont(font);</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//将当前设置的字体设置为默认字体</span></span><br><span class="line">    qApp-&gt;<span class="built_in">setFont</span>(font);</span><br></pre></td></tr></tbody></table></figure><p>非自动生成的，需要在cpp文件中手动添加链接关系</p><p>.h文件中声明函数</p><p>.cpp文件中设置功能，若非自动生成，则需要在cpp文件setup处手动添加连接关系，具体查看测试文件qwdialog</p><h2 id="关联-QT信号与槽机制详解"><a href="#关联-QT信号与槽机制详解" class="headerlink" title="关联-QT信号与槽机制详解"></a>关联-QT信号与槽机制详解</h2><p>信号与槽（Signal &amp; Slot）是 <a href="http://c.biancheng.net/qt/">Qt</a> 编程的基础，也是 Qt 的一大创新。因为有了信号与槽的编程机制，在 Qt 中处理界面各个组件的交互操作时变得更加直观和简单。</p><p>信号（Signal）就是在特定情况下被发射的事件，例如PushButton 最常见的信号就是鼠标单击时发射的 clicked() 信号，一个 ComboBox 最常见的信号是选择的列表项变化时发射的 CurrentIndexChanged() 信号。</p><p>槽（Slot）就是对信号响应的函数。槽就是一个函数，与一般的<a href="http://c.biancheng.net/cplus/">C++</a>函数是一样的，可以定义在类的任何部分（public、private 或 protected），可以具有任何参数，也可以被直接调用。槽函数与一般的函数不同的是：槽函数可以与一个信号关联，当信号被发射时，关联的槽函数被自动执行。</p><p>信号与槽关联是用 QObject::connect() 函数实现的，其基本格式是：</p><p>QObject::connect(sender, SIGNAL(signal()), receiver, SLOT(slot()));</p><p>connect() 是 QObject 类的一个静态函数，而 QObject 是所有 Qt 类的基类，在实际调用时可以忽略前面的限定符，所以可以直接写为：</p><p>connect(sender, SIGNAL(signal()), receiver, SLOT(slot()));</p><p>其中，sender 是发射信号的对象的名称，signal() 是信号名称。信号可以看做是特殊的函数，需要带括号，有参数时还需要指明参数。receiver 是接收信号的对象名称，slot() 是槽函数的名称，需要带括号，有参数时还需要指明参数。</p><p>SIGNAL 和 SLOT 是 Qt 的宏，用于指明信号和槽，并将它们的参数转换为相应的字符串。例如，在 samp2_1（前面章节中的项目）的 ui_widget.h 文件中，在 setupUi() 函数中有如下的语句：</p><p>QObject::connect(btnClose, SIGNAL(clicked()), Widget, SLOT(close()));</p><p>其作用就是将 btnClose 按钮的 clicked() 信号与窗体（Widget）的槽函数 close() 相关联，这样，当单击 btnClose 按钮（就是界面上的“Close”按钮）时，就会执行 Widget 的 close() 槽函数。</p><p>关于信号与槽的使用，有以下一些规则需要注意：</p><ul><li><p>一个信号可以连接多个槽，例如：</p><p>connect(spinNum, SIGNAL(valueChanged(int)), this, SLOT(addFun(int));<br>connect(spinNum, SIGNAL(valueChanged(int)), this, SLOT(updateStatus(int));</p><p>这是当一个对象 spinNum 的数值发生变化时，所在窗体有两个槽进行响应，一个 addFun()用于计算，一个 updateStatus() 用于更新状态。</p><p>当一个信号与多个槽函数关联时，槽函数按照建立连接时的顺序依次执行。</p><p>当信号和槽函数带有参数时，在 connect()函数里，要写明参数的类型，但可以不写参数名称。</p></li><li><p>多个信号可以连接同一个槽，例如在 samp2_2（前面章节中的项目）中，让三个选择颜色的 RadioButton的clicked() 信号关联到相同的一个自定义槽函数 setTextFontColor()。</p><p>connect(ui-&gt;rBtnBlue,SIGNAL(clicked()),this,SLOT(setTextFontColor()));<br>connect(ui-&gt;rBtnRed,SIGNAL(clicked()),this,SLOT(setTextFontColor()));<br>connect(ui-&gt;rBtnBlack,SIGNAL(clicked()),this,SLOT(setTextFontColor()));</p><p>这样，当任何一个 RadioButton 被单击时，都会执行 setTextFontColor() 函数。</p></li><li><p>一个信号可以连接另外一个信号，例如：</p><p>connect(spinNum, SIGNAL(valueChanged(int)), this, SIGNAL (refreshInfo(int));</p><p>这样，当一个信号发射时，也会发射另外一个信号，实现某些特殊的功能。</p></li><li><p>严格的情况下，信号与槽的参数个数和类型需要一致，至少信号的参数不能少于槽的参数。如果不匹配，会出现编译错误或运行错误。</p></li><li><p>在使用信号与槽的类中，必须在类的定义中加入宏 Q_OBJECT。</p></li><li><p>当一个信号被发射时，与其关联的槽函数通常被立即执行，就像正常调用一个函数一样。只有当信号关联的所有槽函数执行完毕后，才会执行发射信号处后面的代码。</p></li></ul><p>信号与槽机制是 Qt GUI 编程的基础，使用信号与槽机制可以比较容易地将信号与响应代码关联起来。</p><h2 id="QtDesiger-更改按钮的背景、字体颜色、大小"><a href="#QtDesiger-更改按钮的背景、字体颜色、大小" class="headerlink" title="QtDesiger 更改按钮的背景、字体颜色、大小"></a>QtDesiger 更改按钮的背景、字体颜色、大小</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>更改QtDesgner 按钮上的背景、字体颜色、字体大小、字体格式</p><h3 id="2、更改背景"><a href="#2、更改背景" class="headerlink" title="2、更改背景"></a>2、更改背景</h3><p>代码中：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.pushButton.<span class="built_in">setStyleSheet</span>(<span class="string">"border-image:url(./image/test.png)"</span>)</span><br><span class="line">border-image:<span class="built_in">url</span>(./image/test.png)</span><br></pre></td></tr></tbody></table></figure><h3 id="3、更改字体颜色、大小、格式"><a href="#3、更改字体颜色、大小、格式" class="headerlink" title="3、更改字体颜色、大小、格式"></a>3、更改字体颜色、大小、格式</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.pushButton.setStyleSheet("color:rgb(0,0,255)")</span><br></pre></td></tr></tbody></table></figure><p>font 修改</p><h3 id="纯QT代码较复杂，暂时不考虑。"><a href="#纯QT代码较复杂，暂时不考虑。" class="headerlink" title="纯QT代码较复杂，暂时不考虑。"></a>纯QT代码较复杂，暂时不考虑。</h3><h2 id="qtcreator-使用快捷键"><a href="#qtcreator-使用快捷键" class="headerlink" title="qtcreator 使用快捷键"></a>qtcreator 使用快捷键</h2><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th><th>解释</th></tr></thead><tbody><tr><td>Switch Header/Source</td><td>F4</td><td>在同名的头文件和源程序文件之间切换</td></tr><tr><td>Follow Symbol Under Cursor</td><td>F2</td><td>跟踪光标下的符号，若是变量，可跟踪到变量声明的地方；若是函数体或函数声明，可在两者之间切换</td></tr><tr><td>Switch Between Function Declaration and Definition</td><td>Shift+F2</td><td>在函数的声明（函数原型）和定义（函数实现）之间切换</td></tr><tr><td>Refactor\Rename Symbol Under Cursor</td><td>Ctrl+Shift+R</td><td>对光标处的符号更改名称，这将替换到所有用到这个符号的地方</td></tr><tr><td>Refactor\Add Definition in .cpp</td><td></td><td>为函数原型在 cpp 文件里生成函数体</td></tr><tr><td>Auto-indent Selection</td><td>Ctrl+I</td><td>为选择的文字自动进行缩进</td></tr><tr><td>Toggle Comment Selection</td><td>Ctrl+/</td><td>为选择的文字进行注释符号的切换，即可以注释所选代码，或取消注释</td></tr><tr><td>Context Help</td><td>F1</td><td>为光标所在的符号显示帮助文件的内容</td></tr><tr><td>Save All</td><td>Ctrl+Shift+S</td><td>文件全部保存</td></tr><tr><td>Find/Replace</td><td>Ctrl+F</td><td>调出查找/替换对话框</td></tr><tr><td>Find Next</td><td>F3</td><td>查找下一个</td></tr><tr><td>Build</td><td>Ctrl+B</td><td>编译当前项目</td></tr><tr><td>Start Debugging</td><td>F5</td><td>开始调试</td></tr><tr><td>Step Over</td><td>F10</td><td>调试状态下单步略过，即执行当前行程序语句</td></tr><tr><td>Step Into</td><td>F11</td><td>调试状态下跟踪进入，即如果当前行里有函数，就跟踪进入函数体</td></tr><tr><td>Toggle Breakpoint</td><td>F9</td><td>设置或取消当前行的断点设置</td></tr></tbody></table></div><h2 id="项目相关-数据显示"><a href="#项目相关-数据显示" class="headerlink" title="项目相关-数据显示"></a>项目相关-数据显示</h2><p>QLabel 用于显示字符串，QLineEdit 用于显示和输入字符串。这两个类都有如下的两个函数用于读取和设置显示文字。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QString <span class="title">text</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setText</span><span class="params">(<span class="type">const</span> QString &amp;)</span></span></span><br></pre></td></tr></tbody></table></figure><p>column  row</p><p>action添加图像节点</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_actAddFiles_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//添加图片文件节点</span></span><br><span class="line">    QStringList files=QFileDialog::<span class="built_in">getOpenFileNames</span>(<span class="keyword">this</span>,<span class="string">"选择一个或多个文件"</span>,<span class="string">""</span>,<span class="string">"Images(*.jpg)"</span>);<span class="comment">//多选文件</span></span><br><span class="line">    <span class="keyword">if</span> (files.<span class="built_in">isEmpty</span>()) <span class="comment">//如果一个文件都没选</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    QTreeWidgetItem *parItem,*item; <span class="comment">//节点</span></span><br><span class="line">    item=ui-&gt;treeFiles-&gt;<span class="built_in">currentItem</span>(); <span class="comment">//当前节点</span></span><br><span class="line">    <span class="keyword">if</span> (item-&gt;<span class="built_in">type</span>()==itImageItem) <span class="comment">//若当前节点是图片节点，取其父节点作为父节点</span></span><br><span class="line">       parItem=item-&gt;<span class="built_in">parent</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//否则取当前节点为父节点</span></span><br><span class="line">       parItem=item;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; files.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    {</span><br><span class="line">        QString aFilename=files.<span class="built_in">at</span>(i); <span class="comment">//得到StringList里的一行，也就是一个文件名</span></span><br><span class="line">        <span class="built_in">addImageItem</span>(parItem,aFilename); <span class="comment">//添加一个图片节点</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::addImageItem</span><span class="params">(QTreeWidgetItem *parItem, QString aFilename)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//添加一个图片文件节点</span></span><br><span class="line">    <span class="function">QIcon   <span class="title">icon</span><span class="params">(<span class="string">":/images/icons/31.ico"</span>)</span></span>;<span class="comment">//ICON的图标</span></span><br><span class="line">    QString NodeText=<span class="built_in">getFinalFolderName</span>(aFilename); <span class="comment">//获得最后的文件名称</span></span><br><span class="line">    QTreeWidgetItem *item; <span class="comment">//节点</span></span><br><span class="line">    item=<span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(MainWindow::itImageItem); <span class="comment">//新建节点时设定类型为 itImageItem</span></span><br><span class="line">    item-&gt;<span class="built_in">setIcon</span>(colItem,icon); <span class="comment">//设置图标</span></span><br><span class="line">    item-&gt;<span class="built_in">setText</span>(colItem,NodeText); <span class="comment">//最后的文件夹名称</span></span><br><span class="line">    <span class="comment">//item-&gt;setText(colSecond,"type=itImageItem; data="+aFilename); //完整目录名称</span></span><br><span class="line">    item-&gt;<span class="built_in">setText</span>(colItemType,<span class="string">"type=itImageItem"</span>); <span class="comment">//完整目录名称</span></span><br><span class="line">    item-&gt;<span class="built_in">setFlags</span>(Qt::ItemIsSelectable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled | Qt::ItemIsAutoTristate); <span class="comment">//设置节点选项</span></span><br><span class="line">    item-&gt;<span class="built_in">setCheckState</span>(colItem,Qt::Checked); <span class="comment">//节点选中</span></span><br><span class="line">    item-&gt;<span class="built_in">setData</span>(colItem,Qt::UserRole,<span class="built_in">QVariant</span>(aFilename)); <span class="comment">//设置节点Qt::UserRole的Data,存储完整文件名称</span></span><br><span class="line">    parItem-&gt;<span class="built_in">addChild</span>(item); <span class="comment">//在父节点下面添加子节点</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>QFileSystemModel 提供了一个可用于访问本机文件系统的数据模型。</p><p>文本文档读入数据并显示</p><p>多UI并列设计</p><p>QT MDI 应用四界面方案 —- usel删去</p><p>读写文件方式  7_1 采集项目中的图片</p><ol><li>用 QFile 类的 IODevice 读写功能直接进行读写   io设备</li><li>利用 QFile 和 QTextStream 结合起来，用流（Stream)的方法进行文件读写。 读写相关</li></ol><p>关于中文乱码</p><p>最后读取编码，并且发送一定位数的编码数据</p><ul><li>QFile 负责文件的 IO 设备接口，即与文件的物理交互；</li><li>QDataStream 以数据流的方式读取文件内容或写入文件内容。</li></ul><p>dat文件读取与写入</p><h2 id="以下qt例程-（用qt4写了一遍5-sample）"><a href="#以下qt例程-（用qt4写了一遍5-sample）" class="headerlink" title="以下qt例程   （用qt4写了一遍5-sample）"></a>以下qt例程   （用qt4写了一遍5-sample）</h2><p>熟悉显示功能、读取功能、截取视频流方式</p><p>1.mainwindow 窗口样式界面简单，省略  label  Qlabel</p><p>2.application  dialog样式 —-学习常用按键以及命名习惯</p><p>包含 修改字体、颜色</p><p>使用功能键位：（class）QPushButton   QCheckBox 方框打勾  QRadioButton  圆圈打勾    QPlainTextEdit</p><p>命名习惯（暂时这样）：btn（OK、CLOSE、cancel） chkBox（Bold、Under、italic）、rBtn（Black、Blue、Red）   txtEdit</p><p>3.纯代码编写界面 sample2.3，同2——了解原理、以后再学习</p><p>建立一个 Widget Appliation 项目</p><p>关键是取消创建窗体，即不勾选“Generate form”（创建界面）复选框，无选项框选</p><p>iniUI</p><p>声明函数—代码建立功能键位—建立功能映射—connect相关</p><p>声明class 自动生成，不要修改，注意变量</p><p>4.字符串读取模板</p><h3 id="qt宏、顺序容器关联容器、迭代器、foreach关键字、库模块，嗨呀，没弄懂…-以后再说"><a href="#qt宏、顺序容器关联容器、迭代器、foreach关键字、库模块，嗨呀，没弄懂…-以后再说" class="headerlink" title="qt宏、顺序容器关联容器、迭代器、foreach关键字、库模块，嗨呀，没弄懂….以后再说"></a>qt宏、顺序容器关联容器、迭代器、foreach关键字、库模块，嗨呀，没弄懂….以后再说</h3><p>各类附加模块</p><p>qt界面修改尺寸——geometry</p><h2 id="frame-框架修改"><a href="#frame-框架修改" class="headerlink" title="frame 框架修改"></a>frame 框架修改</h2><p>#frame{border:1px solid rgb(0,255,0)} //frame代表你需要设置边框的frame对象名，1px是边框的线宽，solid为边框形式为实线，rgb为边框颜色</p><h1 id="css-border：solid实线，dashed虚线；dotted点状-double双线"><a href="#css-border：solid实线，dashed虚线；dotted点状-double双线" class="headerlink" title="css border：solid实线，dashed虚线；dotted点状,,double双线"></a>css border：solid实线，dashed虚线；dotted点状,,double双线</h1><p>border:0.5px solid rgb(25,25,25)</p><p>border:2px dashed rgb(255,15,15)</p><p>border:0px solid    </p><h3 id="关于Qstyle-Stylesheet"><a href="#关于Qstyle-Stylesheet" class="headerlink" title="关于Qstyle  Stylesheet"></a>关于Qstyle  Stylesheet</h3><p>如果你对某个widget设置QStyle，那么该样式<strong>只对</strong>该widget有效，其子widget不受影响；但如果设置样式表，那么所有的子widget会<strong>继承</strong>该样式表。</p><h3 id="利用sheet实现只修改外部不修改内部"><a href="#利用sheet实现只修改外部不修改内部" class="headerlink" title="利用sheet实现只修改外部不修改内部"></a>利用sheet实现只修改外部不修改内部</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">QGroupBox {</span><br><span class="line">    border-color: <span class="built_in">rgb</span>(<span class="number">156</span>, <span class="number">156</span>, <span class="number">156</span>);</span><br><span class="line">    border-width: <span class="number">1</span>px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    margin-top: <span class="number">0.5</span>ex;</span><br><span class="line">} <span class="comment">// 这里可以实现单部分修改</span></span><br><span class="line">QGroupBox::title {</span><br><span class="line">    subcontrol-origin: margin;</span><br><span class="line">    subcontrol-position: top left;</span><br><span class="line">    left: <span class="number">10</span>px;</span><br><span class="line">    margin-left: <span class="number">2</span>px;</span><br><span class="line">    padding: <span class="number">0</span>  <span class="number">0</span>px;</span><br><span class="line">}</span><br><span class="line">QpushButton {</span><br><span class="line">    border-color: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">15</span>, <span class="number">15</span>);</span><br><span class="line">    border-width: <span class="number">2</span>px;</span><br><span class="line">    border-style: dashed;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="图像化设置圆形"><a href="#图像化设置圆形" class="headerlink" title="图像化设置圆形"></a>图像化设置圆形</h2><h1 id="一、使用setStyleSheet方法"><a href="#一、使用setStyleSheet方法" class="headerlink" title="一、使用setStyleSheet方法"></a>一、使用setStyleSheet方法</h1><p>使用的主要是使用border-radius 属性，关于这个属性，可选的样式有<br>border-top-left-radius 设置左上角圆角;<br>border-top-right-radius 设置右上角圆角;<br>border-bottom-left-radius 设置左下角圆角;<br>border-bottom-right-radius 设置右下角圆角;<br>border-radius 设置四个角圆角;</p><p>关于border-radius 后面的参数<br>(1)一个参数 </p><p>(2)两个参数<br>border-radius: 15px 50px<br>第一个参数设置X轴方向的半径<br>第二个参数设置Y轴方向的半径 </p><p>从图中可以看出设置一个参数代表X轴和Y轴设置了同样的值，而两个参数分别为X轴和Y轴方向的半径。大家可以根据不同需要去设置参数。</p><p>border:2px groove gray;border-radius:50px;padding:2px 4px solid   </p><h2 id="pushbutton样式选择"><a href="#pushbutton样式选择" class="headerlink" title="pushbutton样式选择"></a>pushbutton样式选择</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">QPushButton{border-radius:<span class="number">10</span>px;</span><br><span class="line">border:<span class="number">2</span>px solid white;</span><br><span class="line">border:<span class="number">2</span>px solid white;</span><br><span class="line">color:white;</span><br><span class="line">background:transparent;</span><br><span class="line">}</span><br><span class="line">QPushButton:hover{</span><br><span class="line">border:<span class="number">2</span><span class="function">px solid <span class="title">rgb</span><span class="params">(<span class="number">71</span>,<span class="number">186</span>,<span class="number">204</span>)</span></span>;</span><br><span class="line">color:<span class="built_in">rgb</span>(<span class="number">71</span>,<span class="number">186</span>,<span class="number">204</span>);</span><br><span class="line">background:transparent;</span><br><span class="line">}</span><br><span class="line">QPushButton:pressed{</span><br><span class="line">border:<span class="number">2</span>px solid white;</span><br><span class="line">color:white;</span><br><span class="line">background-color:<span class="built_in">rgb</span>(<span class="number">71</span>,<span class="number">186</span>,<span class="number">204</span>);</span><br><span class="line">}</span><br><span class="line">QPushButton:!enabled</span><br><span class="line">{</span><br><span class="line">border:<span class="number">2</span><span class="function">px solid <span class="title">rgb</span><span class="params">(<span class="number">130</span>,<span class="number">130</span>,<span class="number">130</span>)</span></span>;</span><br><span class="line">color:<span class="built_in">rgb</span>(<span class="number">130</span>,<span class="number">130</span>,<span class="number">130</span>);</span><br><span class="line">}</span><br><span class="line">QPushButton:focus {</span><br><span class="line">border:<span class="number">2</span>px solid black;</span><br><span class="line">color:black;</span><br><span class="line">background-color:white;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>pushbutton与toolbutton </p><p>tool工具栏按钮</p><p>push 普通按钮</p><p>comm.h √ comm.cpp √  </p><p>设置参数值不用管，使能 重置 停止 运行</p><h2 id="难顶，浪费了一天时间"><a href="#难顶，浪费了一天时间" class="headerlink" title="难顶，浪费了一天时间"></a>难顶，浪费了一天时间</h2><p>控制模型不改了，就用楼下的电脑修改就好</p><p>其余控制通过5.8进行，我可太笨了</p><p>关于ads通信，发送图片</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>latex_note</title>
      <link href="/2020/12/09/latex-note/latex-note/"/>
      <url>/2020/12/09/latex-note/latex-note/</url>
      
        <content type="html"><![CDATA[<h1 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h1><p>常用符号，备份一下，便于查询</p><span id="more"></span><h2 id="1、希腊字母"><a href="#1、希腊字母" class="headerlink" title="1、希腊字母"></a>1、希腊字母</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">大写</th><th style="text-align:center">code</th><th style="text-align:center">小写</th><th style="text-align:center">code</th></tr></thead><tbody><tr><td style="text-align:center">alpha</td><td style="text-align:center">A</td><td style="text-align:center">A</td><td style="text-align:center">α</td><td style="text-align:center">\alpha</td></tr><tr><td style="text-align:center">beta</td><td style="text-align:center">B</td><td style="text-align:center">B</td><td style="text-align:center">β</td><td style="text-align:center">\beta</td></tr><tr><td style="text-align:center">gamma</td><td style="text-align:center">Γ</td><td style="text-align:center">\Gamma</td><td style="text-align:center">γ</td><td style="text-align:center">\gamma</td></tr><tr><td style="text-align:center">delta</td><td style="text-align:center">Δ</td><td style="text-align:center">\Delta</td><td style="text-align:center">δ</td><td style="text-align:center">\delta</td></tr><tr><td style="text-align:center">epsilon</td><td style="text-align:center">E</td><td style="text-align:center">E</td><td style="text-align:center">ϵ</td><td style="text-align:center">\epsilon</td></tr><tr><td style="text-align:center">zeta</td><td style="text-align:center">Z</td><td style="text-align:center">Z</td><td style="text-align:center">ζ</td><td style="text-align:center">\zeta</td></tr><tr><td style="text-align:center">eta</td><td style="text-align:center">H</td><td style="text-align:center">H</td><td style="text-align:center">η</td><td style="text-align:center">\eta</td></tr><tr><td style="text-align:center">theta</td><td style="text-align:center">Θ</td><td style="text-align:center">\Theta</td><td style="text-align:center">θ</td><td style="text-align:center">\theta</td></tr><tr><td style="text-align:center">iota</td><td style="text-align:center">I</td><td style="text-align:center">I</td><td style="text-align:center">ι</td><td style="text-align:center">\iota</td></tr><tr><td style="text-align:center">kappa</td><td style="text-align:center">K</td><td style="text-align:center">K</td><td style="text-align:center">κ</td><td style="text-align:center">\kappa</td></tr><tr><td style="text-align:center">lambda</td><td style="text-align:center">Λ</td><td style="text-align:center">\Lambda</td><td style="text-align:center">λ</td><td style="text-align:center">\lambda</td></tr><tr><td style="text-align:center">mu</td><td style="text-align:center">M</td><td style="text-align:center">M</td><td style="text-align:center">μ</td><td style="text-align:center">\mu</td></tr><tr><td style="text-align:center">nu</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">ν</td><td style="text-align:center">\nu</td></tr><tr><td style="text-align:center">xi</td><td style="text-align:center">Ξ</td><td style="text-align:center">\Xi</td><td style="text-align:center">ξ</td><td style="text-align:center">\xi</td></tr><tr><td style="text-align:center">omicron</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center">ο</td><td style="text-align:center">\omicron</td></tr><tr><td style="text-align:center">pi</td><td style="text-align:center">Π</td><td style="text-align:center">\Pi</td><td style="text-align:center">π</td><td style="text-align:center">\pi</td></tr><tr><td style="text-align:center">rho</td><td style="text-align:center">P</td><td style="text-align:center">P</td><td style="text-align:center">ρ</td><td style="text-align:center">\rho</td></tr><tr><td style="text-align:center">sigma</td><td style="text-align:center">Σ</td><td style="text-align:center">\Sigma</td><td style="text-align:center">σ</td><td style="text-align:center">\sigma</td></tr><tr><td style="text-align:center">tau</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">τ</td><td style="text-align:center">\tau</td></tr><tr><td style="text-align:center">upsilon</td><td style="text-align:center">Υ</td><td style="text-align:center">υ</td><td style="text-align:center">\upsilon</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">phi</td><td style="text-align:center">Φ</td><td style="text-align:center">\Phi</td><td style="text-align:center">ϕ</td><td style="text-align:center">\phi</td></tr><tr><td style="text-align:center">chi</td><td style="text-align:center">X</td><td style="text-align:center">X</td><td style="text-align:center">χ</td><td style="text-align:center">\chi</td></tr><tr><td style="text-align:center">psi</td><td style="text-align:center">Ψ</td><td style="text-align:center">\Psi</td><td style="text-align:center">ψ</td><td style="text-align:center">\psi</td></tr><tr><td style="text-align:center">omega</td><td style="text-align:center">Ω</td><td style="text-align:center">\Omega</td><td style="text-align:center">ω</td><td style="text-align:center">\omega</td></tr></tbody></table></div><h2 id="2、上标、下标、求和、括号"><a href="#2、上标、下标、求和、括号" class="headerlink" title="2、上标、下标、求和、括号"></a>2、上标、下标、求和、括号</h2><div class="table-container"><table><thead><tr><th>上标</th><th style="text-align:center"><code>x^2</code>、 <code>x^y</code> 、<code>e^3</code></th><th></th></tr></thead><tbody><tr><td>下标</td><td style="text-align:center"><code>x_0</code>、<code>a_1</code>、<code>T_1</code></td><td></td></tr><tr><td>求和</td><td style="text-align:center"><code>\sum</code></td><td>∑</td></tr><tr><td>求和上下标</td><td style="text-align:center">\sum_0^3 、\sum_0^{\infty} 、\sum_{-\infty}^{\infty}</td><td>0-3,0-∞，-∞-+∞</td></tr><tr><td>中括号</td><td style="text-align:center"><code>[s(s+1)-(s-1)(s-2)]</code></td><td>[ s ( s + 1 ) − ( s − 1 ) ( s − 2 ) ]</td></tr><tr><td>花括号</td><td style="text-align:center"><code>\lbrace x-y \rbrace</code></td><td>{ x − y }</td></tr></tbody></table></div><h2 id="3、三角函数、指数、对数"><a href="#3、三角函数、指数、对数" class="headerlink" title="3、三角函数、指数、对数"></a>3、三角函数、指数、对数</h2><div class="table-container"><table><thead><tr><th>sin</th><th><code>\sin(x)</code></th><th>sin ⁡ ( x )</th></tr></thead><tbody><tr><td>cos</td><td><code>\cos(x)</code></td><td>cos ⁡ ( x )</td></tr><tr><td>tan</td><td><code>\tan(x)</code></td><td>t a n ( x )</td></tr><tr><td>log</td><td><code>\log_2 10</code></td><td>log ⁡ 2 10</td></tr><tr><td>ln</td><td><code>\ln2</code></td><td>ln ⁡ 2</td></tr></tbody></table></div><h2 id="4、运算符"><a href="#4、运算符" class="headerlink" title="4、运算符"></a>4、运算符</h2><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>乘</td><td><code>\times</code></td><td>×</td></tr><tr><td>除</td><td><code>\div</code></td><td>÷</td></tr><tr><td>加减</td><td><code>\pm</code></td><td>±</td></tr><tr><td>减加</td><td><code>\mp</code></td><td>∓</td></tr><tr><td>求和</td><td><code>\sum</code></td><td>∑</td></tr><tr><td>求积</td><td><code>\prod</code></td><td>∏</td></tr><tr><td>微分</td><td><code>\partial</code></td><td>∂</td></tr><tr><td>积分</td><td><code>\int</code> 、<code>\displaystyle\int</code></td><td>∫ 、∫</td></tr><tr><td>不等于</td><td><code>\neq</code></td><td>≠</td></tr><tr><td>大于等于</td><td><code>\geq</code></td><td>≥</td></tr><tr><td>小于等于</td><td><code>\leq</code></td><td>≤</td></tr><tr><td>约等于</td><td><code>\approx</code></td><td>≈</td></tr><tr><td>不大于等于</td><td><code>x+y \ngeq z</code></td><td>x + y ≱ z</td></tr><tr><td>点乘</td><td><code>a \cdot b</code></td><td>a ⋅ b</td></tr><tr><td>星乘</td><td><code>a \ast b</code></td><td>a ∗ b</td></tr><tr><td>分式</td><td><code>\frac{b}{a}、\frac{x}{y}、\frac{1}{x+1}</code></td></tr></tbody></table></div><h2 id="5、数学符号"><a href="#5、数学符号" class="headerlink" title="5、数学符号"></a>5、数学符号</h2><div class="table-container"><table><thead><tr><th>无穷</th><th><code>\infty</code></th><th>∞</th></tr></thead><tbody><tr><td>矢量</td><td><code>\vec{a}</code></td><td>a ⃗</td></tr><tr><td>一阶导数</td><td><code>\dot{x}</code></td><td>x ˙</td></tr><tr><td>二阶导数</td><td><code>\ddot{x}</code></td><td>x ¨</td></tr><tr><td>算数平均值</td><td><code>\bar{a}</code></td><td>a ˉ</td></tr><tr><td>概率分布</td><td><code>\hat{a}</code></td><td>a ^</td></tr><tr><td>虚数i i<em>i</em>、j j<em>j</em></td><td><code>\imath、\jmath</code></td><td>ı 、ȷ</td></tr><tr><td>四种省略号</td><td><code>\ldots</code>；<code>\cdots</code>；<code>\vdots</code>；<code>\ddots</code></td><td>… ； ⋯ ；⋮ ； ⋱</td></tr></tbody></table></div><h2 id="6、高级运算符"><a href="#6、高级运算符" class="headerlink" title="6、高级运算符"></a>6、高级运算符</h2><div class="table-container"><table><thead><tr><th>平均数运算</th><th><code>\overline{xyz}</code></th><th>x y z ‾</th></tr></thead><tbody><tr><td>开二次方运算</td><td><code>\sqrt</code></td><td>x \</td></tr><tr><td>开方运算</td><td><code>\sqrt[开方数]{被开方数}</code></td><td>x + y 3</td></tr><tr><td>极限运算一</td><td><code>\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}</code></td><td>lim ⁡ y → 0 x → ∞ x y \</td></tr><tr><td>极限运算二</td><td><code>\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}</code></td><td>lim ⁡ y → 0 x → ∞ x y</td></tr><tr><td>求和运算一</td><td><code>\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}</code></td><td>∑ y → 0 x → ∞ x y</td></tr><tr><td>求和运算二</td><td>\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}</td><td>∑ y → 0 x → ∞ x y \</td></tr><tr><td>积分运算一</td><td><code>\int^{\infty}_{0}{xdx}</code></td><td>∫ 0 ∞ x d x</td></tr><tr><td>积分运算二</td><td><code>\displaystyle \int^{\infty}_{0}{xdx}</code></td><td>∫ 0 ∞ x d x</td></tr><tr><td>微分运算</td><td>\frac{\partial x}{\partial y}、\frac{\partial^2x}{\partial y^2}</td><td>∂<em>y</em>∂<em>x</em>、∂ 2 x ∂ y 2</td></tr></tbody></table></div><h2 id="7、集合运算"><a href="#7、集合运算" class="headerlink" title="7、集合运算"></a>7、集合运算</h2><div class="table-container"><table><thead><tr><th>属于</th><th><code>x\in</code>y</th><th>x ∈ y</th></tr></thead><tbody><tr><td>不属于</td><td><code>\notin</code></td><td>x ∉ y</td></tr><tr><td>子集</td><td><code>x \subset y</code>、<code>x \supset y</code></td><td>x ⊂ y ⊂<em>y</em>、x ⊃ y x</td></tr><tr><td>真子集</td><td><code>\subseteq</code>、<code>\supseteq</code></td><td>x ⊆ y x 、 x ⊇ y x</td></tr><tr><td>并集</td><td><code>\cup</code></td><td>x ∪ y x</td></tr><tr><td>交集</td><td><code>\cap</code></td><td>x ∩ y x</td></tr><tr><td>差集</td><td><code>\setminus</code></td><td>x ∖ y x</td></tr><tr><td>同或</td><td><code>\bigodot</code></td><td>x ⨀ y x</td></tr><tr><td>同与</td><td><code>\bigotimes</code></td><td>x ⨂ y x</td></tr><tr><td>异或</td><td><code>\bigoplus</code></td><td>a ⨁ b a</td></tr><tr><td>实数集合</td><td><code>\mathbb{R}</code></td><td>R \mathbb{R}R</td></tr><tr><td>自然数集合</td><td><code>\mathbb{Z}</code></td><td>Z</td></tr></tbody></table></div><h2 id="8、括号字体"><a href="#8、括号字体" class="headerlink" title="8、括号字体"></a>8、括号字体</h2><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>字体变大</td><td>\displaystyle</td><td>x + y y + z</td></tr><tr><td>下划线</td><td>\underline</td><td>x + y ‾      \underline{x+y}</td></tr><tr><td>上大括号</td><td>\overbrace{式子}</td><td>a + b + c + d ⏞ 2.0</td></tr><tr><td>下大括号</td><td>\underbrace{式子}</td><td>a + b + c ⎵ 1.0 + d a+\underbrace{b+c}_{1.0}+d</td></tr><tr><td>上位符号</td><td>\stacrel{上位符号}{基位符号}</td><td>x ⃗ = d e f x 1 , … , x n</td></tr></tbody></table></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫记录_bro</title>
      <link href="/2020/12/05/%E7%88%AC%E8%99%AB%E8%AE%B0%E5%BD%95-bro/%E7%88%AC%E8%99%AB%E8%AE%B0%E5%BD%95-bro/"/>
      <url>/2020/12/05/%E7%88%AC%E8%99%AB%E8%AE%B0%E5%BD%95-bro/%E7%88%AC%E8%99%AB%E8%AE%B0%E5%BD%95-bro/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫记录"><a href="#爬虫记录" class="headerlink" title="爬虫记录"></a>爬虫记录</h1><p>出于兴趣跟着一个本科的老学长学学这个方向，顺便做个记录，方便查看</p><p>（超级超级基础）</p><p>持续更新…</p><span id="more"></span><p>一些脚本</p><p>油猴插件:<a href="https://www.tampermonkey.net/">https://www.tampermonkey.net/</a><br>脚本:<a href="https://greasyfork.org/zh-CN">https://greasyfork.org/zh-CN</a></p><p>插件入门级别爬虫-webscraper</p><h2 id="单页抓取例子"><a href="#单页抓取例子" class="headerlink" title="单页抓取例子"></a>单页抓取例子</h2><h3 id="选择抓取的对象相关"><a href="#选择抓取的对象相关" class="headerlink" title="选择抓取的对象相关"></a>选择抓取的对象相关</h3><p>打开目标页面-webscraper-create new sitemap—设置相关参数</p><p>抓取开始-根据参数进行填写</p><p>select选取目标-dowload-运行（记得勾选multiple）</p><h3 id="启动设置的脚本过程"><a href="#启动设置的脚本过程" class="headerlink" title="启动设置的脚本过程"></a>启动设置的脚本过程</h3><p>启动-sitemapdouban-scrape-设置时间（根据网速）</p><h3 id="导出过程"><a href="#导出过程" class="headerlink" title="导出过程"></a>导出过程</h3><p>sitemap-export excel文件操作 cav</p><h3 id="过程总结"><a href="#过程总结" class="headerlink" title="过程总结"></a>过程总结</h3><p>1.打开webscraper</p><p>2.创建sitemap</p><p>3.设置selector（根据爬去类型进行分析计算）</p><p>4.启动程序并保存数据</p><p>例子测试，爬一下我自己的博客内容<a href="{/file/title.csv">文件</a>—测试成功</p><p>代码—编写脚本文件</p><p>下一部分是网页开发知识相关—css与html(明晚更新)</p><p>（小事情—【】+（）)</p><h4 id="css-html相关"><a href="#css-html相关" class="headerlink" title="css html相关"></a>css html相关</h4><p>html 超文本标记语言</p><p>css javascript</p><p>css-设置各种字体大小</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>first(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span></span></span><br><span class="line"><span class="language-css">{</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#d0e4fe</span>;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span></span></span><br><span class="line"><span class="language-css">{</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:orange;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span></span></span><br><span class="line"><span class="language-css">{</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-family</span>:<span class="string">"Times New Roman"</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h4</span></span></span><br><span class="line"><span class="language-css">{</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span></span></span><br><span class="line"><span class="language-css">{</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: red</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h4</span> <span class="selector-tag">b</span></span></span><br><span class="line"><span class="language-css">{</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: blue</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>简单测试一下!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是WM的个人博客。<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.xiaomuh.cn"</span>&gt;</span>小牧网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>笔记相关<span class="tag">&lt;<span class="name">b</span> <span class="attr">href</span>=<span class="string">"www.google.cn/"</span>&gt;</span>搜索学习<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>elements-</p><h2 id="选择多列信息"><a href="#选择多列信息" class="headerlink" title="选择多列信息"></a>选择多列信息</h2><p>常规方式-第二类爬取不勾选mutiply</p><p>sitemap_new</p><p>选择元素的原因是，提供一个较为精确的基准，方便多列爬取而不发生错误排列。</p><p>elements 元素选择器  —li class</p><p>选择按钮—之后在下方查看各个参数信息</p><p><strong>整体—格式改变—选择elements—multiply</strong></p><p>进入从分支选择-txt格式文件</p><p>对齐—第一个选择作为基准-其余不勾选multiply可以自动对齐</p><p>尝试爬取论文</p><p>graph查看节点分布</p><h2 id="翻页功能"><a href="#翻页功能" class="headerlink" title="翻页功能"></a>翻页功能</h2><p>根据翻页链接比较区别</p><p>url链接页数格式修改</p><p><strong>页数[1-n],可进行选择页数遍历</strong>(尝试抓取liu博的机器人文章内容)如下</p><p>对于？后面的条件参数可以忽略(测试一下)</p><p>文件-zhuhuyys.csv完成</p><p>TH—缺乏隔多页处理方法，简介只能表面列表，针对不规则链接如何进行分析应用</p><h2 id="等差翻页方式"><a href="#等差翻页方式" class="headerlink" title="等差翻页方式"></a>等差翻页方式</h2><p>比如豆瓣差值页数差值为25</p><p>[0-225:25] </p><p>关于常见网站翻页方式</p><p>翻页</p><h2 id="滚动形式网页怎么抓取"><a href="#滚动形式网页怎么抓取" class="headerlink" title="滚动形式网页怎么抓取"></a>滚动形式网页怎么抓取</h2><h3 id="1-制作-Sitemap"><a href="#1-制作-Sitemap" class="headerlink" title="1.制作 Sitemap"></a>1.制作 Sitemap</h3><p>刚开始我们要先创建一个 container，包含要抓取的三类数据，为了实现滚动到底加载数据的功能，我们把 <strong>container 的 Type 选为 <code>Element scroll down</code></strong>，就是滚动到网页底部加载数据的意思。</p><p><strong>元素名后加个 <code>nth-of-type(-n+100)</code></strong>，暂时只抓取前 100 条数据。注意加：</p><p><strong>以上是重点</strong> </p><p>然后我们保存 container 这个节点，并在这个节点下选择要抓取的三个数据类型。</p><p>首先是标题，我们取名为 title，选择的元素名为 <code>[itemprop='zhihu:question'] a</code>：</p><p>然后是答题人名字 name 与 赞同数 like，选择的元素名分别为 <code>#Popover10-toggle a</code> 和 <code>button.VoteButton--up</code>：</p><p>尝试爬取readhub滚动网页相关内容</p><p>p父话题   由单体选择不要总体选了再父话题，容易出错。无法选择到单个框位置，就先选标题再通过p选框，在选择整体。</p><p>完成</p><h3 id="翻页-滚动型混合界面"><a href="#翻页-滚动型混合界面" class="headerlink" title="翻页 滚动型混合界面"></a>翻页 滚动型混合界面</h3><p>滚动型页面收集方式基本类似，</p><p>sitemap-type</p><p>微博混合型抓取马前卒新闻页面尝试</p><p>翻页寻找规律</p><p>马微博是混合型</p><p><a href="https://weibo.com/u/6534413254">https://weibo.com/u/6534413254</a></p><p><a href="https://weibo.com/u/6534413254?is_search=0&amp;visible=0&amp;is_all=1&amp;is_tag=0&amp;profile_ftype=1&amp;page=2#feedtop">https://weibo.com/u/6534413254?is_search=0&amp;visible=0&amp;is_all=1&amp;is_tag=0&amp;profile_ftype=1&amp;page=2#feedtop</a></p><p><a href="https://weibo.com/u/6534413254?is_search=0&amp;visible=0&amp;is_all=1&amp;is_tag=0&amp;profile_ftype=1&amp;page=3#feedtop">https://weibo.com/u/6534413254?is_search=0&amp;visible=0&amp;is_all=1&amp;is_tag=0&amp;profile_ftype=1&amp;page=3#feedtop</a></p><p>可以发现规律</p><p>需要限定数量就选择 <strong><code>nth-of-type(-n+100)</code></strong></p><p>修改界面 edit metadata 修改爬取到页数</p><p>作业：没有规律网页如何翻页爬取</p><p>提示：element click 点击爬取</p><h2 id="点击爬取-无规则翻页"><a href="#点击爬取-无规则翻页" class="headerlink" title="点击爬取-无规则翻页"></a>点击爬取-无规则翻页</h2><p>element click</p><p>click selector</p><p>选择 css  selector</p><p> 选择多个项目，完成</p><p>思考：这个可以应用于所有翻页型网页，无论有没有规则。</p><p>作为书签 选择link类型</p><p>测试—知乎yys</p><p>emmm</p><p>文章太少嘞，换个师兄，知名劝退师兄2333</p><p>内容太多了</p><p>思考：如何爬取详细信息—-界面信息内容较少，无法获得有效信息</p><p>解决方式 下一节</p><h2 id="爬取子页面具体信息"><a href="#爬取子页面具体信息" class="headerlink" title="爬取子页面具体信息"></a>爬取子页面具体信息</h2><p>sitemap</p><p>子内容选择link，点击目标链接</p><p>切换目标页面，重新在同一项目中操作，选择内容进行操作</p><p>测试 YYS文章，尝试加入翻页功能</p><p>测试完成 保存于硬盘</p><h2 id="爬取图片文件"><a href="#爬取图片文件" class="headerlink" title="爬取图片文件"></a>爬取图片文件</h2><p>目标网页</p><p>类型选择图片image</p><p>点击链接可以显示图片</p><h2 id="一些法律小知识"><a href="#一些法律小知识" class="headerlink" title="一些法律小知识"></a>一些法律小知识</h2><p>数据不可商业化活动</p><p>UTS相关规定</p><p>robots.txt</p><p>软件爬虫告一段落，目前为止，较为简单，算是学学新东西，下一阶段顺便复习一下语法基础。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>configure_bag</title>
      <link href="/2020/11/30/configure-bag/configure-bag/"/>
      <url>/2020/11/30/configure-bag/configure-bag/</url>
      
        <content type="html"><![CDATA[<h1 id="摄像头调参二三"><a href="#摄像头调参二三" class="headerlink" title="摄像头调参二三"></a>摄像头调参二三</h1><p>包含补充QT上位机编写、ip配置的一点疑问（后续解决后会补充）、</p><p>以及补充后续图像处理相关项目内容</p><span id="more"></span><p>摄像头通过IP配置实现连接是一种比较常见的方式，但是实际过程中发现并不是随便设置IP，并将摄像头配置成对应静态ip就能实现通信。</p><p>比如今天下午选用网卡设置了多组IP，有的无法检测信息，有的检测到了但是无法识别图像传输界面，最后选择了一组跟本机其余无线网卡类似的一组ip，即前六位一致，目前为止，通信效果良好。推测是每个电脑IP设置具有一定规则，不能随便去设置，至少保证前六位一致。</p><p>（原因后续深入了解了之后继续补充）</p><p>1.基于TCP/IP通信协议，IP设置与传感器本身并无关系，设置一个符合本机电脑规则的IP地址，再据此自动设置或者将传感器设置为静态地址，手动调节，一般就可以实现通信。</p><p>2.关于Linux 中的反向过滤技术处理，将默认数值设置为0即可，具体程序如下</p><p>在确定相机连接正常的情况下,可通过以下命令查看反向过滤功能是否开启:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -a 2&gt;/dev/null | grep '\.rp_filter'</span><br></pre></td></tr></tbody></table></figure><p>根据网卡类别，将摄像机使用的网卡参数值设置为0.，相关操作如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl net.ipv4.conf.all.rp_filter=0</span><br><span class="line">sudo sysctl net.ipv4.conf.占用网卡名字.rp_filter=0</span><br></pre></td></tr></tbody></table></figure><p>目前为止，几张网卡就能同时处理几个传感器，为了降低硬件使用率，可以通过工业路由器将传感器信息集成之后，进行统一处理</p><p>（有个问题在于，无线通信是否可靠？ 5G、6G路由器的核心技术又是什么，帮忙干活的时候跟工程师仔细去了解一下）—-（关于一个应用拓展  基于DSP的二代通信技术，之后深入了解了会做一次记录，挖个坑～）</p><h2 id="QT上位机"><a href="#QT上位机" class="headerlink" title="QT上位机"></a>QT上位机</h2><p>这里两周内会补充有关火星车图像处理上位机编写的架构和底层代码分析记录</p><p>（C艹记录相关）准备跟py放那篇放一起啦</p><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><p>针对高帧率视频图像进行实时分析相关内容，以后会记录一下老师的项目，学习为主。</p>]]></content>
      
      
      <categories>
          
          <category> camera </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>lifespan</title>
      <link href="/2020/11/07/lifespan/lifespan/"/>
      <url>/2020/11/07/lifespan/lifespan/</url>
      
        <content type="html"><![CDATA[<h1 id="无常的人生-小记"><a href="#无常的人生-小记" class="headerlink" title="无常的人生-小记"></a>无常的人生-小记</h1><p>今天心情还挺复杂的，不自主的想着好多事情，不想让熟人知道，但是又想倾诉一下，所以在博客里稍微说一说，（未来不管陌生人还是熟人，或者是自己，看到这篇小记，是否会心有所感呢？）</p><span id="more"></span><h2 id="1-纪念一场似是而非的“感情”"><a href="#1-纪念一场似是而非的“感情”" class="headerlink" title="1.纪念一场似是而非的“感情”"></a>1.纪念一场似是而非的“感情”</h2><p>友谊和爱情终究是有差别的，这是我所笃定的，但是差别的界定，我好像又是模糊的，前些天我好像做了一些很对不起你的事情，但是我又不得不这么做。</p><p>为什么我下不了决心呢，我后来自己想了想，其实不是我所谓的不懂体贴、太过“直男”，而是我觉得我们太熟悉了，虽然几乎有两年没见过，熟悉带来的于我而言就是陌生，更重要的一点是，你我都不知道这段未来的感情里掺杂了多少另外多余的东西，比如周围的环境、别人的看法，各自的兴趣爱好甚至与一些观念理想，你我都不是好多年前的那个人了。</p><p>说实话，很久之前，我应该是喜欢的，不过那会不敢跟你说，也不知道你怎么想，再后来，经历了很多事情，我的想法也慢慢变了，但是终究你对我而言，和别人是不同的，这可能就是你说的差别对待感觉的来源，但是这个差别来自于很多年前，并且可能并不会更进一步，我害怕我以后会伤害你，所以我在不算开始的现在退出，我也不想去试这个模糊感是不是有未来，我总感觉有些事情应该是顺其自然的…</p><p>希望你未来能找到更合适的，我会衷心的祝福，真的</p><p>我们应该还是朋友吧…有些事不说还好，说了真是尴尬</p><p>确定不了你的想法为什么忽然那么坚定，我也无法确定我的想法，总体来讲，就是这个原因。</p><p>我会努力提高自己，当然希望你也能健健康康的快乐生活，我会帮助你，以一个好朋友的身份，不管你接不接受。没有前一段经历，或许我也不能下定决心做一件事。</p><p>感觉你最近蛮开心的，那我也就放心了，希望我没有对你造成什么伤害…</p><p>你可能不会看到这篇碎碎念的文章吧，毕竟我没和别人讲过这个博客，我居然能写出这么多废话…</p><p>想起来又是好复杂，感觉好烦，爱情真是烦人啊，不如多看两篇文献…</p><h2 id="2人生之路漫漫长"><a href="#2人生之路漫漫长" class="headerlink" title="2人生之路漫漫长"></a>2人生之路漫漫长</h2><p>未来几年的方向应该是确定了，模糊又坚定，我有自己的指标，我会努力去完成</p><p>踏实一点、坚定一点、乐观一点</p><h2 id="3现在"><a href="#3现在" class="headerlink" title="3现在"></a>3现在</h2><p>是不是很奇怪的顺序，确实，不过这本身就是一篇奇怪的文章，和我的现实性格一点也不搭。</p><p>现在我做的应该也是踏踏实实的，把每日目标和小目标努力完成了，最近遇到点小难题，一点一点得去记录并且克服掉</p><p>摸鱼虽然舒服，但是真的浪费时间，拒绝正式时间摸鱼，从我做起</p><p>严格规划时间了呀啊喂！</p><p>周末晚之前做一版，下周严格的把模型推导完，整理知识，克服难题</p><p>人生啊—-真是漫长</p><p>应该不会有人看到吧，真是尴尬…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>reading_note1</title>
      <link href="/2020/11/02/reading-note1/reading-note1/"/>
      <url>/2020/11/02/reading-note1/reading-note1/</url>
      
        <content type="html"><![CDATA[<h1 id="并联机构优化阅读笔记1"><a href="#并联机构优化阅读笔记1" class="headerlink" title="并联机构优化阅读笔记1"></a>并联机构优化阅读笔记1</h1><p>A new method for optimum design of parallel manipulator based on kinematics and dynamics</p><p>并联机械臂优化设计</p><p>（不太规范，慢慢进步）（推导及公式说明latex 写完后会补充）</p><span id="more"></span><p>综合考虑机构运动学与动力学特性，一种优化机构尺寸参数的方案，可以用于提高并联机器人动态性能</p><p><strong>Abstract</strong> </p><p>This paper presents a new method for the optimum design of parallel manipulators by taking both the kinematics and dynamic characteristics into account. The optimum design of a 3-DOF 4-RRR planar parallel manipulator with actuation redundancy is investigated to demonstrate the method. The kinematic performance indices such as the conditioning index, the velocity index, and workspace area are analyzed.<br>Further, the dynamic dexterity, which is used to evaluate the dynamic characteristics, is investigated. The corresponding atlases are represented graphically in the established design space. Based on these atlases, the geometrical parameters without dimension are determined. Then the optimum dimension parameters are achieved based on the optimum non-dimensional result. By using the method proposed in this paper, the designer can obtain the optimum result with respect to both kinematic performance indices and dynamic performance indices. Since the dynamic performance is considered in the process of optimum design by using the method proposed in this paper, it is expected to realize the high dynamics of parallel manipulators.</p><p><strong>Introduction</strong></p><p>Parallel manipulators have attracted much attention in both industry and academia because of their conceptual potentials in high motion dynamics and accuracy combined with high structural rigidity due to their closed kinematic loops. However, there is a gap between the expectation and practical application of parallel manipulators in the machine tool/robot sectors [1, 2]. One of the reasons is that their potentially desirable high dynamics can not be realized since the dynamic characteristics are not considered in the optimal design phase and only are considered in the modelbased control after the prototype is built. Since the prototype is fabricated, the improvement of dynamic characteristics is limited even if model-based control is used. If the dynamic characteristics can also be involved in the process of the optimum design before the prototype is built, the dynamic performance will be improved. Thus, it is helpful to realize the high motion dynamics.</p><p>并联机构实际应用动态效果一般，原因在于优化设计阶段未考虑动态特性，模型完成后，控制就会受限于模型本身，动态特性无法实现，如果在优化设计时考虑到动态特性，整体效果会得到改善。</p><p>Optimal kinematic design is an important subject in designing a parallel manipulator. No matter how simple the parallel manipulator is, the optimum design is always challenging. Many efforts have been contributed to this issue [3–7]. These approaches can be classified into two kinds: one is based on the performance indices and the other is based on the performance atlases. The methods based on the performance indices are traditional ones, implemented in the commercial software MATLAB based on an established object function. If the design criterion number is increased, the procedure will be more complicated. The method based on the performance atlases can give designers a global and visual information on with what kind of link lengths the mechanism can have a good or best performance. However, the dynamic performance is usually neglected.</p><p>最优设计局限性，未考虑动态特性</p><p>Some researchers attempt to study the dynamic performance by defining some dynamic performance indices. Conventionally, dynamic manipulability ellipsoid (DME) [8, 9] and generalized inertia ellipsoid (GIE) [10] were used as performance indices to evaluate the dynamic manipulability of a robot manipulator.<br>Besides, some other measures for evaluating dynamic manipulability have been proposed. Graettinger and Krogh [11] introduced acceleration radius. Hashimoto [12] used the harmonic mean of the square singular values matrix to evaluate the dynamic manipulability.Li et al. [13] presented the smallest singular value of inertia matrix of a manipulator as the evaluation index when the manipulability in the hardest direction was considered. However, almost all of these contributions concentrated on the analysis and evaluation of the dynamic characteristics, and are not used for the optimum design to improve the dynamic performance.Although Asada [14] draw the GIE on a computer display and aid the design by visualizing the dynamic behavior, it is difficult to obtain an optimum design result.</p><p>关于动态性能指标集中指标，注意一下文中提到的文献13中惯性矩阵最小奇异值优化方式，简单优化方式</p><p>动态指标优化方式与问题</p><p>The goal of this paper is to present a new method to take the dynamic characteristics of parallel manipulators into account in the process of optimum design.Based on the performance atlases, both the kinematics and dynamics of a 3-DOF 4-RRR planar parallel manipulator with actuation redundancy are involved.The kinematic performance indices such as the conditioning index, the velocity index, and workspace area are analyzed. Further, the dynamic dexterity of the manipulator is investigated. The corresponding atlases are represented graphically in the established design space. Based on these atlases, the geometrical parameters without dimension are determined. Then the optimum dimensional parameters are achieved based on the optimum nondimensional result. By using the method proposed in this paper, the designer can obtain the optimum result with respect to both kinematic performance indices and dynamic performance indices.</p><p>目标：基于performance atlase 性能图谱优化分析</p><h2 id="运动学分析"><a href="#运动学分析" class="headerlink" title="运动学分析"></a>运动学分析</h2><p>Inverse kinematics 常规闭链解法，不记录了，大同小异</p><p>Velcocity equation 求解jacobian </p><p>这里方法类似于向量推导，从表达过程看，与通过那篇向量几何范数方式推导的硕士论文（郭-）结果一致，之前看那篇方法没有引用相关文献，可能方法出自这里……</p><h2 id="运动学性能指标及图谱"><a href="#运动学性能指标及图谱" class="headerlink" title="运动学性能指标及图谱"></a>运动学性能指标及图谱</h2><p>推导补充（latex写好会放过来）</p><h2 id="全局性能指标与图谱"><a href="#全局性能指标与图谱" class="headerlink" title="全局性能指标与图谱"></a>全局性能指标与图谱</h2><p>The condition number is regarded as the local performance index for evaluating the velocity, accuracy, and rigidity mapping characteristics between the joint variables and the moving platform. The condition number κ is defined as <em>1 ≤ κ = σ 2 ≤∞ σ 1</em> where σ 1 and σ 2 are the minimum and maximum singular values of the Jacobian matrix associated with a given posture.<br>条件数可用于评估关节变量、平台速度、精度、刚度局部性能指标。</p><h2 id="全局速度指标与图谱"><a href="#全局速度指标与图谱" class="headerlink" title="全局速度指标与图谱"></a>全局速度指标与图谱</h2><p>输出速度作为并联机械臂的重要指标，速度性能越好，最小速度越大。</p><h2 id="动力学推导（虚功原理）"><a href="#动力学推导（虚功原理）" class="headerlink" title="动力学推导（虚功原理）"></a>动力学推导（虚功原理）</h2><p>常规推导方式，不作记录</p><p>基于图谱的优化设计</p><p>通过线性规划，给出了一个可行区域</p><p>这里注意数学理论上最优与工程最优区别，实际工程上需要从实际出发，在可行域内选择合适尺寸参数。</p><p>基于运动学优化设计</p><p>工作空间、调节指数以及输出速度</p><p>基于运动学与动力学的优化设计</p><p>优化过程：</p><p>1.根据运动学性能指标划定规划域</p><p>2.根据动态性能指标确定另一个最佳区域，该区域为1子集</p><p>3.确定机械臂参数</p><p>4.基于逆运动学模型确定系统输入角度范围</p><p>5.确定系统机构质量</p><p>In order to investigate the performance of the designed manipulator, the condition number of Jacobian matrix and the distribution of κ D are given, as shown in Figs. 9 and 10. One may see that the condition number distribution and the distribution of κ D are symmetrical and the mechanism has the desired condition performance with η &gt; 0.11 and dynamic manipulability with η̄ D &gt; 0.05. In the center, the condition number of Jacobian matrix has the maximum value 0.33, and κ D = 0.12. It means that the 4-RRR manipulator has a better kinematic dexterity and dynamic manipulability in the center.</p><p>中心位置雅克比矩阵考虑</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文是一种综合考虑运动学与动态性能的优化方案，通过无量纲参数获取杆件尺寸。</p><p>目标操作器具备理想的运动学和动态性能。</p><p>（推导分析后续补充）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>numpy_py</title>
      <link href="/2020/10/29/numpy-py/numpy-py/"/>
      <url>/2020/10/29/numpy-py/numpy-py/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵学习记录-数据分析方向"><a href="#矩阵学习记录-数据分析方向" class="headerlink" title="矩阵学习记录-数据分析方向"></a>矩阵学习记录-数据分析方向</h1><p>后续扩展内容</p><span id="more"></span><p>学习资料来源—<a href="https://github.com/fengdu78/Data-Science-Notes">https://github.com/fengdu78/Data-Science-Notes</a></p><p>列表-矩阵</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array = np.array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>])</span><br><span class="line">prtint(array)</span><br></pre></td></tr></tbody></table></figure><p>维度</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prtint(‘number of dim:<span class="string">',array.ndim)</span></span><br></pre></td></tr></tbody></table></figure><p>行数与列数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'shape:'</span>,array.shape)</span><br></pre></td></tr></tbody></table></figure><p>元素个数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'size:'</span>,array.size)</span><br></pre></td></tr></tbody></table></figure><p>创建数组</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一维</span></span><br><span class="line"><span class="keyword">import</span> numy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],dtype=np.int32) <span class="comment">#np.int默认int32</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment">#多维</span></span><br><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#全0数组</span></span><br><span class="line">a=np.zeros((<span class="number">3</span>,<span class="number">4</span>))<span class="comment">#注意括号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连续数组</span></span><br><span class="line">a=np.arange(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="number">0</span> <span class="number">2</span> ... <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#reshape改变形状</span></span><br><span class="line">b=a.reshape((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建连续性数据</span></span><br><span class="line">a = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>) <span class="comment"># 开始端1，结束端10，且分割成20个数据，生成线段</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">结果示例</span><br><span class="line"></span><br><span class="line">[ <span class="number">1.</span>          <span class="number">1.47368421</span>  <span class="number">1.94736842</span>  <span class="number">2.42105263</span>  <span class="number">2.89473684</span>  <span class="number">3.36842105</span></span><br><span class="line">  <span class="number">3.84210526</span>  <span class="number">4.31578947</span>  <span class="number">4.78947368</span>  <span class="number">5.26315789</span>  <span class="number">5.73684211</span>  <span class="number">6.21052632</span></span><br><span class="line">  <span class="number">6.68421053</span>  <span class="number">7.15789474</span>  <span class="number">7.63157895</span>  <span class="number">8.10526316</span>  <span class="number">8.57894737</span>  <span class="number">9.05263158</span></span><br><span class="line">  <span class="number">9.52631579</span> <span class="number">10.</span>        ]</span><br><span class="line"></span><br><span class="line">矩阵运算 Numpy</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 一维矩阵运算</span></span><br><span class="line">a = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line">[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>] [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">c=a-b</span><br><span class="line">c=a*b <span class="comment">#对位相乘</span></span><br><span class="line">c=b**<span class="number">2</span></span><br><span class="line"><span class="comment">#数学工具</span></span><br><span class="line">c=np.sin(a)</span><br><span class="line"><span class="comment">#数组对比，每一位都会输出真值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多维矩阵</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">b = np.arange(<span class="number">4</span>).reshape((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line">c = a.dot(b)<span class="comment">#矩阵乘法</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">[[<span class="number">2</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line"><span class="comment"># 多维矩阵乘法不能直接使用'*'号</span></span><br><span class="line">a = np.random.random((<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(a))</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(a))</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">max</span>(a))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"a="</span>,a)</span><br><span class="line">a= [[<span class="number">0.48634962</span> <span class="number">0.74204282</span> <span class="number">0.09623356</span> <span class="number">0.69074812</span>]</span><br><span class="line"> [<span class="number">0.60218881</span> <span class="number">0.52734181</span> <span class="number">0.41434585</span> <span class="number">0.26626662</span>]]</span><br><span class="line">如果你需要对行或者列进行查找运算，</span><br><span class="line"></span><br><span class="line">就需要在上述代码中为 axis 进行赋值。</span><br><span class="line"></span><br><span class="line">当axis的值为<span class="number">0</span>的时候，将会以列作为查找单元，</span><br><span class="line"></span><br><span class="line">当axis的值为<span class="number">1</span>的时候，将会以行作为查找单元。</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"sum="</span>,np.<span class="built_in">sum</span>(a,axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">sum</span>= [<span class="number">2.01537412</span> <span class="number">1.8101431</span> ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"min="</span>,np.<span class="built_in">min</span>(a,axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">min</span>= [<span class="number">0.48634962</span> <span class="number">0.52734181</span> <span class="number">0.09623356</span> <span class="number">0.26626662</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"max="</span>,np.<span class="built_in">max</span>(a,axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">max</span>= [<span class="number">0.74204282</span> <span class="number">0.60218881</span>]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>计算</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">2</span>,<span class="number">14</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line">[[ <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小元素索引</span></span><br><span class="line"><span class="built_in">print</span>(np.argmin(A)) <span class="comment"># 0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大元素索引</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(A)) <span class="comment"># 11</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求整个矩阵的均值</span></span><br><span class="line"><span class="built_in">print</span>(np.mean(A)) <span class="comment"># 7.5</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.average(A)) <span class="comment"># 7.5</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.mean()) <span class="comment"># 7.5</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line"><span class="built_in">print</span>(np.median(A)) <span class="comment"># 7.5</span></span><br><span class="line"><span class="number">7.5</span></span><br><span class="line"><span class="comment"># 累加</span></span><br><span class="line"><span class="built_in">print</span>(np.cumsum(A))</span><br><span class="line">[ <span class="number">2</span>  <span class="number">5</span>  <span class="number">9</span> <span class="number">14</span> <span class="number">20</span> <span class="number">27</span> <span class="number">35</span> <span class="number">44</span> <span class="number">54</span> <span class="number">65</span> <span class="number">77</span> <span class="number">90</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 累差运算</span></span><br><span class="line">B = np.array([[<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>],</span><br><span class="line">              [<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.diff(B))</span><br><span class="line">[[<span class="number">2</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">2</span>]]</span><br><span class="line">？？？？？</span><br><span class="line">C = np.array([[<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],</span><br><span class="line">              [<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.nonzero(B))</span><br><span class="line"><span class="built_in">print</span>(np.nonzero(C))</span><br><span class="line">(array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], dtype=int64), array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], dtype=int64))</span><br><span class="line">(array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], dtype=int64), array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>], dtype=int64))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仿照列表排序</span></span><br><span class="line">A = np.arange(<span class="number">14</span>,<span class="number">2</span>,-<span class="number">1</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># -1表示反向递减一个步长</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line">[[<span class="number">14</span> <span class="number">13</span> <span class="number">12</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">10</span>  <span class="number">9</span>  <span class="number">8</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">5</span>  <span class="number">4</span>  <span class="number">3</span>]]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.sort(A))</span><br><span class="line">[[<span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"> [ <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>]]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵转置</span></span><br><span class="line"><span class="built_in">print</span>(np.transpose(A))</span><br><span class="line">[[<span class="number">14</span> <span class="number">10</span>  <span class="number">6</span>]</span><br><span class="line"> [<span class="number">13</span>  <span class="number">9</span>  <span class="number">5</span>]</span><br><span class="line"> [<span class="number">12</span>  <span class="number">8</span>  <span class="number">4</span>]</span><br><span class="line"> [<span class="number">11</span>  <span class="number">7</span>  <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.T)</span><br><span class="line">[[<span class="number">14</span> <span class="number">10</span>  <span class="number">6</span>]</span><br><span class="line"> [<span class="number">13</span>  <span class="number">9</span>  <span class="number">5</span>]</span><br><span class="line"> [<span class="number">12</span>  <span class="number">8</span>  <span class="number">4</span>]</span><br><span class="line"> [<span class="number">11</span>  <span class="number">7</span>  <span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line">[[<span class="number">14</span> <span class="number">13</span> <span class="number">12</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">10</span>  <span class="number">9</span>  <span class="number">8</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">5</span>  <span class="number">4</span>  <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.clip(A,<span class="number">5</span>,<span class="number">9</span>))</span><br><span class="line">[[<span class="number">9</span> <span class="number">9</span> <span class="number">9</span> <span class="number">9</span>]</span><br><span class="line"> [<span class="number">9</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span>]]</span><br><span class="line">clip(Array,Array_min,Array_max)</span><br><span class="line"></span><br><span class="line">将Array_min&lt;X&lt;Array_max X表示矩阵A中的数，如果满足上述关系，则原数不变。</span><br><span class="line"></span><br><span class="line">否则，如果X&lt;Array_min，则将矩阵中X变为Array_min;</span><br><span class="line"></span><br><span class="line">如果X&gt;Array_max，则将矩阵中X变为Array_max.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>索引与切片</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line">[ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A[<span class="number">3</span>])</span><br><span class="line"><span class="number">6</span></span><br><span class="line">B = A.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line">[[ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>]</span><br><span class="line"> [ <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(B[<span class="number">2</span>])</span><br><span class="line">[<span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"><span class="built_in">print</span>(B[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(B[<span class="number">0</span>,<span class="number">2</span>])</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="comment"># list切片操作</span></span><br><span class="line"><span class="built_in">print</span>(B[<span class="number">1</span>,<span class="number">1</span>:<span class="number">3</span>]) <span class="comment"># [8 9] 1:3表示1-2不包含3</span></span><br><span class="line">[<span class="number">8</span> <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> B:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line">[<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">[ <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span>]</span><br><span class="line">[<span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要打印列，则进行转置即可</span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> B.T:</span><br><span class="line">    <span class="built_in">print</span>(column)</span><br><span class="line">[ <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span>]</span><br><span class="line">[ <span class="number">4</span>  <span class="number">8</span> <span class="number">12</span>]</span><br><span class="line">[ <span class="number">5</span>  <span class="number">9</span> <span class="number">13</span>]</span><br><span class="line">[ <span class="number">6</span> <span class="number">10</span> <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多维转一维</span></span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment"># print(A)</span></span><br><span class="line"><span class="built_in">print</span>(A.flatten())</span><br><span class="line"><span class="comment"># flat是一个迭代器，本身是一个object属性</span></span><br><span class="line">[ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A.flat:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></tbody></table></figure><p>数组合并</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(np.vstack((A,B)))</span><br><span class="line"><span class="comment"># vertical stack 上下合并,对括号的两个整体操作。</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">C = np.vstack((A,B))</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(A.shape,B.shape,C.shape)<span class="comment"># 从shape中看出A,B均为拥有3项的数组(数列)</span></span><br><span class="line">(<span class="number">3</span>,) (<span class="number">3</span>,) (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># horizontal stack左右合并</span></span><br><span class="line">D = np.hstack((A,B))</span><br><span class="line"><span class="built_in">print</span>(D)</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(A.shape,B.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,) (3,) (6,)</span></span><br><span class="line"><span class="comment"># 对于A,B这种，为数组或数列，无法进行转置，需要借助其他函数进行转置</span></span><br><span class="line">(<span class="number">3</span>,) (<span class="number">3</span>,) (<span class="number">6</span>,)</span><br><span class="line"></span><br><span class="line">数组-矩阵</span><br><span class="line"><span class="built_in">print</span>(A[np.newaxis,:]) <span class="comment"># [1 1 1]变为[[1 1 1]]</span></span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]</span><br><span class="line"><span class="built_in">print</span>(A[np.newaxis,:].shape) <span class="comment"># (3,)变为(1, 3)</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(A[:,np.newaxis])</span><br><span class="line">[[<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>矩阵合并</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># concatenate的第一个例子</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------------"</span>)</span><br><span class="line"><span class="built_in">print</span>(A[:,np.newaxis].shape) <span class="comment"># (3,1)</span></span><br><span class="line">------------</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">A = A[:,np.newaxis] <span class="comment"># 数组转为矩阵</span></span><br><span class="line">B = B[:,np.newaxis] <span class="comment"># 数组转为矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line">[[<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]]</span><br><span class="line">In [<span class="number">70</span>]:</span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line">[[<span class="number">2</span>]</span><br><span class="line"> [<span class="number">2</span>]</span><br><span class="line"> [<span class="number">2</span>]]</span><br><span class="line"><span class="comment"># axis=0纵向合并</span></span><br><span class="line">C = np.concatenate((A,B,B,A),axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line">[[<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span>]</span><br><span class="line"> [<span class="number">2</span>]</span><br><span class="line"> [<span class="number">2</span>]</span><br><span class="line"> [<span class="number">2</span>]</span><br><span class="line"> [<span class="number">2</span>]</span><br><span class="line"> [<span class="number">2</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]]</span><br><span class="line"><span class="comment"># axis=1横向合并</span></span><br><span class="line">C = np.concatenate((A,B),axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span>]]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># concatenate的第二个例子</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------"</span>)</span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">b = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------"</span>)</span><br><span class="line">-------------</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># axis=0多个矩阵纵向合并</span></span><br><span class="line">c = np.concatenate((a,b),axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># axis=1多个矩阵横向合并</span></span><br><span class="line">c = np.concatenate((a,b),axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>矩阵分割</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等量分割</span></span><br><span class="line"><span class="comment"># 纵向分割同横向合并的axis</span></span><br><span class="line"><span class="built_in">print</span>(np.split(A, <span class="number">2</span>, axis=<span class="number">1</span>))</span><br><span class="line">[array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">9</span>]]), array([[ <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>]])]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向分割同纵向合并的axis</span></span><br><span class="line"><span class="built_in">print</span>(np.split(A,<span class="number">3</span>,axis=<span class="number">0</span>))</span><br><span class="line">[array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]), array([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]), array([[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.array_split(A,<span class="number">3</span>,axis=<span class="number">1</span>))</span><br><span class="line">[array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">9</span>]]), array([[ <span class="number">2</span>],</span><br><span class="line">       [ <span class="number">6</span>],</span><br><span class="line">       [<span class="number">10</span>]]), array([[ <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">7</span>],</span><br><span class="line">       [<span class="number">11</span>]])]</span><br><span class="line"></span><br><span class="line">Numpy与相关参数</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># `=`赋值方式会带有关联性</span></span><br><span class="line">a = np.arange(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [0 1 2 3]</span></span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">b = a</span><br><span class="line">c = a</span><br><span class="line">d = b</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [11  1  2  3]</span></span><br><span class="line">[<span class="number">11</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [11  1  2  3]</span></span><br><span class="line">[<span class="number">11</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># [11  1  2  3]</span></span><br><span class="line">[<span class="number">11</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(d) <span class="comment"># [11  1  2  3]</span></span><br><span class="line">[<span class="number">11</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"> copy()赋值方式没有关联性</span><br><span class="line">a = np.arange(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [0 1 2 3]</span></span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">b =a.copy() <span class="comment"># deep copy</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [0 1 2 3]</span></span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">a[<span class="number">3</span>] = <span class="number">44</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [ 0  1  2 44]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [0 1 2 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时a与b已经没有关联</span></span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span> <span class="number">44</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure><p>关于广播机制</p><p>numpy数组间的基础运算是一对一，也就是<code>a.shape==b.shape</code>，但是当两者不一样的时候，就会自动触发广播机制，如下例子</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rom numpy <span class="keyword">import</span> array</span><br><span class="line">a = array([[ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">           [<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>],</span><br><span class="line">           [<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>],</span><br><span class="line">           [<span class="number">30</span>,<span class="number">30</span>,<span class="number">30</span>]])</span><br><span class="line">b = array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">21</span> <span class="number">22</span>]</span><br><span class="line"> [<span class="number">30</span> <span class="number">31</span> <span class="number">32</span>]]</span><br></pre></td></tr></tbody></table></figure><p>当两个数组的<code>trailing dimensions  compatible</code>时才会触发广播，否则报错<code>ValueError: frames are not aligned exception</code>。</p><p>上面表达意思是尾部维度必须兼容！</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line">np.bincount(x)</span><br><span class="line"></span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], dtype=int64)</span><br><span class="line">统计索引出现次数：索引<span class="number">0</span>出现<span class="number">1</span>次，<span class="number">1</span>出现<span class="number">2</span>次，<span class="number">2</span>出现<span class="number">1</span>次，<span class="number">3</span>出现<span class="number">2</span>次，<span class="number">4</span>出现<span class="number">1</span>次</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.bincount(x,weights=w)</span><br></pre></td></tr></tbody></table></figure><p>Out[100]:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([ 0.1, -0.6,  0.5,  1.3,  1. ])</span><br></pre></td></tr></tbody></table></figure><p>怎么计算的？</p><p>先对x与w抽取出来：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ---&gt;  [1, 2, 3, 3, 0, 1, 4]</span><br></pre></td></tr></tbody></table></figure><p><code>w ---&gt;  [0.3,0.5,0.7,0.6,0.1,-0.9,1]</code> 索引 0 出现在x中index=4位置，那么在w中访问index=4的位置即可，w[4]=0.1</p><p>索引 1 出现在x中index=0与index=5位置，那么在w中访问<code>index=0</code>与<code>index=5</code>的位置即可，然后将两这个加和，计算得：<code>w[0]+w[5]=-0.6</code> 其余的按照上面的方法即可！</p><p>bincount的另外一个参数为minlength，这个参数简单，可以这么理解，当所给的bin数量多于实际从x中得到的bin数量后，后面没有访问到的设置为0即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.bincount(x,weights=w,minlength=<span class="number">7</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([ <span class="number">0.1</span>, -<span class="number">0.6</span>,  <span class="number">0.5</span>,  <span class="number">1.3</span>,  <span class="number">1.</span> ,  <span class="number">0.</span> ,  <span class="number">0.</span> ])</span><br></pre></td></tr></tbody></table></figure><p>与上面相比多了两个0，这两个怎么会多？</p><p>上面知道，这个bin数量为5，index从0到4，那么当minlength为7的时候，也就是总长为7，index从0到6，多了后面两位，直接补位为0即可！</p><h4 id="np-argmax"><a href="#np-argmax" class="headerlink" title="np.argmax()"></a>np.argmax()</h4><p>函数原型为：<code>numpy.argmax(a, axis=None, out=None)</code>.</p><p>函数表示返回沿轴axis最大值的索引。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">x = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">     [<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(np.argmax(x))<span class="comment">#返回索引位置</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">对于这个例子我们知道，<span class="number">7</span>最大，索引位置为<span class="number">3</span>(这个索引按照递增顺序)！</span><br><span class="line"></span><br><span class="line">axis属性</span><br><span class="line"></span><br><span class="line">axis=<span class="number">0</span>表示按列操作，也就是对比当前列，找出最大值的索引！</span><br><span class="line"></span><br><span class="line">x = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">     [<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(np.argmax(x,axis=<span class="number">0</span>))</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">x = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">     [<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(np.argmax(x,axis=<span class="number">0</span>))</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">那如果碰到重复最大元素？</span><br><span class="line"></span><br><span class="line">返回第一个最大值索引即可！</span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(x.argmax())</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>求取精度</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.around([-0.6,1.2798,2.357,9.67,13], decimals=0)#取指定位置的精度</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([-<span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>, <span class="number">10.</span>, <span class="number">13.</span>])</span><br></pre></td></tr></tbody></table></figure><p>看到没，负数进位取绝对值大的！</p><ul><li>```python<br>np.around([1.2798,2.357,9.67,13], decimals=1)</li></ul><p>  ​<code>array([ 1.3,  2.4,  9.7, 13. ])  ​</code></p><p>  ​<code>np.around([1.2798,2.357,9.67,13], decimals=2)  ​</code></p><p>  ​<code>array([ 1.28,  2.36,  9.67, 13.  ])  ​</code></p><p>  从上面可以看出，decimals表示指定保留有效数的位数，当超过5就会进位(此时包含5)！</p><p>  但是，如果这个参数设置为负数，又表示什么？<br>  np.around([1,2,5,50,56,190], decimals=-2)<br>  array([  0,   0,   0,   0, 100, 200])<br>  看到没，必须看两位，超过50才会进位，190的话，就看后面两位，后两位90超过50，进位，那么为200！</p><p>  计算沿指定轴第N维的离散差值<br>  x = np.arange(1 , 16).reshape((3 , 5))<br>  print(x)<br>  [[ 1  2  3  4  5]<br>   [ 6  7  8  9 10]<br>   [11 12 13 14 15]]<br>  np.diff(x,axis=1) #默认axis=1<br>  array([[1, 1, 1, 1],<br>         [1, 1, 1, 1],<br>         [1, 1, 1, 1]])<br>  np.diff(x,axis=0)<br>  array([[5, 5, 5, 5, 5],<br>         [5, 5, 5, 5, 5]])<br>  取整<br>  np.floor([-0.6,-1.4,-0.1,-1.8,0,1.4,1.7])<br>  array([-1., -2., -1., -2.,  0.,  1.,  1.])<br>  看到没，负数取整，跟上述的around一样，是向左！</p><p>  取上限<br>  np.ceil([1.2,1.5,1.8,2.1,2.0,-0.5,-0.6,-0.3])<br>  array([ 2.,  2.,  2.,  3.,  2., -0., -0., -0.])<br>  取上限！找这个小数的最大整数即可！</p><p>  查找</p><p>  利用np.where实现小于0的值用0填充吗，大于0的数不变<br>  x = np.array([[1, 0],<br>         [2, -2],<br>       [-2, 1]])<br>  print(x)<br>  np.where(x&gt;0,x,0)<br>  array([[1, 0],<br>         [2, 0],<br>         [0, 1]])</p><p>  ```</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux_cleanfile</title>
      <link href="/2020/10/20/linux-cleanfile/linux-cleanfile/"/>
      <url>/2020/10/20/linux-cleanfile/linux-cleanfile/</url>
      
        <content type="html"><![CDATA[<h1 id="由Linux-bug文件清理以及删除想到的linux多版本软件安装想法理解记录"><a href="#由Linux-bug文件清理以及删除想到的linux多版本软件安装想法理解记录" class="headerlink" title="由Linux-bug文件清理以及删除想到的linux多版本软件安装想法理解记录"></a>由Linux-bug文件清理以及删除想到的linux多版本软件安装想法理解记录</h1><p>昨天晚上测试运动算法包，更新中间发现系统磁盘爆满，终端terminal无法运行，启动文件节点无法启动，于今天下午解决问题，写一篇日志记录一下，顺便谈一下linux的多版本软件安装基理。</p><span id="more"></span><p>启动terminal，显示终端内存不足，导致文件无法启动，猜想原因是点击系统更新中断后产生bug文件，使得根目录爆满，这里介绍一条指令便于分析大内存位置：</p><p>Traceback (most recent call last):<br>  File “/opt/ros/kinetic/_setup_util.py”, line 297, in <module><br>    sys.stdout.flush()<br>IOError: [Errno 28] No space left on device<br>Failed to run ‘“/opt/ros/kinetic/_setup_util.py” ‘: return code 1<br>Traceback (most recent call last):<br>  File “/home/xiaomu/ws_moveit/devel/_setup_util.py”, line 297, in <module><br>    sys.stdout.flush()</module></module></p><p>首先 df -h 或者 df -hi查看linux总分区，寻找剩余空间不多的分区，我的是根目录显示爆满</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda9        23G   22G     0 100% /</span><br></pre></td></tr></tbody></table></figure><p>输入 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo du -h -x --max-depth=1</span><br></pre></td></tr></tbody></table></figure><p>比如我的显示 var与usr文件爆满</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">13M./sbin</span><br><span class="line">16K./lost+found</span><br><span class="line">4.0K./mnt</span><br><span class="line">4.0K./lib64</span><br><span class="line">20M./root</span><br><span class="line">9.9G./var</span><br><span class="line">775M./lib</span><br><span class="line">8.0K./media</span><br><span class="line">4.6M./libx32</span><br><span class="line">3.9M./lib32</span><br><span class="line">16K./snap</span><br><span class="line">1.2G./opt</span><br><span class="line">16M./etc</span><br><span class="line">9.8G./usr</span><br><span class="line">4.0K./srv</span><br><span class="line">60K./tmp</span><br><span class="line">13M./bin</span><br><span class="line">4.0K./cdrom</span><br><span class="line">22G.</span><br></pre></td></tr></tbody></table></figure><p>根据信息对相应文件进行删除，小心误删重要文件</p><h2 id="var文件夹"><a href="#var文件夹" class="headerlink" title="var文件夹"></a>var文件夹</h2><p>系统运行后占用硬盘内存，主要针对常态性变动文件，包括缓存、登录文件、以及某些软件运行所产生的文件等，log中放置登录文件日志</p><blockquote><p>/var的意义与内容</p><p>如果/usr是安装时会占用较大硬盘容量目录，那么/var就是在系统运行后才会渐渐占用硬盘容量的目录。因为/var目录主要针对常态性变动文件，包括缓存（cache）、登录文件（logfile）以及某些软件运行所产生的文件，包括程序文件（lock file，run file），或者例如Mysql数据库的文件等。常见的子目录如下：</p><p>/var/cache：应用程序本身运行过程中会产生生的一些暂存文件。</p><p>/var/lib:程序本身执行的过程中需要使用到的数据文件放置的目录。再次目录下各自的软件应该要有各自的目录。举例来说，Mysql的数据库放置到/var/lib/mysql，而rpm的数据库则放到/var/lib/rpm目录下。</p><p>/var/lock:某些设备或者是文件资源一次只能被一个应用程序所使用 ，如当系统中有一个刻录机两个人都要使用，那么需要在一个人使用的时候上锁，那么第一个人使用完毕后，第二个人才可以继续使用。</p><p>/var/log:这个是登录文件放置日志的的目录。里面比较重要的文件/var/log/messages，/var/log/harry(记录登陆者信息)等。</p><p>/var/run/：某些程序启动服务后，会将他们PID放置在这个目录下。</p><p>——来源—-<a href="https://www.cnblogs.com/Renyi-Fan/p/11504111.html">https://www.cnblogs.com/Renyi-Fan/p/11504111.html</a></p></blockquote><p>（本次问题主要出现在这里，推测由于中断更新，导致产生了两个大的错误日志，经过上述方法，在log中发现了两个4g多的日志文件，进行了强制删除，系统恢复正常）</p><p>文件分别为syslog以及kern.log，这里删除后注意重启服务</p><blockquote><p>service syslog restart</p></blockquote><p>至此，问题已经解决，过程中发现usr文件夹同样较大，其实没有问题，原因是因为我平时跑ros以及各种图像代码，库中安装了多个版本的软件，当初只是按照教程进行安装，却不知道为什么linux可以这样，今天知道了原因：</p><h2 id="usr文件夹"><a href="#usr文件夹" class="headerlink" title="usr文件夹"></a>usr文件夹</h2><blockquote><div class="table-container"><table><thead><tr><th>/usr/X11R6/</th><th>为X Window System重要数据所放置的目录，之所以取名为X11R6是因为最后的X版本为第11版，且该版的第6次释出之意。</th></tr></thead><tbody><tr><td>/usr/bin/</td><td>绝大部分的用户可使用指令都放在这里。请注意到他与/bin的不同之处。(是否与开机过程有关)</td></tr><tr><td>/usr/include/</td><td>c/c++等程序语言的档头(header)与包含档(include)放置处，当我们以tarball方式 (*.tar.gz 的方式安装软件)安装某些数据时，会使用到里头的许多包含档。</td></tr><tr><td>/usr/lib/</td><td>包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行档或脚本(script)。  某些软件会提供一些特殊的指令来进行服务器的设定，这些指令也不会经常被系统管理员操作，  那就会被摆放到这个目录下啦。要注意的是，如果你使用的是X86_64的Linux系统， 那可能会有/usr/lib64/目录产生</td></tr><tr><td>/usr/local/</td><td>统管理员在本机自行安装自己下载的软件(非distribution默认提供者)，建议安装到此目录， 这样会比较便于管理。举例来说，你的distribution提供的软件较旧，你想安装较新的软件但又不想移除旧版，  此时你可以将新版软件安装于/usr/local/目录下，可与原先的旧版软件有分别啦。  你可以自行到/usr/local去看看，该目录下也是具有bin, etc, include, lib…的次目录</td></tr><tr><td>/usr/sbin/</td><td>非系统正常运作所需要的系统指令。最常见的就是某些网络服务器软件的服务指令(daemon)</td></tr><tr><td>/usr/share/</td><td>放置共享文件的地方，在这个目录下放置的数据几乎是不分硬件架构均可读取的数据， 因为几乎都是文本文件嘛。在此目录下常见的还有这些次目录：/usr/share/man：联机帮助文件  /usr/share/doc：软件杂项的文件说明  /usr/share/zoneinfo：与时区有关的时区文件</td></tr><tr><td>/usr/src/</td><td>一般原始码建议放置到这里，src有source的意思。至于核心原始码则建议放置到/usr/src/linux/目录下。</td></tr></tbody></table></div><p>—-来源—-<a href="https://www.cnblogs.com/ftl1012/p/9278578.html">https://www.cnblogs.com/ftl1012/p/9278578.html</a></p></blockquote><p>关于local文件夹，依据上述介绍，同理可以手动进行其余软件多版本的安装。</p><p>总之，个人觉得ubuntu更新还是慎重，其次，装双系统的时候尽量空间给多一点，学会随时终端查看磁盘存储情况，根据报错解决问题，最后写一下查看磁盘的终端命令指南：</p><p>df</p><p>df以磁盘分区为单位查看文件系统</p><p>显示内容参数说明：</p><ul><li><strong>Filesystem</strong>：文件系统</li><li><strong>Size</strong>：  分区大小</li><li><strong>Used</strong>： 已使用容量</li><li><strong>Avail</strong>： 还可以使用的容量</li><li><strong>Use%</strong>： 已用百分比</li><li><strong>Mounted on</strong>： 挂载点　</li></ul><h2 id="Linux-查看磁盘空间"><a href="#Linux-查看磁盘空间" class="headerlink" title="Linux 查看磁盘空间"></a>Linux 查看磁盘空间</h2><p>Linux 查看磁盘空间可以使用 df 和 du 命令。</p><hr><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>df 以磁盘分区为单位查看文件系统，可以获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>例如，我们使用df -h命令来查看磁盘信息， -h 选项为根据大小适当显示： </p><p>显示内容参数说明：</p><ul><li><strong>Filesystem</strong>：文件系统</li><li><strong>Size</strong>：  分区大小</li><li><strong>Used</strong>： 已使用容量</li><li><strong>Avail</strong>： 还可以使用的容量</li><li><strong>Use%</strong>： 已用百分比</li><li><strong>Mounted on</strong>： 挂载点　</li></ul><p><strong>相关命令：</strong></p><ul><li>df -hl：查看磁盘剩余空间</li><li>df -h：查看每个根路径的分区大小</li><li>du -sh [目录名]：返回该目录的大小</li><li>du -sm [文件夹]：返回该文件夹总M数</li><li>du -h [目录名]：查看指定文件夹下的所有文件大小（包含子文件夹）</li></ul><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p>disk usage ，查看磁盘的使用情况</p><p>查看当前目录的总大小</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># du -sh</span><br></pre></td></tr></tbody></table></figure><p>du 命令用于查看当前目录的总大小：</p><ul><li>-a或-all 为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。</li><li>-b或-bytes 显示目录或文件大小时，以byte为单位。</li><li>-c或–total 除了显示目录或文件的大小外，同时也显示所有目录或文件的总和。</li><li>-D或–dereference-args 显示指定符号连接的源文件大小。</li><li>-h或–human-readable 以K，M，G为单位，提高信息的可读性。</li><li>-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位,而不是以1024为换算单位。</li><li>-k或–kilobytes 以1024 bytes为单位。</li><li>-l或–count-links 重复计算硬件连接的文件。</li><li>-L&lt;符号连接&gt;或–dereference&lt;符号连接&gt; 显示选项中所指定符号连接的源文件大小。</li><li>-m或–megabytes 以1MB为单位。</li><li>-s或–summarize 仅显示总计，即当前目录的大小。</li><li>-S或–separate-dirs 显示每个目录的大小时，并不含其子目录的大小。</li><li>-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</li><li>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。</li><li>–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。</li><li>–max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。</li><li>–help 显示帮助。</li><li>–version 显示版本信息。</li></ul><p>本文中用到的两个指令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br><span class="line"></span><br><span class="line">sudo du -h -x --max-depth=1</span><br></pre></td></tr></tbody></table></figure><h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><p>以下资料来源于，转载非原创 <a href="https://www.sysgeek.cn/ubuntu-free-up-space/">https://www.sysgeek.cn/ubuntu-free-up-space/</a></p><p>1.移除不再需要的软件包</p><p>如果你了解过 apt-get 或 apt 命令的详细用法，应该知道 autoremove 选项。此选项可以删除「安装某个软件包时」自动安装的依赖库和包，这些自动安装的依赖包在系统中通常是无用的，只用浪费磁盘空间。当然，autoremove 选项也可以自动删除那些系统升级过程中被取代的老旧无用 Linux 内核。</p><p>这是一个自动化的傻瓜命令，可以时不时用它为 Ubuntu 系统释放一些可用硬盘空间：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove</span><br></pre></td></tr></tbody></table></figure><h3 id="2-清理Ubuntu中的APT缓存"><a href="#2-清理Ubuntu中的APT缓存" class="headerlink" title="2. 清理Ubuntu中的APT缓存"></a>2. 清理Ubuntu中的APT缓存</h3><p>Ubuntu 使用 APT（高级软件包工具）在系统上安装、删除和管理软件，并且在软件卸载之后它还会保留先前下载和安装软件包的缓存。</p><p>APT 包管理系统会将下载的 DEB 包缓存在 /var/cache/apt/archives 文件中，随着时间的推移，由于拥有大量不需要的包这个缓存目录可以增长得相当大。</p><p>你可以使用以下命令查看此缓存的大小：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo du -sh /var/cache/apt</span><br></pre></td></tr></tbody></table></figure><p>对于 APT 缓存我们有两种可选方式对其进行清理，其一为只删除过时的软件包：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoclean</span><br></pre></td></tr></tbody></table></figure><p>另一种则是清理整个缓存（释放更多的磁盘空间）：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt clean</span><br></pre></td></tr></tbody></table></figure><h3 id="3-清理缩略图缓存"><a href="#3-清理缩略图缓存" class="headerlink" title="3.清理缩略图缓存"></a>3.清理缩略图缓存</h3><p>为方便用户预览图片，Ubuntu 会自动为图片文件创建一个缩略图，用于在文件管理器中查看，而这些这些缩略图其实也是以文件形式隐藏存储在用户账户的 ~/.cache/thumbnails 目录当中。</p><p>如果你是摄影爱好者或是图片收藏者，随着时间的推移，缩略图的数量将大大增加。特别需要注意的是，如果你删除了某些照片或图片，这些自动生成的缩略图缓存还是会存在于磁盘当中，而不会自动清除。</p><p>你可以使用以下命令检查缩略图缓存的大小：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh ~/.cache/thumbnails</span><br></pre></td></tr></tbody></table></figure><p>因此，每几个月左右清除缩略图缓存是一个很好的习惯。 最快捷的方法就是使用终端命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.cache/thumbnails/*</span><br></pre></td></tr></tbody></table></figure><h3 id="4-手动删除老旧Linux内核（专业）"><a href="#4-手动删除老旧Linux内核（专业）" class="headerlink" title="4.手动删除老旧Linux内核（专业）"></a>4.手动删除老旧Linux内核（专业）</h3><p>前面介绍第 1 种方法时就提到了可以自动删除那些老旧无用的 Linux Kernel，但如果你在 Ubuntu 中曾手动安装过内核，则 apt autoremove 命令选项则不适用了。但删除不使用的旧版内核确实又可节省大量磁盘空间，所以对于手动安装的 Ubuntu 内核可以进行手动卸载。</p><p>首先使用如下命令列出当前 Ubuntu 中所有已经安装的 Linux Kernel：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --list 'linux-image*'*</span><br></pre></td></tr></tbody></table></figure><p>删除旧版内核与删除任何其他软件包一样：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove linux-image-VERSION</span><br></pre></td></tr></tbody></table></figure><h3 id="5-删除多余的孤立包（专业）"><a href="#5-删除多余的孤立包（专业）" class="headerlink" title="5. 删除多余的孤立包（专业）"></a>5. 删除多余的孤立包（专业）</h3><p>首先我们要说说什么是 Ubuntu 系统中的孤立包（也叫多余的包）：假设你安装了一个名为 myprogram 的软件包，而这个包又依赖于 mylib 库，这个库通常在安装 myprogram 时便会自动安装到系统当中。当你卸载 myprogram 应用时，mylib 库可能仍然保留在系统中。 此种情况下，mylib 就会成为一个孤立的包。</p><p>gtkorphan 这款图形化应用可以可以轻松找出并删除 Ubuntu 系统中的孤立包，先使用如下终端命令进行安装：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gtkorphan</span><br></pre></td></tr></tbody></table></figure><p>安装好后在「多余的包」选项卡中即可对查找、删除孤立包。</p><h3 id="6-卸载不必要的应用程序"><a href="#6-卸载不必要的应用程序" class="headerlink" title="6.卸载不必要的应用程序"></a>6.卸载不必要的应用程序</h3><p>相信每个人都有那么一款和几款几乎不用的游戏或应用程序存在于系统当中。不相信？去你 Ubuntu 系统查下软件列表就知道了。其实这条也不用我多说，如果你需要更多的磁盘空间，删除那些从不使用或较少使用的应用程序总是一个好方法。</p><p>删除软件可以使用「Ubuntu 软件」或直接终端命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove 软件包名</span><br></pre></td></tr></tbody></table></figure><h3 id="7-使用GUI工具释放Ubuntu空间"><a href="#7-使用GUI工具释放Ubuntu空间" class="headerlink" title="7. 使用GUI工具释放Ubuntu空间"></a>7. 使用GUI工具释放Ubuntu空间</h3><p>转载非原创 <a href="https://www.sysgeek.cn/ubuntu-free-up-space/">https://www.sysgeek.cn/ubuntu-free-up-space/</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>manipulator_HU_learninging</title>
      <link href="/2020/10/12/manipulator-HU-learninging/manipulator-HU-learninging/"/>
      <url>/2020/10/12/manipulator-HU-learninging/manipulator-HU-learninging/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一套开发流程，没啥意义"><a href="#记录一套开发流程，没啥意义" class="headerlink" title="记录一套开发流程，没啥意义"></a>记录一套开发流程，没啥意义</h1><p>后续可看，ppt要好好做</p><span id="more"></span><p>1.基本理论</p><p>2.开发</p><p>ISO</p><ol><li>机器人动作机构具有类似于人或其他生物体的某些器官（肢体、感受等）的功能；、</li><li>机器人具有通用性，工作种类多样，动作程序灵活易变；</li><li>机器人具有不同程度的智能性，比如记忆、感知、推理、决策、学习等；</li><li>机器人具有独立性、完整的机器人系统在工作中不可以依赖于人的干预。</li></ol><p>驱动系统</p><ul><li>电源子系统</li><li>电机驱动系统—控制信号-电信号</li><li>传感器</li></ul><p>内部传感器</p><ul><li>机器人里程计</li><li>惯性测量单元IMU</li></ul><p>控制系统</p><p>PC—人机交互（SLAM、导航、图像识别、语音识别）</p><p>TCP/UDP</p><p>硬件系统：控制、传感器数据采集、驱动系统通信、外设连接</p><p>外部传感器</p><ul><li>外部摄像头、Kinect</li><li>激光雷达</li></ul><p>移动机器人-常见</p><p>机器人架构可参考（ppt制作，针对特种环境的通信干扰分析）</p><p>云机器人架构思想：</p><ul><li>全局云：全局数据存储、共享和交互</li><li>本地云：密集型计算的机器人应用服务</li><li>机器人：面向用户的终端服务单元</li></ul><p>优点：局部网络占优</p><ul><li>本地云数据共享更加灵活、快捷</li><li>数据保存与本地服务器，更加安全、可靠</li><li>服务于多种机器人</li></ul><p>整理常见机械臂：</p><ul><li>UR机械臂，安全度高、编程简单、灵活度高，负载10-18kg，工作半径85-130cm。</li><li></li></ul><p>控制框架架构+系统架构+云系统架构</p><h2 id="开发具体流程分析与记录（代码分析）："><a href="#开发具体流程分析与记录（代码分析）：" class="headerlink" title="开发具体流程分析与记录（代码分析）："></a>开发具体流程分析与记录（代码分析）：</h2><p>1.常见基础</p><p>2.manipulator_moveit</p><p>3.moveit+gazebo 仿真系统搭建</p><p>ros_control 为开发者提供的机器人控制中间件，包含一系列控制器接口、传动器接口、硬件接口、控制器工具箱</p><p>包括有速度控制、位置控制、力控制</p><p>关节位置控制器：PID 具体参照arm包 yaml文件或者gazebo_control内yaml文件</p><p>加载控制器，加载conrollers关节参数，加载publisher参数节点，三部分，关节矩阵变换</p><p>moveit与gazebo rviz 联合仿真</p><p>编程接口</p><p>moveit_commander python接口</p><p>1.连接控制需要的规划组 2.设置目标位姿 3.设置运动约束 4.使用moveit！规划一条到达目标的轨迹</p><p>5.修改轨迹 6.执行规划出的轨迹</p><p>启动moveit包-moveit_config,程序中给出目标位置以及执行器位置信息，软件自动规划最优路径</p><p>编程—-针对规划组编写，设置目标位置参数，臂则设置位置信息，数组导入，完成机械臂规划</p><p>工作空间运动规划—轨迹规划(关键代码参数)</p><p>创建规划组的控制对象</p><p>获取机器人终端LINK名称</p><p>设置目标位姿对应的参考坐标系和起始、终止位姿</p><p>完成规划并控制机械臂完成运动</p><p>运动限制约束设置</p><p>运动学插件问题KDL，插件选用以及<code>二次开发</code>问题</p><p>抓取与放置，attach与un，避障规划</p><p>代码分析与移植待补充～～</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>manipulator_review</title>
      <link href="/2020/10/02/manipulator-review/manipulator-review/"/>
      <url>/2020/10/02/manipulator-review/manipulator-review/</url>
      
        <content type="html"><![CDATA[<h1 id="综述笔记-manipulator-review-underwater-system已补充结束"><a href="#综述笔记-manipulator-review-underwater-system已补充结束" class="headerlink" title="综述笔记-manipulator_review(underwater)-(system已补充结束)"></a>综述笔记-manipulator_review(underwater)-(system已补充结束)</h1><p>一篇综述[1]的总体方向笔记，非文献整理。</p><blockquote><p>[1] SIVČEV S, COLEMAN J, OMERDIĆ E, et al. Underwater manipulators: A review [J]. 2018, 163(431-50.</p></blockquote><p>UUV-unmanned underwater vehicles   </p><p>ROV—remotely operated vehicles</p><p>AUV-autonomous underwater vehicles</p><p>UVMS-Underwater Vehicle Manipulator Systems</p><span id="more"></span><p>(水下双臂—一号臂抓取固定机器人本体，二号臂执行预定作业内容)</p><h2 id="常见任务："><a href="#常见任务：" class="headerlink" title="常见任务："></a>常见任务：</h2><p>1.管道检测    2.沉没物体打捞作业     3.矿井作业 </p><p>4.清洁表面作业    5.开关阀门、钻探、rope cutting     6.线缆铺设以及维修</p><p>7.清理碎片或渔网    8.生物地质采样    9.考古archaeological work</p><h2 id="特殊环境材料选择（水下）"><a href="#特殊环境材料选择（水下）" class="headerlink" title="特殊环境材料选择（水下）"></a>特殊环境材料选择（水下）</h2><p>作业约束：</p><p>1.the size of the workspace</p><p>2.lifting capacity </p><p>3.wrist torque</p><p>常用金属合金，比如TI6-4、阳极氧化铝、不锈钢合金以及某些塑料（聚乙烯）</p><p>—较高强度、耐腐蚀性、良好的可加工性质、减轻水中的重量以及减少执行器负担</p><p>Reach—水下机械手运动链长</p><ol><li><p>水下机械手能产生的最大腕部扭矩范围8NM-250NM</p></li><li><p>水下机械手的载荷5kg-500kg左右</p></li><li><p>水下机械手的运动范围为0.5m-2.4m</p><p>参数：max.nominal  最大额定值    at full extension 完全伸展  at rated speed 额定速度</p><p>through envelope </p></li></ol><h2 id="关于水下控制模型意义"><a href="#关于水下控制模型意义" class="headerlink" title="关于水下控制模型意义"></a>关于水下控制模型意义</h2><p>机械手的质量尽量占比较小，为了可以忽略或至少将动态耦合考虑为可以解决的外部干扰，通过水下机器人的动态定位，更大的重量和尺寸对水下机器人推进器系统对由动态耦合引起的干扰的鲁棒性提出了更高的要求。</p><h2 id="机械爪"><a href="#机械爪" class="headerlink" title="机械爪"></a>机械爪</h2><p>通常设计三到六个自由度，三个自由度可以到达任意位置，六个自由度可以实现末端执行器的任意位置和方向</p><p>高自由度具有冗余性，常用于避障作业</p><h2 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h2><ul><li>海水驱动，缺点较多被放弃</li><li>液压驱动—<ul><li>高负载，高效率、简单、过载保护</li><li>定位精度差、容易泄露造成污染</li></ul></li><li>电驱动<ul><li>电动用于商业较少，难以满足工业速度、可靠性、强度或力量要求</li></ul></li><li>电液混合驱动</li></ul><p>以上电与液压驱动均有大量研究文章，有时间挑着看看商用水下操纵器控制系统安装在ROV上的商用水下操纵器由遥操作系统控制，并且完全依赖于位于水面船只上的回路中的驾驶员/操纵员。 飞行员通过摄像头和/或声纳系统的反馈来观察场景，并同时做出有关运动的决定，并使用一些备用输入设备之一远程操作水下操纵器。 根据水下机械手的技术能力，使用不同的控制方法。</p><h3 id="商业用控制系统"><a href="#商业用控制系统" class="headerlink" title="商业用控制系统"></a>商业用控制系统</h3><p>商业级别一般使用遥操作</p><ul><li>rate control    液压通过流量与速度控制</li><li>position control     位置传感器通过电位计、analog resolvers、digital optical encoders 、solid state linear position sensors</li><li>force feedback  商业级应用，常用于辅助人工操作</li></ul><p>gripper control</p><h2 id="水下理论控制模型（文章较多，研究重点）"><a href="#水下理论控制模型（文章较多，研究重点）" class="headerlink" title="水下理论控制模型（文章较多，研究重点）"></a>水下理论控制模型（文章较多，研究重点）</h2><p>manipulator作为一种多体动力学问题，控制方案包含集中控制与分散控制方案两类，此外还包括神经网络控制模型。</p><p>浮力、增加的质量、耗散的阻力和升力以及外部干扰（电流、波浪等），增加了非线性与不确定性因素，使得建模控制变得更加复杂。此外<code>水动力系数</code>无法估计，因为他们会随着温度、深度、盐度等变化，当人体通过液体加速时，水体产生格外的惯性，即质量附加效应</p><p>波浪、海流和潮汐导致流体加速，导致外部和运动干扰以及机械手和机器人的强烈震荡和负载，最后在机器人与机械臂之间发生强烈的运动学和动力学耦合效应</p><p>分散控制—PID</p><p>集中控制—非线性集中控制方案</p><ul><li>多层神经网络控制器</li><li>基于非回归的自适应控制器</li><li>基于滑膜控制策略和动力学模型的水下机器人鲁棒轨迹跟踪控制器等等（—后续记录）</li></ul><p>神经网络模糊控制</p><p>利用模糊增益调整在不确定性和扰动下实现自适应，神经网络用于逼近水下机械手的动力学并添加前馈，补偿输入到PD模糊控制器</p><h2 id="运动控制探讨（高级控制）"><a href="#运动控制探讨（高级控制）" class="headerlink" title="运动控制探讨（高级控制）"></a>运动控制探讨（高级控制）</h2><p>传统：水下航行器与机械臂是分开协调的，因此将整个系统视为两个独立系统。</p><p>特殊环境下的耦合需要采用高级控制方案</p><p>针对耦合动力问题进行探讨（方案细节见技术综述笔记，个人认为这里可以进行改进研究）</p><p>有一种不错的思路，控制重心而非机器人具体姿态</p><p>整体系统控制-基于鲁棒的自适应控制方案</p><p>反馈、前馈控制器（方案细节见技术综述笔记）</p><p><strong>总体而言，水下控制模型主要处理的就是由于水下特殊环境引起的干扰以及特殊环境下的运动耦合</strong></p><h2 id="运动控制与规划（路径规划与轨迹规划"><a href="#运动控制与规划（路径规划与轨迹规划" class="headerlink" title="运动控制与规划（路径规划与轨迹规划"></a>运动控制与规划（路径规划与轨迹规划</h2><p>-笛卡尔遥操作方案</p><p>这里注意一下2013年沈阳自动化所提出的六自由度水下机械臂控制策略</p><p>2018年的碰撞检测算法</p><p>触觉交互</p><p>冗余解析度</p><p>通过不同次要目标解决冗余分辨率，避免关节限制、奇异性、高关节速度，将末端执行器保持在机载摄像头视线范围 内，将阻力最小化</p><h2 id="理想与实际"><a href="#理想与实际" class="headerlink" title="理想与实际"></a>理想与实际</h2><p>大多基于关节空间设定点进行工作，但是需要位置、速度和加速度的详细信息反馈跟踪</p><p>电动具有高效率优势</p><h2 id="Force-control"><a href="#Force-control" class="headerlink" title="Force control"></a>Force control</h2><p>关于被动与主动顺应性控制、阻抗控制和混合阻抗控制，这里注意一下1996年的针对水下环境的混合力位控制的方案</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>问题：高质量的传感器与驱动器组成机器人系统，但是控制系统能力不足，可建议讲工业制造中使用的机器人手臂伺服控制只是引入水下环境。</p><p>低精度、低重复性、低控制环路频率</p><p>控制算法本身存在问题，缺乏与实际的结合与改进</p><p>这里注意下国外实验室的一个项目（细节见技术笔记）</p><p>提出了两种思路</p><ul><li>将车辆导航与定位数据用于机械手控制，补偿运动误差系统</li><li>从机械角度出发，一种稳定器（从末端执行器角度考虑）</li></ul><p>目的：简化操作</p><p>总而言之，文章一直在说一个问题，就是关于高级控制方案落地的问题，个人觉得很类似理论控制的现状，不过嘛，人人都有自己的目的想法，就这样吧。</p><h2 id="后续会补充一篇系统综述"><a href="#后续会补充一篇系统综述" class="headerlink" title="后续会补充一篇系统综述"></a>后续会补充一篇系统综述</h2><p>机器人系统-深入了解水下机器人技术、产品和应用</p><p>ROV深海采矿作业</p><p>AUV-长期运行能力、深水深处返回数据的能力</p><p>水下声学定位系统</p><p>悬停方向的AUV，悬停运动由于同时使用水平推进器和垂直推进器完成</p><p>水下滑翔机</p><p>始于军事，拓展为海上油气等等，比如海上搜索和救援、海洋学等</p><p>未来展望</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>delta_ros</title>
      <link href="/2020/09/11/delta-ros/delta-ros/"/>
      <url>/2020/09/11/delta-ros/delta-ros/</url>
      
        <content type="html"><![CDATA[<p>记录delta算法</p><p>（1）实现了Delta型机器人的正逆运动学及其速度空间变换，见DeltaRobotKinematics类<br>（2）实现了关节空间和直线轨迹的运动规划，能够设置加减速因子，见DeltaRobotMotionPlanning类<br>（3）实现了Delta机器人的位置控制和速度控制，见DeltaRobotControl类</p><p><a href="https://github.com/zhonghang1187151422/Mini-delta-robot.git">https://github.com/zhonghang1187151422/Mini-delta-robot.git</a></p><p><a href="https://github.com/manuelilg/eeduro_delta.git">https://github.com/manuelilg/eeduro_delta.git</a></p><p><a href="https://github.com/RemcoKuijpers/delta_robot_simulation.git">https://github.com/RemcoKuijpers/delta_robot_simulation.git</a></p><p><a href="https://github.com/AutoRoboCulture/delta-robot-simulation-gazebo">https://github.com/AutoRoboCulture/delta-robot-simulation-gazebo</a></p><p>关于ros2的delta运动规划</p><p><a href="https://github.com/manuelilg?tab=repositories">https://github.com/manuelilg?tab=repositories</a></p><p>学习一下</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>literature</title>
      <link href="/2020/09/03/literature/literature/"/>
      <url>/2020/09/03/literature/literature/</url>
      
        <content type="html"><![CDATA[<h1 id="复习科技文献结构内容"><a href="#复习科技文献结构内容" class="headerlink" title="复习科技文献结构内容"></a>复习科技文献结构内容</h1><p>大量阅读英文期刊还是需要短时间提取有效内容，复习一下论文规则，提提速，有点忘记了</p><p>abstract    consult    discussion   method   result</p><p>review</p><span id="more"></span><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>​    An abstract is a brief summary of the key points of a research article, thesis, review, report, proposal,<br>conference proceeding, or any in-depth analysis of a particular subject. Positioned at the beginning of a paper, the abstract is usually “the first thing that individuals read and, as such, decide whether to continue reading. It is also what is most accessed by search engines and researchers conducting their own literature reviews”</p><p>摘要分层</p><p>1.background 2.problem 3. method 4.results 5.conclusion</p><p>sense：比较通用，可以回忆一下自己写过的毕业论文，摘要部分基本就是这个结构，先介绍简要背景，提出其中要解决的问题，我们用了什么方案去解决，结果如何，得出了什么结论，最后论文结尾加展望，这里没有。</p><h2 id="Types-of-abstracts"><a href="#Types-of-abstracts" class="headerlink" title="Types of abstracts"></a>Types of abstracts</h2><p>1.information abstract</p><p>2.indicative abstract</p><p>常用于 theoretical papers    review articles  commentary articles  conference proceedings</p><p>3.extended abstract</p><p> thesis   dissertation</p><p>4.structured abstract</p><p>5.conference abstract</p><p>6.graphical abstract</p><p>7.executive summary</p><h2 id="The-Disscussion-Section"><a href="#The-Disscussion-Section" class="headerlink" title="The Disscussion Section"></a>The Disscussion Section</h2><p>difference</p><ol><li>Introduction  </li><li>The discussion section of a research paper is:<br>• To interpret the results of research<br>• To analyze and discuss the results<br>• To answer the questions proposed in the study<br>• To draw conclusions from the findings of the study</li><li>The discussion section is featured of<br>• following the results section<br>• calling attention to something not directly apparent<br>from the table, chart or graph<br>• analyzing data to support the thesis of the research<br>question<br>• relating to what is discussed in the introduction section</li></ol><p>分层</p><p>1.review of the present study</p><p>2.consolidating ofthe results</p><p>3.stating limitations and possible research directions</p><p>同样可以回忆一下，先对全文总结，其次阐述自己的实验结果，最后说一下自己项目的局限性以及未来努力方向</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><ol><li>Components of the method section<br>• Research design<br>• Materials<br>• Procedure<br>• Data collection<br>• Data analysis</li></ol><p>分层</p><p>Move 1: WHEN the study was carried out<br>Move 2: WHERE the study was carried out<br>Move 3: WHAT materials, techniques, samples, data,approaches, theoretical frameworks were used in the<br>study<br>Move 4: HOW the study was carried out<br>Move 5: WHAT procedures were used</p><p>一些特点 linguistic features</p><p>• using the third person<br>• passive voice<br>• past tense<br>• complete sentences<br>• objective<br>• concise</p><p>Method classification</p><p>1) Logical methods:<br>Inductive<br>Deductive<br>Analogical<br>Analytical</p><p>2) Empirical methods<br>Observational<br>Experimental<br>Measuring<br>statistical</p><p>3) Mathematical methods:<br>Mathematical<br>Simulative<br>Idealized<br>Hypothetical</p><p>Based on purposes<br>• Basic research<br>• Applied research<br>• Developmental research</p><p>…用的比较少，不列了</p><p>缺一部分，改天再补，回寝了～</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/25/ros-work/ros-work/"/>
      <url>/2020/08/25/ros-work/ros-work/</url>
      
        <content type="html"><![CDATA[<p>时隔一年，再次听胡老师的课，感受颇有不同，包括简要课程记录复习一下以及写写作业。</p><p>(9.26添加了一些小内容)</p><p>(10.12增加了一下go内容)</p><span id="more"></span><p>1.日常ROS史观</p><p>2.ros框架以及松耦合的分布式通信机制（日常）</p><p>3.节点-执行单元（node）</p><p>节点管理器（ros master）</p><p>Topic-异步通信机制（publisher/subscriber）</p><p>先来后到，多对多</p><p>service-同步通信机制（service/client）—-request  response</p><p>请求之后才会应答，一对多</p><p>参数（parameter）</p><p>典型字典</p><p>工作空间（workspace0</p><p>src:代码空间 build:编译空间 devel:开发空间 install: 安装空间</p><p>功能包（package）</p><p>功能包清单（package manifest  ）（包含作者信息、许可信息等，好像一直没用过这个233）</p><p>元功能包（meta packages）</p><p>action通信及机制</p><p>应用场景：比如抓取，一段时间的抓捕动作，在执行过程中需要连续的response</p><hr><p>日常启动turtle</p><hr><p>关于turtlebot</p><p>———-没有作业0.0</p><p>ros常用组件与开发</p><p>roslog</p><h2 id="ros-moveit记录："><a href="#ros-moveit记录：" class="headerlink" title="ros_moveit记录："></a>ros_moveit记录：</h2><p>manipulator</p><p>多轴机械臂6.7+各式夹具</p><p>六轴机械臂</p><hr><p>伺服电机（减速机，为了降低电机转速，从而增加电机扭矩）皮带、行星、谐波（成本减速器比较高）</p><p>机械臂本体</p><p>控制器</p><p><a href="img/arm.png">成本占比图</a></p><hr><p>智能化处理</p><p>moveit  运动学、运动规划、碰撞检测、</p><p>motion planning、manipulation、inverse kinematics</p><p>control、3dperception（3d视觉）、collsion碰撞检测</p><p>核心节点 move_group</p><p>输入输出参数</p><p>move_base 话题发布-cmdvel</p><p>用户interface</p><p>Ros moveit</p><p>自己算法可封装到plugins </p><p>Moveit 可视化配置和仿真</p><p>Planning scene点云栅格地图</p><p>Roslaunch moveit setup assistant</p><p>1.选择模型，导入urdf或者xacro，需要严格按照DH法进行建立模型，导入moveit位置姿态正常。</p><p>2.设置自碰撞检测 self collsion</p><p>虚拟关节 vitual joints 描述机械臂基础坐标，固定臂虚拟项不修改，若移动，需要对虚拟关节修改。</p><p>3.配置规划组</p><p>运动学求解算法</p><p>规划失败：模型没问题，规划时间可能太短，我好像没遇到过哎</p><p>规划组选择最为重要</p><p>4.预定义位姿  可设置初始姿态或者某些特殊姿态  使用较多，rviz规划仿真</p><p>5..设置控制器</p><p>6.作者信息</p><p>7.生成配置功能包，使用较少</p><p>Demo.launch-rviz仿真</p><p>后续工作—gazebo</p><p>Gazebo+ros+ros_control</p><p>电机闭环控制知识（待补充）</p><p>Ros控制器接口</p><p>Moveit规划得到轨迹，通过controller（follow joint trajectory封装成话题action）—serve（默认五次插补运算）—伺服电机得到指令—硬件端-机器人对上位机反馈（joint state controller）</p><p>基础编程</p><p>1.连接控制需要的规划组</p><p>2.设置目标位姿，关节空间或者笛卡尔空间</p><p>3.设置运动约束</p><p>4.使用moveit规划以到达目标的轨迹</p><p>5.修改轨迹</p><p>5.执行规划出的轨迹</p><p>约束规划</p><p>点到点关节空间规划</p><p>(plan,fraction) = arm.compute_cartesian_path(waypoints,0.01,0.0,True)</p><p>路径列表、终端步进值、最小移动值、避障规划</p><p>Fraction 0-1 小于1无法规划</p><p>直线轨迹</p><p>圆弧轨迹方法：微分</p><p>碰撞检测</p><p>直接在可视界面添加障碍物</p><p>通过代码导入</p><p>API 五核心</p><p>抓到物体 attach</p><p>Eye in hand </p><p>手眼标定（内参，外参）</p><p>物体识别与定位（）</p><p>抓取姿态分析（）</p><p>运动规划</p><p>Eye to hand</p><p>Eye in hand</p><p>关于ros：</p><p>像素坐标转换成全局空间坐标</p><p>深度学习融合</p><p>ROS-I 工业机械臂应用</p><p>工业领域分支</p><p>应用</p><h2 id="ros-slam记录"><a href="#ros-slam记录" class="headerlink" title="ros_slam记录:"></a>ros_slam记录:</h2><p>1.slam-地图构建</p><p>gmapping 激光方案</p><p>vslam</p><p>视觉方案存在问题，容易受环境光影响，工业环境常用激光，irobot使用了视觉，精度要求不高</p><p>superpoint</p><p>多检测融合，包括orb、角点检测等，鲁棒性较高</p><p>pointcloud 点云设计方案</p><p>去除噪音、降采样、移除行人、移除地面—-网格mesh化</p><p>point—-legoloam—点云算法，运算量比较小，点云图像投影</p><p>地图构建之后，定位</p><p>EKF-扩展卡尔曼滤波器</p><p>信息融合，视觉、imu惯性测量单元（测量姿态）、gps等数据源卡尔曼滤波，提高精度</p><p>平面定位-amcl</p><p>粒子分布、更新—全局分布—视觉重定位（辅助）—初始定位—定位置信度</p><p>定位-NDT/ICP 点云算法 </p><p>ndt 网格化正态分布变换</p><p>icp 迭代最近点   由轨迹确定位置</p><p>3.全局规划与局部规划</p><p>Globalcostmap</p><p>静态层、动态层、膨胀层（远离障碍物，自己加）</p><p>全局规划算法—A*/Dijkstra</p><p>目的是避障寻找最低能耗路径</p><p>人工势场法—寻找能量最低路径</p><p>地图构建-势场-膨胀-全局规划算法-跟随，进行局部规划算法</p><p>局部规划</p><p>以机器人周围构建主要激光和点云</p><p>算法-DWA（决定机器人动态效果）</p><p>​    1.采样空间/运动模型</p><p>​    2.代价函数</p><p>​    防抖，运动平滑</p><p>​    3.动态窗口仿真</p><p>3.导航 move_base</p><p>4.全地形导航-height map 三维  存在高度概念</p><p>关于moveit计算方案</p><h2 id="ros2记录（待续）"><a href="#ros2记录（待续）" class="headerlink" title="ros2记录（待续）:"></a>ros2记录（待续）:</h2><p>Rosi核心ros1</p><p>关于Ros2架构</p><p>Ros2起源，目的都是为了提高软件复用率</p><p>保密性不足，局域网下信息互通</p><p>2014年正式提出</p><p>2020.6.5 foxy fitzory</p><p>架构颠覆：ros1需要master管理，ros2使用基于DDS的discovery机制</p><p>Api重新设计：ros1基于2009.2之前 ros2重新设计了新的api，使用方法类似</p><p>编译系统升级：ros1 rosbuild、catkin ros2 ament colcon</p><h2 id="ros深度学习"><a href="#ros深度学习" class="headerlink" title="ros深度学习"></a>ros深度学习</h2><p>感知与控制</p><p>感知</p><p>物体分类 image</p><p>目标检测 object</p><p>语义分割 semantic</p><p>实例分割 instance</p><p>感知-cnn</p><p>卷积运算 </p><p>池化运算</p><p>RCNN</p><p>Mseg-语义分割</p><p>mask-rcnn感知</p><p>pointnet</p><p>2.联想GPT3</p><p>代码补全</p><p>数据集足够多，效果足够好</p><h2 id="ROS探索总结记录（体系查漏补缺）"><a href="#ROS探索总结记录（体系查漏补缺）" class="headerlink" title="ROS探索总结记录（体系查漏补缺）"></a>ROS探索总结记录（体系查漏补缺）</h2><p>package</p><p>ROS 的软件以包的方式组织起来。包包含节点、ROS 依赖库、数据套、配置文件、第三方软件、或者任何<br>其他逻辑构成。包的目标是提供一种易于使用的结构以便于软件的重复使用。总得来说,ROS 的包短小精<br>干。</p><p>stack</p><p>堆是包的集合,它提供一个完整的功能</p><p>Manifests (manifest.xml):提供关于 Package 元数据,包括它的许可信息和 Package 之间依赖关<br>系,以及语言特性信息像编译旗帜(编译优化参数)<br>。<br>Stack manifests (stack.xml):提供关于 Stack 元数据,包括它的许可信息和 Stack 之间依赖关系。</p><p>1.常见的几个</p><p>PR2 ：<a href="http://www.ros.org/wiki/Robots/PR2">http://www.ros.org/wiki/Robots/PR2</a></p><p>Turtlebot：<a href="http://www.ros.org/wiki/Robots/TurtleBot">http://www.ros.org/wiki/Robots/TurtleBot</a></p><p>Husky：<a href="http://www.ros.org/wiki/Robots/Husky">http://www.ros.org/wiki/Robots/Husky</a>  /   <a href="http://www.ros.org/wiki/Robots/Erratic">http://www.ros.org/wiki/Robots/Erratic</a></p><p>轮式移动机器人</p><p>手柄端口 ls /dev/input</p><p>机器视觉</p><p>rosrun rviz rviz</p><p>关于tf细节</p><p>(1) 监听 tf 变换</p><p>(2) 广播 tf 变换</p><p>关于无人车ros 总结</p><p>轮胎</p><p>纵向花纹： 低滚动阻力 防止侧滑，装向稳定性优异</p><p>横向花纹：出色的驱动力和制动力，强大的牵引力</p><p>纵横兼有花纹：纵纹提供向稳定性，横纹改善驱动力和制动力</p><p>关于usb问题： ls /dev/ttyUSB*</p><h2 id="ROSGO"><a href="#ROSGO" class="headerlink" title="ROSGO"></a>ROSGO</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>daliy_life</title>
      <link href="/2020/08/17/daliy-life/daliy-life/"/>
      <url>/2020/08/17/daliy-life/daliy-life/</url>
      
        <content type="html"><![CDATA[<h1 id="处事之则，日常所想"><a href="#处事之则，日常所想" class="headerlink" title="处事之则，日常所想"></a>处事之则，日常所想</h1><p>搭模型的时候，听了听电视剧琅琊榜的电台，听到景睿的台词，有点感触，为人处世就应该这样，清清爽爽，潇洒一生。</p><p>不为蝇营狗苟之事，不对他人做过分之求，一切唯心而已。</p><h4 id="“曾经因为你这么做，非常难过。可是我毕竟已经，不再是一个自以为是的孩子了。"><a href="#“曾经因为你这么做，非常难过。可是我毕竟已经，不再是一个自以为是的孩子了。" class="headerlink" title="“曾经因为你这么做，非常难过。可是我毕竟已经，不再是一个自以为是的孩子了。"></a>“曾经因为你这么做，非常难过。可是我毕竟已经，不再是一个自以为是的孩子了。</h4><h4 id="我明白了，凡是人总有取舍，你取了你认为重要的东西，舍弃了我，这只是你的选择而已。"><a href="#我明白了，凡是人总有取舍，你取了你认为重要的东西，舍弃了我，这只是你的选择而已。" class="headerlink" title="我明白了，凡是人总有取舍，你取了你认为重要的东西，舍弃了我，这只是你的选择而已。"></a>我明白了，凡是人总有取舍，你取了你认为重要的东西，舍弃了我，这只是你的选择而已。</h4><h4 id="若是我，因为没有被选择，就心生怨恨，那这世间，岂不是有太多不可原谅之处，毕竟谁也"><a href="#若是我，因为没有被选择，就心生怨恨，那这世间，岂不是有太多不可原谅之处，毕竟谁也" class="headerlink" title="若是我，因为没有被选择，就心生怨恨，那这世间，岂不是有太多不可原谅之处，毕竟谁也"></a>若是我，因为没有被选择，就心生怨恨，那这世间，岂不是有太多不可原谅之处，毕竟谁也</h4><h4 id="没有责任要以我为先，以我为重。无论我如何希望也不能强求。"><a href="#没有责任要以我为先，以我为重。无论我如何希望也不能强求。" class="headerlink" title="没有责任要以我为先，以我为重。无论我如何希望也不能强求。"></a>没有责任要以我为先，以我为重。无论我如何希望也不能强求。</h4><h4 id="我之所以这么待你，是因为我愿意，若能以此换回同样的诚心，固然可喜，若是没有，我也"><a href="#我之所以这么待你，是因为我愿意，若能以此换回同样的诚心，固然可喜，若是没有，我也" class="headerlink" title="我之所以这么待你，是因为我愿意，若能以此换回同样的诚心，固然可喜，若是没有，我也"></a>我之所以这么待你，是因为我愿意，若能以此换回同样的诚心，固然可喜，若是没有，我也</h4><h4 id="没有什么可后悔的。”"><a href="#没有什么可后悔的。”" class="headerlink" title="没有什么可后悔的。”"></a>没有什么可后悔的。”</h4>]]></content>
      
      
      <categories>
          
          <category> touch_fish </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>delta_matlab</title>
      <link href="/2020/08/13/delta-matlab/delta-matlab/"/>
      <url>/2020/08/13/delta-matlab/delta-matlab/</url>
      
        <content type="html"><![CDATA[<h1 id="Delta正逆解（matlab）"><a href="#Delta正逆解（matlab）" class="headerlink" title="Delta正逆解（matlab）"></a>Delta正逆解（matlab）</h1><p>课题里用到一部分关于delta底座的结构，所以进行了相应的理论推导及运动空间求解，工具是万能的matlab，这里记录一下。</p><p>记录内容：目前精度、推导问题、相关文献…</p><span id="more"></span><p>初步代码正逆解精度：</p><p>电机转角误差在0.1度左右，坐标误差在毫米个位数级别，感觉没有特别精确，师兄那套复杂并联都小数点后三位级别了，但是我目前想不到对算法进行优化的方式，不过先搁置吧，先去做绳驱那部分的机构，最后再回来优化。</p><p>推导来源：</p><p>正解理论依据我看的是工大03年赵杰老师的一篇期刊，应用平移几何进行简化，用向量实现对于动平台中心点运动状态的描述</p><p>（这里有个小问题，看期刊的时候，几何向量中求解垂直向量时，期刊里的公式是错的（也有可能03年就是错误公式？？？），哈哈哈，这里我换了一种平移方式，构成多面体进行解析）</p><p>逆解理论来源是16年黄师兄的硕士毕业论文，借鉴了一下他的单几何方式，组成方程组进行求解，这个方式得出的结果精度也比较高。</p><p>误差主要来源于正解，现在不知为什么，以后待解决。</p><p>以下是代码主体，参数不放了</p><p>正解：</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[Z]</span> = <span class="title">FK3</span><span class="params">(a1,a2,a3)</span></span></span><br><span class="line">R</span><br><span class="line">r</span><br><span class="line">Lac</span><br><span class="line">Lbc</span><br><span class="line">theta1 = a1*<span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">theta2 = a2*<span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">theta3 = a3*<span class="built_in">pi</span>/<span class="number">180</span>;*</span><br><span class="line"></span><br><span class="line">beta1=(<span class="number">1</span><span class="number">-1</span>)*<span class="number">2</span>*<span class="built_in">pi</span>/<span class="number">3</span>;</span><br><span class="line">beta2=(<span class="number">2</span><span class="number">-1</span>)*<span class="number">2</span>*<span class="built_in">pi</span>/<span class="number">3</span>;</span><br><span class="line">beta3=(<span class="number">3</span><span class="number">-1</span>)*<span class="number">2</span>*<span class="built_in">pi</span>/<span class="number">3</span>; </span><br><span class="line"></span><br><span class="line">OA1=R*[<span class="built_in">cos</span>(beta1);<span class="built_in">sin</span>(beta1);<span class="number">0</span>];</span><br><span class="line">OA2=R*[<span class="built_in">cos</span>(beta2);<span class="built_in">sin</span>(beta2);<span class="number">0</span>];</span><br><span class="line">OA3=R*[<span class="built_in">cos</span>(beta3);<span class="built_in">sin</span>(beta3);<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">OE1=R*[(R-r+Lac*<span class="built_in">cos</span>(theta1))*<span class="built_in">cos</span>(beta1);(R-r+Lac*<span class="built_in">cos</span>(theta1))*<span class="built_in">sin</span>(beta1);-Lac*<span class="built_in">sin</span>(theta1)];</span><br><span class="line">OE2=R*[(R-r+Lac*<span class="built_in">cos</span>(theta2))*<span class="built_in">cos</span>(beta2);(R-r+Lac*<span class="built_in">cos</span>(theta2))*<span class="built_in">sin</span>(beta2);-Lac*<span class="built_in">sin</span>(theta2)];</span><br><span class="line">OE3=R*[(R-r+Lac*<span class="built_in">cos</span>(theta3))*<span class="built_in">cos</span>(beta3);(R-r+Lac*<span class="built_in">cos</span>(theta3))*<span class="built_in">sin</span>(beta3);-Lac*<span class="built_in">sin</span>(theta3)];</span><br><span class="line">OG=<span class="number">0.5</span>*(OE1+OE2);</span><br><span class="line">E1E2=OE2-OE1;</span><br><span class="line">E2E3=OE3-OE2;</span><br><span class="line">E3E1=OE1-OE3;</span><br><span class="line">a=norm(E1E2); </span><br><span class="line">b=norm(E2E3);</span><br><span class="line">c=norm(E3E1);</span><br><span class="line"></span><br><span class="line">p=(a+b+c)/<span class="number">2</span>;</span><br><span class="line">s=<span class="built_in">sqrt</span>(p*(p-a)*(p-b)*(p-c));</span><br><span class="line"><span class="comment">%E1E2E3 </span></span><br><span class="line">d=(a*b*c)/(<span class="number">4</span>*s);</span><br><span class="line">f=(d^<span class="number">2</span><span class="number">-0.25</span>*a^<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> f&gt;=<span class="number">0</span> #这里进行筛选，开始出现复数结果还很奇怪<span class="number">233</span>，这个可以解决</span><br><span class="line">    f1=<span class="built_in">sqrt</span>(f);</span><br><span class="line">    n_GF1=<span class="built_in">cross</span>(<span class="built_in">cross</span>(E2E3,E3E1),E1E2);</span><br><span class="line">    g=norm(n_GF1);</span><br><span class="line">    n_GF = n_GF1/g;</span><br><span class="line">    GF= n_GF*f1;n_FP1=<span class="built_in">cross</span>(E1E2,E2E3);</span><br><span class="line">h=norm(n_FP1);</span><br><span class="line">n_FP=n_FP1/h;</span><br><span class="line"><span class="comment">%FP  |FP|</span></span><br><span class="line"><span class="built_in">i</span>=<span class="built_in">sqrt</span>(Lbc^<span class="number">2</span>-d^<span class="number">2</span>);</span><br><span class="line">FP = n_FP*<span class="built_in">i</span>;</span><br><span class="line">OP=<span class="number">0.5</span>*(OE1+OE2)+GF+FP;</span><br><span class="line">S=OP;</span><br><span class="line"></span><br><span class="line"> e1=[<span class="number">1</span>;<span class="number">0</span>;<span class="number">0</span>];</span><br><span class="line"> e2=[<span class="number">0</span>;<span class="number">1</span>;<span class="number">0</span>];</span><br><span class="line"> e3=[<span class="number">0</span>;<span class="number">0</span>;<span class="number">1</span>];</span><br><span class="line"> x=S'*e1;</span><br><span class="line"> y=S'*e2;</span><br><span class="line"> z=S'*e3;</span><br><span class="line">Ponit=[x,y,z]</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">disp</span>(<span class="string">'空间外'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><p>逆解代码：</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[thetas]</span> = <span class="title">IK3</span><span class="params">(x,y,z)</span></span></span><br><span class="line">R   </span><br><span class="line">r</span><br><span class="line">Lac  </span><br><span class="line">Lbc </span><br><span class="line">p=[x;y;z];</span><br><span class="line">beta1=(<span class="number">1</span><span class="number">-1</span>)*<span class="number">2</span>*<span class="built_in">pi</span>/<span class="number">3</span>;</span><br><span class="line">beta2=(<span class="number">2</span><span class="number">-1</span>)*<span class="number">2</span>*<span class="built_in">pi</span>/<span class="number">3</span>;</span><br><span class="line">beta3=(<span class="number">3</span><span class="number">-1</span>)*<span class="number">2</span>*<span class="built_in">pi</span>/<span class="number">3</span>; </span><br><span class="line"><span class="comment">%OP=OA+AC+CB+BP</span></span><br><span class="line"><span class="comment">%OP-OA+PB-Lac*n_AC=Lbc_n_CB</span></span><br><span class="line"><span class="comment">% N_AC1=[cos(beta1)cos(theta1)];</span></span><br><span class="line">r1=<span class="number">-2</span>*Lac*(<span class="built_in">cos</span>(beta1)*(x+(r-R)*<span class="built_in">cos</span>(beta1))+<span class="built_in">sin</span>(beta1)*(y+(r-R)*<span class="built_in">sin</span>(beta1)));</span><br><span class="line">r2=<span class="number">-2</span>*Lac*(<span class="built_in">cos</span>(beta2)*(x+(r-R)*<span class="built_in">cos</span>(beta2))+<span class="built_in">sin</span>(beta2)*(y+(r-R)*<span class="built_in">sin</span>(beta2)));</span><br><span class="line">r3=<span class="number">-2</span>*Lac*(<span class="built_in">cos</span>(beta3)*(x+(r-R)*<span class="built_in">cos</span>(beta3))+<span class="built_in">sin</span>(beta3)*(y+(r-R)*<span class="built_in">sin</span>(beta3)));</span><br><span class="line">s1=<span class="number">2</span>*Lac*z;</span><br><span class="line">s2=<span class="number">2</span>*Lac*z;</span><br><span class="line">s3=<span class="number">2</span>*Lac*z;</span><br><span class="line">t1=(x+(r-R)*<span class="built_in">cos</span>(beta1))^<span class="number">2</span>+(y+(r-R)*<span class="built_in">sin</span>(beta1))^<span class="number">2</span>+z^<span class="number">2</span>+Lac^<span class="number">2</span>-Lbc^<span class="number">2</span>;</span><br><span class="line">t2=(x+(r-R)*<span class="built_in">cos</span>(beta2))^<span class="number">2</span>+(y+(r-R)*<span class="built_in">sin</span>(beta2))^<span class="number">2</span>+z^<span class="number">2</span>+Lac^<span class="number">2</span>-Lbc^<span class="number">2</span>;</span><br><span class="line">t3=(x+(r-R)*<span class="built_in">cos</span>(beta3))^<span class="number">2</span>+(y+(r-R)*<span class="built_in">sin</span>(beta3))^<span class="number">2</span>+z^<span class="number">2</span>+Lac^<span class="number">2</span>-Lbc^<span class="number">2</span>;</span><br><span class="line"><span class="comment">%rcostheta+ssintheta+t=0;</span></span><br><span class="line"><span class="keyword">if</span> t1-r1==<span class="number">0</span></span><br><span class="line">    theta1=<span class="number">2</span>*<span class="built_in">atan</span>((-r1-t1)/(<span class="number">2</span>*s1));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    theta1=<span class="number">2</span>*<span class="built_in">atan</span>((-s1-<span class="built_in">sqrt</span>(r1^<span class="number">2</span>+s1^<span class="number">2</span>-t1^<span class="number">2</span>))/(t1-r1));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> t2-r2==<span class="number">0</span></span><br><span class="line">    theta2=<span class="number">2</span>*<span class="built_in">atan</span>((-r2-t2)/(<span class="number">2</span>*s2));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    theta2=<span class="number">2</span>*<span class="built_in">atan</span>((-s2-<span class="built_in">sqrt</span>(r2^<span class="number">2</span>+s2^<span class="number">2</span>-t2^<span class="number">2</span>))/(t2-r2));</span><br><span class="line"><span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">if</span> t3-r3==<span class="number">0</span></span><br><span class="line">    theta3=<span class="number">2</span>*<span class="built_in">atan</span>((-r3-t3)/(<span class="number">2</span>*s3));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    theta3=<span class="number">2</span>*<span class="built_in">atan</span>((-s3-<span class="built_in">sqrt</span>(r3^<span class="number">2</span>+s3^<span class="number">2</span>-t3^<span class="number">2</span>))/(t3-r3));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">thetas=[theta1;theta2;theta3]*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br></pre></td></tr></tbody></table></figure><p>（待优化）</p><p>关于8组逆解的问题，这套方案已经进行了排除。</p><p>奇异位置分析内容（待补充）。</p><p>接下来写雅各比速度推导，后续还会补充控制方案，伸缩机构可能会写一篇，看设计的情况了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ros_sdk</title>
      <link href="/2020/08/07/Ros-sdk/Ros-sdk/"/>
      <url>/2020/08/07/Ros-sdk/Ros-sdk/</url>
      
        <content type="html"><![CDATA[<h1 id="SDK-ros版本代码记录"><a href="#SDK-ros版本代码记录" class="headerlink" title="SDK_ros版本代码记录"></a>SDK_ros版本代码记录</h1><span id="more"></span><p>arm.yaml 参数记录</p><p>xm540_w270</p><p>  Protocol: 2<br>  Return_Delay_Time: 100   #0~254<br>  Operating_Mode: 3   #Position Control Mode<br>  Profile_Acceleration: 10  #time<br>  Profile_Velocity: 40<br>  Shutdown: 33 #00100001  Input Voltage Error/Overload Error(default) 最大负载</p><p>  Protocol: 2<br>  Return_Delay_Time: 100<br>  Operating_Mode: 3<br>  Profile_Acceleration: 10<br>  Profile_Velocity: 40</p><h1 id="Velocity-Trajectory"><a href="#Velocity-Trajectory" class="headerlink" title="Velocity_Trajectory:"></a>Velocity_Trajectory:</h1><p>  Shutdown: 33<br>  Min_Position: 625   #0~4095<br>  Max_Position: 3409<br>  Velocity_Limit: 40</p><p>这些值将位置控制模式（联合模式）的最大和最小期望位置限制在1转（0〜4,095）的范围内。<br>因此，目标位置（116）应该配置在位置限制范围内。<br>在扩展位置控制模式和基于电流的位置控制模式中不使用这些值。</p><p>  Protocol: 2</p><p>  Shadow_ID: 5  #？</p><p>  Return_Delay_Time: 100</p><p>  Operating_Mode: 3</p><p>  Profile_Acceleration: 10</p><p>  Profile_Velocity: 40</p><p>  # Velocity_Trajectory:</p><p>  Shutdown: 33</p><p>  Drive_Mode: 1</p><p>  Min_Position: 625</p><p>  Max_Position: 3409</p><p>  Velocity_Limit: 40</p><p>～～～～～～～～～～～～～～手动分割线</p><p>  Protocol: 1</p><p>  Return_Delay_Time: 100</p><p>  Min_Position: 0</p><p>  Max_Position: 1023</p><p>  Max_Torque: 200</p><p>  Torque_Limit: 200</p><p>辅助id不反馈数据包</p><p>初始位置参数表.yaml</p><h2 id="底层代码-launch文件（节点）"><a href="#底层代码-launch文件（节点）" class="headerlink" title="底层代码+launch文件（节点）"></a>底层代码+launch文件（节点）</h2><p>example</p><p>node:joint_publisher  初始化设定臂与爪的初始位置home</p><p>ping：protocol2.0协议，连接dynamixel ，同read_write</p><p>示例文件，初始化、参数设定与连接使能</p><p>src and launch</p><p>dynamixel—电机参数表，model_number ,电机型号参数以及协议选择，原代码 MX与AX</p><p>XM540-W150对应参数：270同</p><p>​        1130: {</p><p>​            “Return_Delay_Time”: ModelFlag(9, 1),</p><p>​            “Drive_Mode”: ModelFlag(10, 1),</p><p>​            “Operating_Mode”: ModelFlag(11, 1),</p><p>​            “Shadow_ID”: ModelFlag(12, 1),</p><p>​            “Velocity_Limit”: ModelFlag(44, 4),</p><p>​            “Max_Position”: ModelFlag(48, 4),</p><p>​            “Min_Position”: ModelFlag(52, 4),</p><p>​            “Shutdown”: ModelFlag(63, 1),</p><p>​            “Torque_Enabled”: ModelFlag(64, 1),</p><p>​            “Goal_Velocity”: ModelFlag(104, 4),</p><p>​            “Profile_Acceleration”: ModelFlag(108, 4),</p><p>​            “Profile_Velocity”: ModelFlag(112, 4),</p><p>​            “Goal_Position”: ModelFlag(116, 4),</p><p>​            “Moving”: ModelFlag(122, 1),</p><p>​            “Present_Current”: ModelFlag(126, 2),</p><p>​            “Present_Velocity”: ModelFlag(128, 4),</p><p>​            “Present_Position”: ModelFlag(132, 4),</p><p>​            “Present_Voltage”: ModelFlag(144, 2),</p><p>​            “Present_Temperature”: ModelFlag(146, 1),</p><p>​            “Velocity_Trajectory”: ModelFlag(136, 4)</p><p>​        },</p><p>定义两种类型电机，我的只用了了一种xm540，控制模式不同，可改</p><p>协议1.0 2.0通用</p><p>将write与read定义到了类class中 </p><p>功能：读取位置、转角并且转化数据，读取负载（使用protocol2.0），读取速度值并进行转化</p><p>current 温度值 位置？？？待修改</p><p>目标位置数值——-移动</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>movie_fish</title>
      <link href="/2020/07/30/movie-fish/movie-fish/"/>
      <url>/2020/07/30/movie-fish/movie-fish/</url>
      
        <content type="html"><![CDATA[<h1 id="观影清单来源（b站木鱼水心）"><a href="#观影清单来源（b站木鱼水心）" class="headerlink" title="观影清单来源（b站木鱼水心）"></a>观影清单来源（b站木鱼水心）</h1><span id="more"></span><h1 id="V字仇杀队"><a href="#V字仇杀队" class="headerlink" title="V字仇杀队"></a>V字仇杀队</h1><p>时隔多年再次欣赏这部电影，感觉平淡了许多，不再像当初那么愤青了。</p><p>世界上没有完美的事情，过于理性的审视一切，有很多好处，同时也失去了很多东西。</p><p>思想是不可消亡了～</p><h1 id="窃听风暴"><a href="#窃听风暴" class="headerlink" title="窃听风暴"></a>窃听风暴</h1><p>压抑的bgm，紧凑的情节</p><p>断续的信息流，完整的情感线，人类本质的体现</p><p>风云变换的历史，个人永远都是渺小的，滔天海浪的压迫感觉</p><p>百年未有之大变局，如何在历史的洪流中生活，放弃一些无用的主义思维，守好自己所相信的底线。</p><p>没有绝对的对错之分，安安静静的就好～</p><h2 id="黑客帝国三矩阵革命"><a href="#黑客帝国三矩阵革命" class="headerlink" title="黑客帝国三矩阵革命"></a>黑客帝国三矩阵革命</h2><p>画面不错</p><h2 id="银翼杀手"><a href="#银翼杀手" class="headerlink" title="银翼杀手"></a>银翼杀手</h2><p>套路一般，画面不错</p><p>I’ve seen things you people wouldn’t  believe.Attack ships on fire off the shoulder of Orion.I’ve watched  c-beams glitter in the dark near the Tannhauser Gate.All those …  moments will be lost in time, like tears…in rain.Time to die. </p><p> 我见过你们人类绝对无法置信的事物，我目睹了战船在猎户星座的端沿起火燃烧，我看着C射线在唐怀瑟之门附近的黑暗中闪耀，所有这些时刻，终将随时间消逝，一如眼泪消失在雨中。</p><p><img src="/../pictures/R.jpg" alt=""></p><h2 id="不可触碰"><a href="#不可触碰" class="headerlink" title="不可触碰"></a>不可触碰</h2><p>（跨越隔阂，消除歧视，单纯的友谊真是最美好的事情）</p><p>（如果所谓的不平等是由自己的观点创造产生的，那么当你感觉或者想认为某件事或者某个人低等时，其实你自己已经立于深渊）</p><p>（没有绝对的平等，也没有绝对的不平等，特别是偏见所创造的不平等）</p><p>（生气的时候，有一点很重要，问自己一下，有必要么？）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python100</title>
      <link href="/2020/07/28/python100/python100/"/>
      <url>/2020/07/28/python100/python100/</url>
      
        <content type="html"><![CDATA[<h1 id="复习基础"><a href="#复习基础" class="headerlink" title="复习基础"></a>复习基础</h1><p><code>可用于复习语法基础，内容包括我自己一些解法，以及思路较新奇的解法，对一些不常用的函数进行了注释和以及代码示例。</code></p><p><code>可以对比学习python2和python3的区别，深化理解</code></p><p>网站上原作者解法应用了大量表达式简化代码行数，受益良多。</p><p><code>（万恶的ros有些还是python2呀，我也太菜了QAQ）</code></p><span id="more"></span><p>1.编写一个程序，查找所有此类数字，它们可以被7整除，但不能是5的倍数（在2000和3200之间（均包括在内））。获得的数字应以逗号分隔的顺序打印在<strong>一行</strong>上。</p><p>divisible  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>, <span class="number">3201</span>):</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">7</span>==<span class="number">0</span>) <span class="keyword">and</span> (i%<span class="number">5</span>!=<span class="number">0</span>):</span><br><span class="line">        l.append(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="built_in">print</span> <span class="string">','</span>.join(l) <span class="comment">#join用法，长知识</span></span><br><span class="line"><span class="comment">#我的解法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>, <span class="number">3201</span>):</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">7</span>==<span class="number">0</span>) <span class="keyword">and</span> (i%<span class="number">5</span>!=<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">','</span>) <span class="comment">#不换行打印</span></span><br><span class="line">\b退格</span><br><span class="line"><span class="comment">#网上的</span></span><br><span class="line"><span class="built_in">print</span>(*(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>, <span class="number">3201</span>) <span class="keyword">if</span> i%<span class="number">7</span> == <span class="number">0</span> <span class="keyword">and</span> i%<span class="number">5</span> != <span class="number">0</span>), sep=<span class="string">","</span>)</span><br></pre></td></tr></tbody></table></figure><p>2.编写一个可以计算给定数字阶乘的程序，结果应以逗号分隔的顺序打印在一行上，假设向程序提供了以下输入：8然后，输出应为：40320</p><p>我的解法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x * fac(x - <span class="number">1</span>)</span><br><span class="line">x = <span class="built_in">int</span>(raw_input())</span><br><span class="line"><span class="built_in">print</span> fac(x) <span class="comment">#没啥特别的</span></span><br><span class="line"><span class="comment">#复习一下while</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">f=<span class="number">1</span>,i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=n:</span><br><span class="line">    f=f*i</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment">#复习for</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>()) </span><br><span class="line">fact = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    fact = fact * i</span><br><span class="line"><span class="built_in">print</span>(fact)</span><br><span class="line"><span class="comment">#short 0.0</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shortFact</span>(<span class="params">x</span>): <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x &lt;= <span class="number">1</span> <span class="keyword">else</span> x*shortFact(x-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(shortFact(n))</span><br><span class="line"><span class="comment">#try语句</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"Enter a number: "</span>))</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(err)</span><br><span class="line"></span><br><span class="line">org = num</span><br><span class="line">fact = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num:</span><br><span class="line">    fact = num * fact</span><br><span class="line">    num = num - <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'the factorial of <span class="subst">{org}</span> is <span class="subst">{fact}</span>'</span>)</span><br><span class="line"><span class="comment">#参数</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">acc, item</span>):</span><br><span class="line"><span class="keyword">return</span> acc*item</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(reduce(fun,<span class="built_in">range</span>(<span class="number">1</span>, num+<span class="number">1</span>), <span class="number">1</span>)) <span class="comment">#reduce(function, iterable[, initializer])蛮好的思路，一维数组陈列</span></span><br></pre></td></tr></tbody></table></figure><p>3.使用给定的整数n，编写一个程序以生成包含（i，i x i）的字典，该字典为1到n之间的整数（都包括在内）。然后程序应打印字典。假设向程序提供了以下输入：8</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">d = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    d[i] = i * i</span><br><span class="line"><span class="built_in">print</span> d</span><br><span class="line"><span class="comment">#other</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">ans = {}</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    ans[i] = i * i</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">ans={i : i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>)} <span class="comment">#silent</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"Enter a number: "</span>))</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(err)</span><br><span class="line"></span><br><span class="line">dictio = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(num+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> item == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">dictio[item] = item * item</span><br><span class="line"><span class="built_in">print</span>(dictio)</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"Number: "</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>((i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num+<span class="number">1</span>))))))</span><br></pre></td></tr></tbody></table></figure><blockquote><ul><li>[x] <strong>QAQ</strong></li></ul></blockquote><p>4.编写一个程序，该程序从控制台接受一个逗号分隔的数字序列，并生成一个列表和一个包含每个数字的元组，假设向该程序提供了以下输入：转化</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">values = <span class="built_in">input</span>()</span><br><span class="line">l = values.split(<span class="string">","</span>) <span class="comment">#str.split(str="", num=string.count(str)).</span></span><br><span class="line">t = <span class="built_in">tuple</span>(l)</span><br><span class="line"><span class="built_in">print</span> l</span><br><span class="line"><span class="built_in">print</span> t</span><br><span class="line"></span><br><span class="line">l.append(<span class="built_in">iter</span>)</span><br><span class="line"></span><br><span class="line">lis = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line">tup=<span class="built_in">tuple</span>(lis)</span><br><span class="line"><span class="built_in">print</span>(lis)</span><br><span class="line"><span class="built_in">print</span>(tup)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="built_in">input</span>(<span class="string">"Enter a series of numbers separated by a comma:"</span>).split(<span class="string">','</span>)))</span><br></pre></td></tr></tbody></table></figure><p>5.定义一个至少具有两个方法的类：getString：从控制台输入获取字符串 printString：以大写形式输出字符串。还请包括简单的测试函数来测试类方法。</p><p>提示：<br>使用init方法构造一些参数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IOstring</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_string</span>(<span class="params">self</span>):</span><br><span class="line">        self.s = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_string</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.s.upper())</span><br><span class="line"></span><br><span class="line">UP = IOstring()</span><br><span class="line">UP.get_string()</span><br><span class="line">UP.print_string()</span><br></pre></td></tr></tbody></table></figure><p>6.编写一个程序，根据给定的公式计算并打印值：</p><p>Q = [（2 <em>C </em> D）/ H]的平方根</p><p>以下是C和H的固定值：</p><p>C为50。H为30。</p><p>D是变量，其值应以逗号分隔的顺序输入到您的程序中，例如，让我们假设以下逗号分隔的输入顺序被赋予了程序：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt <span class="comment"># import specific functions as importing all using *</span></span><br><span class="line">                      <span class="comment"># is bad practice</span></span><br><span class="line"></span><br><span class="line">C,H = <span class="number">50</span>,<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">D</span>):</span><br><span class="line">    <span class="keyword">return</span> sqrt((<span class="number">2</span>*C*D)/H)</span><br><span class="line"></span><br><span class="line">D = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">','</span>)] <span class="comment"># splits in comma position and set up in list number</span></span><br><span class="line">D = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> D]   <span class="comment"># converts string to integer</span></span><br><span class="line">D = [calc(i) <span class="keyword">for</span> i <span class="keyword">in</span> D]  <span class="comment"># returns floating value by calc method for every item in D</span></span><br><span class="line">D = [<span class="built_in">round</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> D] <span class="comment"># All the floating values are rounded</span></span><br><span class="line">D = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> D]   <span class="comment"># All the integers are converted to string to be able to apply join operation</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(D))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">C,H = <span class="number">50</span>,<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">D</span>):</span><br><span class="line">    <span class="keyword">return</span> sqrt((<span class="number">2</span>*C*D)/H)</span><br><span class="line"></span><br><span class="line">D = <span class="built_in">input</span>().split(<span class="string">','</span>)                     <span class="comment"># splits in comma position and set up in list</span></span><br><span class="line">D = [<span class="built_in">str</span>(<span class="built_in">round</span>(calc(<span class="built_in">int</span>(i)))) <span class="keyword">for</span> i <span class="keyword">in</span> D]  <span class="comment"># using comprehension method. It works in order of the previous code</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(D))</span><br><span class="line">QAQAQAQAQ</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">C,H = <span class="number">50</span>,<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">D</span>):</span><br><span class="line">    <span class="keyword">return</span> sqrt((<span class="number">2</span>*C*D)/H)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join([<span class="built_in">str</span>(<span class="built_in">int</span>(calc(<span class="built_in">int</span>(i)))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">','</span>)]))</span><br><span class="line"></span><br><span class="line">QAQAQAQAQ</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> * <span class="comment"># importing all math functions</span></span><br><span class="line">C,H = <span class="number">50</span>,<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">D</span>):</span><br><span class="line">    D = <span class="built_in">int</span>(D)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(sqrt((<span class="number">2</span>*C*D)/H)))</span><br><span class="line"></span><br><span class="line">D = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line">D = <span class="built_in">list</span>(<span class="built_in">map</span>(calc,D))   <span class="comment"># applying calc function on D and storing as a list</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(D))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">C, H = <span class="number">50</span>, <span class="number">30</span></span><br><span class="line">mylist = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line"><span class="built_in">print</span>(*(<span class="built_in">round</span>(sqrt(<span class="number">2</span>*C*<span class="built_in">int</span>(D)/H)) <span class="keyword">for</span> D <span class="keyword">in</span> mylist), sep=<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">C, H = <span class="number">50</span>, <span class="number">30</span></span><br><span class="line">mylist = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line"><span class="built_in">print</span>(*(<span class="built_in">round</span>(sqrt(<span class="number">2</span>*C*<span class="built_in">int</span>(D)/H)) <span class="keyword">for</span> D <span class="keyword">in</span> mylist), sep=<span class="string">"QAQ"</span>)</span><br><span class="line"><span class="comment"># end 与sep 单字母和列表</span></span><br></pre></td></tr></tbody></table></figure><p>7._编写一个程序，该程序将X，Y两位数字作为输入并生成一个二维数组。 数组的第i行和第j列中的元素值应为i _ j。*</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">input_str = raw_input()</span><br><span class="line">dimensions = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> input_str.split(<span class="string">','</span>)]</span><br><span class="line">row_num = dimensions[<span class="number">0</span>]</span><br><span class="line">col_num = dimensions[<span class="number">1</span>]</span><br><span class="line">multilist = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(col_num)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(row_num)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(row_num):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(col_num):</span><br><span class="line">        multilist[row][col] = row * col</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> multilist</span><br><span class="line"><span class="comment">#python3</span></span><br><span class="line">x,y = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">','</span>))</span><br><span class="line">lst = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        tmp.append(i*j)</span><br><span class="line">    lst.append(tmp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment">#map(function, iterable, ...)</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>) :            <span class="comment"># 计算平方数</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])   <span class="comment"># 计算列表各个元素的平方</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 使用 lambda 匿名函数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提供了两个列表，对相同位置的列表数据进行相加</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])</span><br><span class="line">[<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">19</span>]</span><br><span class="line"></span><br><span class="line">x,y = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split(<span class="string">','</span>))</span><br><span class="line">lst = [[i*j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x)]</span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment">#单行</span></span><br></pre></td></tr></tbody></table></figure><p>8.编写一个程序，该程序接受以逗号分隔的单词序列作为输入，并在按字母顺序对它们进行排序后以逗号分隔的顺序打印这些单词。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">items = [x <span class="keyword">for</span> x <span class="keyword">in</span> raw_input().split(<span class="string">','</span>)]</span><br><span class="line">items.sort()</span><br><span class="line"><span class="built_in">print</span> <span class="string">','</span>.join(items)</span><br><span class="line"></span><br><span class="line">lst = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line">lst.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(lst))</span><br></pre></td></tr></tbody></table></figure><p>9.编写一个接受行序列作为输入并在句子中的所有字符都大写之后打印行的程序。</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lines = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = raw_input()</span><br><span class="line">    <span class="keyword">if</span> s:</span><br><span class="line">        lines.append(s.upper())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sentence <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span> sentence</span><br></pre></td></tr></tbody></table></figure><p>python3</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    x = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    lst.append(x.upper())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_input</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> s</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">str</span>.upper, user_input()):</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br></pre></td></tr></tbody></table></figure><p>4.编写一个程序，该程序接受由空格分隔的单词序列作为输入，并在删除所有重复的单词并将其按字母数字顺序排序后打印这些单词。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world and practice makes perfect and hello world again</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong><em>Then, the output should be:\</em></strong></p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">again and hello makes perfect practice world</span><br></pre></td></tr></tbody></table></figure><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">s = raw_input()</span><br><span class="line">words = [word <span class="keyword">for</span> word <span class="keyword">in</span> s.split(<span class="string">" "</span>)]</span><br><span class="line"><span class="built_in">print</span> <span class="string">" "</span>.join(<span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(words)))) <span class="comment">#set消除重复元素</span></span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line">word = <span class="built_in">input</span>().split()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word:</span><br><span class="line">    <span class="keyword">if</span> word.count(i) &gt; <span class="number">1</span>:   </span><br><span class="line">        word.remove(i)    </span><br><span class="line">word.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">" "</span>.join(word))</span><br><span class="line"><span class="comment">#集合</span></span><br><span class="line">word = <span class="built_in">input</span>().split()</span><br><span class="line">[word.remove(i) <span class="keyword">for</span> i <span class="keyword">in</span> word <span class="keyword">if</span> word.count(i) &gt; <span class="number">1</span> ]  </span><br><span class="line">word.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">" "</span>.join(word))</span><br><span class="line"></span><br><span class="line">word = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">input</span>().split()))) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">" "</span>.join(word))<span class="comment">#集合效果</span></span><br><span class="line"></span><br><span class="line">inp_string = <span class="built_in">input</span>(<span class="string">"Enter string: "</span>).split()</span><br><span class="line">out_string = []</span><br><span class="line"><span class="keyword">for</span> words <span class="keyword">in</span> inp_string:</span><br><span class="line">    <span class="keyword">if</span> words <span class="keyword">not</span> <span class="keyword">in</span> out_string:</span><br><span class="line">        out_string.append(words)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">" "</span>.join(<span class="built_in">sorted</span>(out_string)))<span class="comment">#不包含就存在</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>11.编写一个程序，该程序接受以逗号分隔的4位二进制数字序列作为输入，然后检查它们是否可被5整除。 被5整除的数字将以逗号分隔的顺序打印。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class int(x, base=10)  print(' '.join(value))</span><br></pre></td></tr></tbody></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><p>x — 字符串或数字。</p></li><li><p>base — 进制数，默认十进制。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">value = []</span><br><span class="line">items=[x <span class="keyword">for</span> x <span class="keyword">in</span> raw_input().split(<span class="string">','</span>)]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> items:</span><br><span class="line">    intp = <span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> intp % <span class="number">5</span>:</span><br><span class="line">        value.append(p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">','</span>.join(value)</span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x</span>):                       <span class="comment">#</span></span><br><span class="line">    total,pw = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="built_in">reversed</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        total+=pw * (<span class="built_in">ord</span>(i) - <span class="number">48</span>)     <span class="comment">#ord(c)十进制 reversed(seq)翻转</span></span><br><span class="line">        pw*=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> total % <span class="number">5</span></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">input</span>().split(<span class="string">","</span>)           </span><br><span class="line">lst = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> check(i) == <span class="number">0</span>:              </span><br><span class="line">        lst.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(lst))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x</span>):                  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(x,<span class="number">2</span>)%<span class="number">5</span> == <span class="number">0</span>      </span><br><span class="line">data = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">filter</span>(check,data)) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(data))</span><br><span class="line"><span class="built_in">filter</span>(function, iterable)</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line"></span><br><span class="line">    function -- 判断函数。</span><br><span class="line">    iterable -- 可迭代对象。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line"></span><br><span class="line">返回列表。</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> i:<span class="built_in">int</span>(i,<span class="number">2</span>)%<span class="number">5</span>==<span class="number">0</span>,data))    <span class="comment"># lambda is an operator that helps to write function of one line</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(data))</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line">data = [num <span class="keyword">for</span> num <span class="keyword">in</span> data <span class="keyword">if</span> <span class="built_in">int</span>(num, <span class="number">2</span>) % <span class="number">5</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">','</span>.join(data))</span><br></pre></td></tr></tbody></table></figure></li></ul><p>12.编写一个程序，查找所有介于1000和3000之间的数字（都包括在内），以使数字的每个数字均为偶数。获得的数字应以逗号分隔的顺序打印在一行上。 str</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">values = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>, <span class="number">3001</span>):</span><br><span class="line">    s = <span class="built_in">str</span>(i)  <span class="comment">#字符</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(s[<span class="number">0</span>])%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">and</span> (<span class="built_in">int</span>(s[<span class="number">1</span>])%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">and</span> (<span class="built_in">int</span>(s[<span class="number">2</span>])%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">and</span> (<span class="built_in">int</span>(s[<span class="number">3</span>])%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">        values.append(s)</span><br><span class="line"><span class="built_in">print</span> <span class="string">","</span>.join(values)</span><br><span class="line"></span><br><span class="line">lst = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>,<span class="number">3001</span>):</span><br><span class="line">    flag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">str</span>(i):          <span class="comment"># every integer number i is converted into string</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(j)%<span class="number">2</span> != <span class="number">0</span>:     <span class="comment"># ord returns ASCII value and j is every digit of i</span></span><br><span class="line">            flag = <span class="number">0</span>          <span class="comment"># flag becomes zero if any odd digit found</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        lst.append(<span class="built_in">str</span>(i))    <span class="comment"># i is stored in list as string</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(lst))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">element</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(<span class="built_in">ord</span>(i)%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> element)  </span><br><span class="line">lst = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>,<span class="number">3001</span>)]       </span><br><span class="line">lst = <span class="built_in">list</span>(<span class="built_in">filter</span>(check,lst))                  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(lst))</span><br><span class="line"></span><br><span class="line">lst = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>,<span class="number">3001</span>)]</span><br><span class="line">lst = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> i:<span class="built_in">all</span>(<span class="built_in">ord</span>(j)%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> i), lst))   <span class="comment"># using lambda to define function inside filter function</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(lst))</span><br><span class="line">******************<span class="number">888</span>**</span><br><span class="line"><span class="string">'''Solution by: nikitaMogilev</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># map() digits of each number with lambda function and check if all() of them even</span></span><br><span class="line"><span class="comment"># str(num) gives us opportunity to iterate through number by map() and join()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">','</span>.join([<span class="built_in">str</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>, <span class="number">3001</span>) <span class="keyword">if</span> <span class="built_in">all</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> num: <span class="built_in">int</span>(num) % <span class="number">2</span> == <span class="number">0</span>, <span class="built_in">str</span>(num)))]))</span><br></pre></td></tr></tbody></table></figure><p>13.编写一个接受句子并计算字母和数字数量的程序。</p><p>假设将以下输入提供给程序：</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">s = raw_input()</span><br><span class="line">d = {<span class="string">"DIGITS"</span>:<span class="number">0</span>, <span class="string">"LETTERS"</span>:<span class="number">0</span>}</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> c.isdigit(): <span class="comment">#函数</span></span><br><span class="line">        d[<span class="string">"DIGITS"</span>]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> c.isalpha():</span><br><span class="line">        d[<span class="string">"LETTERS"</span>]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"LETTERS"</span>, d[<span class="string">"LETTERS"</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"DIGITS"</span>, d[<span class="string">"DIGITS"</span>]</span><br><span class="line">python3</span><br><span class="line">word = <span class="built_in">input</span>()</span><br><span class="line">letter,digit = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="comment">#次级方案</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word:</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'a'</span>&lt;=i <span class="keyword">and</span> i&lt;=<span class="string">'z'</span>) <span class="keyword">or</span> (<span class="string">'A'</span>&lt;=i <span class="keyword">and</span> i&lt;=<span class="string">'Z'</span>):</span><br><span class="line">        letter+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'0'</span>&lt;=i <span class="keyword">and</span> i&lt;=<span class="string">'9'</span>:</span><br><span class="line">        digit+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"LETTERS {0}\nDIGITS {1}"</span>.<span class="built_in">format</span>(letter,digit))</span><br><span class="line"></span><br><span class="line">word = <span class="built_in">input</span>()</span><br><span class="line">letter, digit = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="comment">#最佳方案</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word:</span><br><span class="line">    <span class="keyword">if</span> i.isalpha(): <span class="comment"># returns True if alphabet</span></span><br><span class="line">        letter += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isnumeric(): <span class="comment"># returns True if numeric</span></span><br><span class="line">        digit += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"LETTERS <span class="subst">{letter}</span>\n<span class="subst">{digits}</span>"</span>) <span class="comment"># two different types of formating method is shown in both solution</span></span><br><span class="line"></span><br><span class="line"><span class="string">''' Solution by: popomaticbubble</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">input_string = <span class="built_in">input</span>(<span class="string">'&gt; '</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">counter = {<span class="string">"LETTERS"</span>:<span class="built_in">len</span>(re.findall(<span class="string">"[a-zA-Z]"</span>, input_string)), <span class="string">"NUMBERS"</span>:<span class="built_in">len</span>(re.findall(<span class="string">"[0-9]"</span>, input_string))}</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter)<span class="comment">#奇奇怪怪  re模块，遇到再说，忽略一哈</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: MarkisLandis</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">sen = <span class="built_in">input</span>(<span class="string">""</span>).split(<span class="string">" "</span>)</span><br><span class="line">alp, digit = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sen:</span><br><span class="line">    lst = [char <span class="keyword">for</span> char <span class="keyword">in</span> item]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">64</span> &lt; <span class="built_in">ord</span>(j) &lt; <span class="number">123</span>:</span><br><span class="line">            alp += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j.isdigit():</span><br><span class="line">            digit += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"LETTERS : <span class="subst">{alp}</span> \n DIGITS : <span class="subst">{digit}</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>14.编写一个接受句子的程序，并计算大写字母和小写字母的数量。</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = raw_input()</span><br><span class="line">d = {<span class="string">"UPPER CASE"</span>:<span class="number">0</span>, <span class="string">"LOWER CASE"</span>:<span class="number">0</span>}</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> c.isupper():</span><br><span class="line">        d[<span class="string">"UPPER CASE"</span>]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> c.islower():</span><br><span class="line">        d[<span class="string">"LOWER CASE"</span>]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"UPPER CASE"</span>, d[<span class="string">"UPPER CASE"</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">"LOWER CASE"</span>, d[<span class="string">"LOWER CASE"</span>]</span><br></pre></td></tr></tbody></table></figure><p>python3</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="built_in">input</span>()</span><br><span class="line">upper,lower = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'a'</span>&lt;=i <span class="keyword">and</span> i&lt;=<span class="string">'z'</span> :</span><br><span class="line">        lower+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'A'</span>&lt;=i <span class="keyword">and</span> i&lt;=<span class="string">'Z'</span>:</span><br><span class="line">        upper+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"UPPER CASE {0}\nLOWER CASE {1}"</span>.<span class="built_in">format</span>(upper,lower))</span><br><span class="line"></span><br><span class="line">word = <span class="built_in">input</span>()</span><br><span class="line">upper,lower = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word:</span><br><span class="line">        lower+=i.islower()</span><br><span class="line">        upper+=i.isupper()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"UPPER CASE {0}\nLOWER CASE {1}"</span>.<span class="built_in">format</span>(upper,lower))</span><br><span class="line"></span><br><span class="line">word = <span class="built_in">input</span>()</span><br><span class="line">upper = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> word <span class="keyword">if</span> i.isupper())           <span class="comment"># sum function cumulatively sum up 1's if the condition is True</span></span><br><span class="line">lower = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> word <span class="keyword">if</span> i.islower())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"UPPER CASE {0}\nLOWER CASE {1}"</span>.<span class="built_in">format</span>(upper,lower))</span><br><span class="line"></span><br><span class="line">string = <span class="built_in">input</span>(<span class="string">"Enter the sentense"</span>)</span><br><span class="line">upper = <span class="number">0</span></span><br><span class="line">lower = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> x.isupper() == <span class="literal">True</span>:</span><br><span class="line">        upper += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x.islower() == <span class="literal">True</span>:</span><br><span class="line">        lower += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"UPPER CASE: "</span>, upper)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"LOWER CASE: "</span>, lower)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>15.编写一个程序，以给定的数字作为a的值来计算a + aa + aaa + aaaa的值。</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = raw_input()</span><br><span class="line">n1 = <span class="built_in">int</span>( <span class="string">"%s"</span> % a )</span><br><span class="line">n2 = <span class="built_in">int</span>( <span class="string">"%s%s"</span> % (a,a) )</span><br><span class="line">n3 = <span class="built_in">int</span>( <span class="string">"%s%s%s"</span> % (a,a,a) )</span><br><span class="line">n4 = <span class="built_in">int</span>( <span class="string">"%s%s%s%s"</span> % (a,a,a,a) )</span><br><span class="line"><span class="built_in">print</span> n1+n2+n3+n4</span><br></pre></td></tr></tbody></table></figure><p>python3  字符与整形数字转换，灵活应用 </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line">total,tmp = <span class="number">0</span>,<span class="built_in">str</span>()        <span class="comment"># initialing an integer and empty string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    tmp+=a               <span class="comment"># concatenating 'a' to 'tmp'</span></span><br><span class="line">    total+=<span class="built_in">int</span>(tmp)      <span class="comment"># converting string type to integer type</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(total)</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line">total = <span class="built_in">int</span>(a) + <span class="built_in">int</span>(<span class="number">2</span>*a) + <span class="built_in">int</span>(<span class="number">3</span>*a) + <span class="built_in">int</span>(<span class="number">4</span>*a)  <span class="comment"># N*a=Na, for example  a="23", 2*a="2323",3*a="232323"</span></span><br><span class="line"><span class="built_in">print</span>(total)</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: ChichiLovesDonkeys</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">x = <span class="built_in">input</span>(<span class="string">'please enter a digit:'</span>)</span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: <span class="built_in">int</span>(x) + <span class="built_in">int</span>(y), [x*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)])</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: lcastrooliveira</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question_15</span>(<span class="params">string_digit</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">int</span>(string_digit * n) <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">inp = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(question_15(inp))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>16 使用列表推导对列表中的每个奇数取平方。 该列表由逗号分隔的数字序列输入。</p><p>python3</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="built_in">str</span>(<span class="built_in">int</span>(i)**<span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">','</span>) <span class="keyword">if</span> <span class="built_in">int</span>(i) % <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(lst))</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: shagun'''</span></span><br><span class="line">square odd no</span><br><span class="line"></span><br><span class="line">lst = <span class="built_in">input</span>().split(<span class="string">','</span>)   </span><br><span class="line"></span><br><span class="line">seq = []</span><br><span class="line">lst = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                i = i*i</span><br><span class="line">                seq.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seq = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> seq]   <span class="comment"># 所有整数都将转换为字符串，以便能够应用联接操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(seq))</span><br></pre></td></tr></tbody></table></figure><p>17.编写一个程序，该程序根据控制台输入的交易日志来计算银行帐户的净额。 事务日志格式如下所示：</p><p>D 100<br>w 200<br>D表示存款，W表示提款。<br>假设将以下输入提供给程序：</p><p>D 300<br>D 300<br>w 200<br>D 100<br>然后，输出应为：</p><p>500</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">netAmount = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = raw_input()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    values = s.split(<span class="string">" "</span>)</span><br><span class="line">    operation = values[<span class="number">0</span>]</span><br><span class="line">    amount = <span class="built_in">int</span>(values[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> operation==<span class="string">"D"</span>:</span><br><span class="line">        netAmount+=amount</span><br><span class="line">    <span class="keyword">elif</span> operation==<span class="string">"W"</span>:</span><br><span class="line">        netAmount-=amount</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span> netAmount</span><br></pre></td></tr></tbody></table></figure><p>python3</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:            <span class="comment"># break if the string is empty</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    cm,num = <span class="built_in">map</span>(<span class="built_in">str</span>,s)    <span class="comment"># map</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cm==<span class="string">'D'</span>:</span><br><span class="line">        total+=<span class="built_in">int</span>(num)</span><br><span class="line">    <span class="keyword">if</span> cm==<span class="string">'W'</span>:</span><br><span class="line">        total-=<span class="built_in">int</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(total)</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: leonedott'''</span></span><br><span class="line"><span class="comment">#Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</span></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  x = <span class="built_in">input</span>()</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(x)==<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  lst.append(x)</span><br><span class="line"></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">  <span class="keyword">if</span> <span class="string">'D'</span> <span class="keyword">in</span> item:</span><br><span class="line">    balance += <span class="built_in">int</span>(item.strip(<span class="string">'D '</span>))</span><br><span class="line">  <span class="keyword">if</span> <span class="string">'W'</span> <span class="keyword">in</span> item:</span><br><span class="line">    balance -= <span class="built_in">int</span>(item.strip(<span class="string">'W '</span>))</span><br><span class="line"><span class="built_in">print</span>(balance)</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: AlexanderSro'''</span></span><br><span class="line"><span class="comment">#不考虑数组逻辑问题，单纯计算，这个最简单</span></span><br><span class="line">account = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    action = <span class="built_in">input</span>(<span class="string">"Deposit/Whitdrow/Balance/Quit? D/W/B/Q: "</span>).lower()</span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">"d"</span>:</span><br><span class="line">        deposit = <span class="built_in">input</span>(<span class="string">"How much would you like to deposit? "</span>)</span><br><span class="line">        account = account + <span class="built_in">int</span>(deposit)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">"w"</span>:</span><br><span class="line">        withdrow = <span class="built_in">input</span>(<span class="string">"How much would you like to withdrow? "</span>)</span><br><span class="line">        account = account - <span class="built_in">int</span>(withdrow)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">"b"</span>:</span><br><span class="line">        <span class="built_in">print</span>(account)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        quit()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: ShalomPrinz   待查</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">lines = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">loopInput = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> loopInput == <span class="string">"done"</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">lines.append(loopInput)</span><br><span class="line"></span><br><span class="line">lst = <span class="built_in">list</span>(<span class="built_in">int</span>(i[<span class="number">2</span>:]) <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">'D'</span> <span class="keyword">else</span> -<span class="built_in">int</span>(i[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> lines)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(lst))</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: popomaticbubble </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">transactions = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    text = <span class="built_in">input</span>(<span class="string">"&gt; "</span>)</span><br><span class="line">    <span class="keyword">if</span> text:</span><br><span class="line">    text = text.strip(<span class="string">'D '</span>)</span><br><span class="line">    text = text.replace(<span class="string">'W '</span>, <span class="string">'-'</span>)</span><br><span class="line">    transactions.append(text)</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">transactions = (<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> transactions)</span><br><span class="line">balance = <span class="built_in">sum</span>(transactions)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"Balance is <span class="subst">{balance}</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: ChichiLovesDonkeys</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">money = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    trans = <span class="built_in">input</span>().split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">if</span> trans[<span class="number">0</span>] == <span class="string">'D'</span>:</span><br><span class="line">        money = money + <span class="built_in">int</span>(trans[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> trans[<span class="number">0</span>] == <span class="string">'W'</span>:</span><br><span class="line">        money = money - <span class="built_in">int</span>(trans[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">input</span>() == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f'Your current balance is: <span class="subst">{money}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure><p>18.网站要求用户输入用户名和密码进行注册。 编写程序以检查用户输入的密码是否有效。</p><p>以下是检查密码的标准：</p><p>[a-z]之间至少1个字母<br>[0-9]之间至少1个数字<br>[A-Z]之间至少1个字母<br>[$＃@]中的至少1个字符<br>交易密码的最小长度：6<br>交易密码的最大长度：12<br>您的程序应接受逗号分隔的密码序列，并将根据上述条件进行检查。 符合条件的密码将被打印，每个密码之间用逗号分隔。</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re  <span class="comment">#</span></span><br><span class="line">value = []</span><br><span class="line">items = [x <span class="keyword">for</span> x <span class="keyword">in</span> raw_input().split(<span class="string">','</span>)]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> items:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p) &lt; <span class="number">6</span> <span class="keyword">or</span> <span class="built_in">len</span>(p) &gt; <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">"[a-z]"</span>,p):<span class="comment">#分组匹配功能</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> re.search(<span class="string">"[0-9]"</span>,p):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> re.search(<span class="string">"[A-Z]"</span>,p):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> re.search(<span class="string">"[$#@]"</span>,p):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> re.search(<span class="string">"\s"</span>,p):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    value.append(p)</span><br><span class="line"><span class="built_in">print</span> <span class="string">","</span>.join(value)</span><br></pre></td></tr></tbody></table></figure><p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。</p><p>Python 自1.5版本起增加了re 模块，它提供 Perl 风格的正则表达式模式。</p><p>re 模块使 Python 语言拥有全部的正则表达式功能。 </p><p>compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。 </p><p>re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。</p><p>python3</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_low</span>(<span class="params">x</span>):                  <span class="comment"># Returns True  if the string has a lowercase</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'a'</span>&lt;=i <span class="keyword">and</span> i&lt;=<span class="string">'z'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_up</span>(<span class="params">x</span>):                   <span class="comment"># Returns True  if the string has a uppercase</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'A'</span>&lt;= i <span class="keyword">and</span> i&lt;=<span class="string">'Z'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_num</span>(<span class="params">x</span>):                  <span class="comment"># Returns True  if the string has a numeric digit</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'0'</span>&lt;=i <span class="keyword">and</span> i&lt;=<span class="string">'9'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_other</span>(<span class="params">x</span>):                <span class="comment"># Returns True if the string has any "$#@"</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'$'</span> <span class="keyword">or</span> i==<span class="string">'#'</span> <span class="keyword">or</span> i==<span class="string">'@'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line">lst = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    length = <span class="built_in">len</span>(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">6</span> &lt;= length <span class="keyword">and</span> length &lt;= <span class="number">12</span> <span class="keyword">and</span> is_low(i) <span class="keyword">and</span> is_up(i) <span class="keyword">and</span> is_num(i) <span class="keyword">and</span> is_other(i):   <span class="comment">#Checks if all the requirments are fulfilled</span></span><br><span class="line">        lst.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.(lst))</span><br><span class="line"></span><br><span class="line"><span class="comment">#要求合在一起，作为函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x</span>):</span><br><span class="line">    cnt = (<span class="number">6</span>&lt;=<span class="built_in">len</span>(x) <span class="keyword">and</span> <span class="built_in">len</span>(x)&lt;=<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">if</span> i.isupper():<span class="comment">#保证至少有一个就好</span></span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">if</span> i.islower():</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">if</span> i.isnumeric():</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'@'</span> <span class="keyword">or</span> i==<span class="string">'#'</span><span class="keyword">or</span> i==<span class="string">'$'</span>:</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> cnt == <span class="number">5</span> </span><br><span class="line">s = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line">lst = <span class="built_in">filter</span>(check,s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(lst))</span><br><span class="line"><span class="comment">#使用re模块</span></span><br><span class="line"><span class="keyword">import</span>  re</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line">lst = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    cnt+=(<span class="number">6</span>&lt;=<span class="built_in">len</span>(i) <span class="keyword">and</span> <span class="built_in">len</span>(i)&lt;=<span class="number">12</span>)</span><br><span class="line">    cnt+=<span class="built_in">bool</span>(re.search(<span class="string">"[a-z]"</span>,i))</span><br><span class="line">    cnt+=<span class="built_in">bool</span>(re.search(<span class="string">"[A-Z]"</span>,i))</span><br><span class="line">    cnt+=<span class="built_in">bool</span>(re.search(<span class="string">"[0-9]"</span>,i))</span><br><span class="line">    cnt+=<span class="built_in">bool</span>(re.search(<span class="string">"[@#$]"</span>,i))</span><br><span class="line">    <span class="keyword">if</span> cnt==<span class="number">5</span>:</span><br><span class="line">        lst.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">','</span>.split(lst))</span><br><span class="line"></span><br><span class="line"><span class="comment">#simple</span></span><br><span class="line"><span class="string">'''Solution by: pratikb0501</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">'Enter passwords: '</span>).split(<span class="string">','</span>)</span><br><span class="line">pass_pattern = re.<span class="built_in">compile</span>(<span class="string">r"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$#@]).{6,12}$"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> pass_pattern.fullmatch(i):</span><br><span class="line">        <span class="built_in">print</span>(i)  <span class="comment">#0.0.0.0.0.0.0.0再说吧</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiple</span> (patterns, string):</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> patterns:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.search(i, string):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> <span class="number">6</span> &lt;= <span class="built_in">len</span>(string) &lt;= <span class="number">12</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">x = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">"Type password: "</span>))</span><br><span class="line">patterns = [<span class="string">r"[a-z]"</span>, <span class="string">r"[A-Z]"</span>, <span class="string">r"[0-9]"</span>, <span class="string">r"[$|#|@]"</span>]</span><br><span class="line"><span class="built_in">print</span>(multiple(patterns, x))</span><br><span class="line"><span class="comment">#与普通字符相比，其他相对特殊的字符，其中可能包含转义字符，即那些，反斜杠加上对应字母，表示对应的特殊含义的，比如最常见的”\n”表示换行，”\t”表示Tab等。而如果是以r开头，那么说明后面的字符，都是普通的字符了，即如果是“\n”那么表示一个反斜杠字符，一个字母n，而不是表示换行了。</span></span><br><span class="line"><span class="comment">#以r开头的字符，常用于正则表达式，对应着re模块。</span></span><br><span class="line"><span class="comment">#r'input\n' # 非转义原生字符，经处理’\n’变成了’\‘和’n’。也就是\n表示的是两个字符，而不是换行。</span></span><br></pre></td></tr></tbody></table></figure><p>19.您需要编写一个程序来按升序对（名称，年龄，分数）元组进行排序，其中名称是字符串，年龄和分数是数字。 元组由控制台输入。 排序标准是：</p><p>1：根据名称排序<br>2：然后根据年龄排序<br>3：然后按分数排序<br>优先级是名称&gt;年龄&gt;得分。</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter, attrgetter <span class="comment">#模块</span></span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = raw_input()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    l.append(<span class="built_in">tuple</span>(s.split(<span class="string">","</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">sorted</span>(l, key=itemgetter(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">‘’‘</span><br><span class="line">operator.itemgetter函数</span><br><span class="line">operator模块提供的itemgetter函数用于获取对象的哪些维的数据，参数为一些序号。看下面的例子</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=operator.itemgetter(<span class="number">1</span>)      //定义函数b，获取对象的第<span class="number">1</span>个域的值</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(a) </span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=operator.itemgetter(<span class="number">1</span>,<span class="number">0</span>)  //定义函数b，获取对象的第<span class="number">1</span>个域和第<span class="number">0</span>个的值</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(a) </span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">要注意，operator.itemgetter函数获取的不是值，而是定义了一个函数，通过该函数作用到对象上才能获取值。</span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>函数用来排序，<span class="built_in">sorted</span>(iterable[, cmp[, key[, reverse]]])</span><br><span class="line"></span><br><span class="line">其中key的参数为一个函数或者<span class="keyword">lambda</span>函数。所以itemgetter可以用来当key的参数</span><br><span class="line"></span><br><span class="line">a = [(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">根据第二个域和第三个域进行排序</span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(students, key=operator.itemgetter(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">’‘’</span><br><span class="line"><span class="comment">#python3</span></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = <span class="built_in">input</span>().split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s[<span class="number">0</span>]:                          <span class="comment"># breaks for blank input</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    lst.append(<span class="built_in">tuple</span>(s))</span><br><span class="line"></span><br><span class="line">lst.sort(key= <span class="keyword">lambda</span> x:(x[<span class="number">0</span>],<span class="built_in">int</span>(x[<span class="number">1</span>]),<span class="built_in">int</span>(x[<span class="number">2</span>])))  <span class="comment"># here key is defined by lambda and the data is sorted by element priority 0&gt;1&gt;2 in accending order</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment">#关于lambda格式使用问题</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter, attrgetter <span class="comment">#模块</span></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    l.append(<span class="built_in">tuple</span>(s.split(<span class="string">","</span>)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">sorted</span>(l, key=itemgetter(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#关于区别问题</span></span><br><span class="line">　<span class="number">1.</span><span class="keyword">lambda</span> 函数　</span><br><span class="line"></span><br><span class="line">　　有一个User 实例序列，希望通过他们的user <span class="built_in">id</span> 属性进行排序，可提供一个以User 实例作为输入并输出对应user <span class="built_in">id</span> 值的<span class="built_in">callable</span> 对象</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">　　　　<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, user_id</span>):</span><br><span class="line">　　　　　　self.user_id = user_id</span><br><span class="line">　　　　<span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="string">'User({})'</span>.<span class="built_in">format</span>(self.user_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">def</span> <span class="title function_">sort_notcompare</span>():</span><br><span class="line">　　　　users = [User(<span class="number">23</span>), User(<span class="number">3</span>), User(<span class="number">99</span>)]</span><br><span class="line">　　　　<span class="built_in">print</span>(users)</span><br><span class="line">　　　　<span class="built_in">print</span>(<span class="built_in">sorted</span>(users, key=<span class="keyword">lambda</span> u: u.user_id))</span><br><span class="line"></span><br><span class="line">感觉 operator  attrgetter/itemgetter好一点</span><br><span class="line">‘’‘<span class="number">2.</span>operator.attrgetter()</span><br><span class="line">　　另外一种方式是使用operator.attrgetter() 来代替<span class="keyword">lambda</span> 函数：</span><br><span class="line">　　&gt;&gt;&gt; <span class="keyword">from</span> operator <span class="keyword">import</span> attrgetter</span><br><span class="line">　　&gt;&gt;&gt; <span class="built_in">sorted</span>(users, key=attrgetter(<span class="string">'user_id'</span>))</span><br><span class="line">　　[User(<span class="number">3</span>), User(<span class="number">23</span>), User(<span class="number">99</span>)]</span><br><span class="line"></span><br><span class="line">　　　　attrgetter() 函数通常会运行的快点，并且还能同时允许多个字段进行比较。</span><br><span class="line"></span><br><span class="line">　　　　如果User 实例还有一个first name 和last name 属性排序，</span><br><span class="line">　　　　&gt;&gt;&gt;by_name = <span class="built_in">sorted</span>(users, key=attrgetter(<span class="string">'last_name'</span>, <span class="string">'first_name'</span>))’‘’</span><br></pre></td></tr></tbody></table></figure><p>20.用生成器定义一个类，该生成器可以在给定范围0和n之间迭代可以被7整除的数字。</p><p>python2</p><p>python3</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''Solution by: ShalomPrinz</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyGen</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">by_seven</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">int</span>(n/<span class="number">7</span>) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">yield</span> i * <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> MyGen().by_seven( <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'Please enter a number... '</span>)) ):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">#一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</span></span><br><span class="line"><span class="comment">#yield 的好处是显而易见的，把一个函数改写为一个 generator 就获得了迭代能力，比起用类的实例保存状态来计算下一个 next() 的值，不仅代码简洁，而且执行流程异常清晰。</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: Seawolf159</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Divisible</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">by_seven</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> number % <span class="number">7</span> == <span class="number">0</span>: <span class="keyword">yield</span> number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">divisible = Divisible()</span><br><span class="line">generator = divisible.by_seven(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"Please insert a number. --&gt; "</span>)))</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> generator:</span><br><span class="line">    <span class="built_in">print</span>(number)  <span class="comment">#瞎搞</span></span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>21.机器人从原始点（0,0）开始在平面中移动。 机器人可以按照给定的步骤向上，下，左和右移动。 机器人运动的轨迹如下所示：</p><p>上5<br>下3<br>左3<br>右2<br>方向后的数字为步长。 请编写一个程序，以计算一系列移动和原始点之后与当前位置的距离。 如果距离是浮点数，则只需打印最接近的整数。 示例：如果给出以下元组作为程序的输入：</p><p>上5<br>下3<br>左3<br>右2<br>然后，程序的输出应为：2</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">pos = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = raw_input()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    movement = s.split(<span class="string">" "</span>) <span class="comment">#提取 0 1</span></span><br><span class="line">    direction = movement[<span class="number">0</span>]</span><br><span class="line">    steps = <span class="built_in">int</span>(movement[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> direction==<span class="string">"UP"</span>:</span><br><span class="line">        pos[<span class="number">0</span>]+=steps</span><br><span class="line">    <span class="keyword">elif</span> direction==<span class="string">"DOWN"</span>:</span><br><span class="line">        pos[<span class="number">0</span>]-=steps</span><br><span class="line">    <span class="keyword">elif</span> direction==<span class="string">"LEFT"</span>:</span><br><span class="line">        pos[<span class="number">1</span>]-=steps</span><br><span class="line">    <span class="keyword">elif</span> direction==<span class="string">"RIGHT"</span>:</span><br><span class="line">        pos[<span class="number">1</span>]+=steps</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">int</span>(<span class="built_in">round</span>(math.sqrt(pos[<span class="number">1</span>]**<span class="number">2</span>+pos[<span class="number">0</span>]**<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line"></span><br><span class="line">x,y = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>]==<span class="string">'UP'</span>:               </span><br><span class="line">        x-=<span class="built_in">int</span>(s[<span class="number">1</span>])                </span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>]==<span class="string">'DOWN'</span>:</span><br><span class="line">        x+=<span class="built_in">int</span>(s[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>]==<span class="string">'LEFT'</span>:</span><br><span class="line">        y-=<span class="built_in">int</span>(s[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>]==<span class="string">'RIGHT'</span>:</span><br><span class="line">        y+=<span class="built_in">int</span>(s[<span class="number">1</span>])    <span class="comment"># diference x and y</span></span><br><span class="line">        </span><br><span class="line"><span class="string">'''Solution by: pratikb0501</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">lst = []</span><br><span class="line">position = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    lst.append(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'UP'</span> <span class="keyword">in</span> i:</span><br><span class="line">        position[<span class="number">0</span>] -= <span class="built_in">int</span>(i.strip(<span class="string">'UP '</span>)) <span class="comment">#去除字符</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'DOWN'</span> <span class="keyword">in</span> i:</span><br><span class="line">        position[<span class="number">0</span>] += <span class="built_in">int</span>(i.strip(<span class="string">'DOWN '</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'LEFT'</span> <span class="keyword">in</span> i:</span><br><span class="line">        position[<span class="number">1</span>] -= <span class="built_in">int</span>(i.strip(<span class="string">'LEFT '</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'RIGHT'</span> <span class="keyword">in</span> i:</span><br><span class="line">        position[<span class="number">1</span>] += <span class="built_in">int</span>(i.strip(<span class="string">'RIGHT '</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(sqrt(position[<span class="number">1</span>] ** <span class="number">2</span> + position[<span class="number">0</span>] ** <span class="number">2</span>)))</span><br><span class="line"><span class="comment">#还是吧输入看成列表字典好一点，去除字符提取数字感觉不怎么舒服，input（）.split()</span></span><br></pre></td></tr></tbody></table></figure><p>关于类的一些小格式</p><p>22.编写程序以计算输入中单词的频率。 输出应在按字母数字排序后输出。 计算频次，还是老三样</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">freq = {}   <span class="comment"># frequency of words in text</span></span><br><span class="line">line = raw_input()</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> line.split():</span><br><span class="line">    freq[word] = freq.get(word,<span class="number">0</span>)+<span class="number">1</span>  <span class="comment">#字典dict</span></span><br><span class="line"></span><br><span class="line">words = freq.keys()</span><br><span class="line">words.sort()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"%s:%d"</span> % (w,freq[w])</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"><span class="comment">#Python 3</span></span><br><span class="line">全场最佳</span><br><span class="line">ss = <span class="built_in">input</span>().split()  <span class="comment">#ss用来计算 word用来选择key</span></span><br><span class="line">word = <span class="built_in">sorted</span>(<span class="built_in">set</span>(ss))     <span class="comment"># split words are stored and sorted as a set</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"{0}:{1}"</span>.<span class="built_in">format</span>(i,ss.count(i)))  <span class="comment">#count</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#split的第一个参数是分隔符。 如果省略第一个参数,默认把所有的空格、制表符、回车符当作分隔符,并过滤掉空串</span></span><br><span class="line">ss = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="built_in">dict</span> = {}</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ss:</span><br><span class="line">    i = <span class="built_in">dict</span>.setdefault(i,ss.count(i))    <span class="comment"># setdefault() function takes key &amp; value to set it as dictionary.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = <span class="built_in">sorted</span>(<span class="built_in">dict</span>.items())               <span class="comment"># items() function returns both key &amp; value of dictionary as a list</span></span><br><span class="line">                                          <span class="comment"># and then sorted. The sort by default occurs in order of 1st -&gt; 2nd key</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"%s:%d"</span>%(i[<span class="number">0</span>],i[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">ss = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="built_in">dict</span> = {i:ss.count(i) <span class="keyword">for</span> i <span class="keyword">in</span> ss}     <span class="comment"># sets dictionary as i-&gt; split word &amp; ss.count(i) -&gt; total occurrence of i in ss</span></span><br><span class="line"><span class="built_in">dict</span> = <span class="built_in">sorted</span>(<span class="built_in">dict</span>.items())            <span class="comment"># items() function returns both key &amp; value of dictionary as a list</span></span><br><span class="line">                                       <span class="comment"># and then sorted. The sort by default occurs in order of 1st -&gt; 2nd key</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"%s:%d"</span>%(i[<span class="number">0</span>],i[<span class="number">1</span>]))</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">ss = <span class="built_in">input</span>().split()</span><br><span class="line">ss = Counter(ss)         <span class="comment"># returns key &amp; frequency as a dictionary</span></span><br><span class="line">ss = <span class="built_in">sorted</span>(ss.items())  <span class="comment"># returns as a tuple list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ss:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"%s:%d"</span>%(i[<span class="number">0</span>],i[<span class="number">1</span>]))  <span class="comment">#调用counter模块形成字典，调用数据</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Solution by: AnjanKumarG</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">p=<span class="built_in">input</span>().split()</span><br><span class="line">pprint({i:p.count(i) <span class="keyword">for</span> i <span class="keyword">in</span> p}) <span class="comment">#同</span></span><br></pre></td></tr></tbody></table></figure><p>23.编写一种可以计算数字平方值的方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> square(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> square(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(n**<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>24.Python具有许多内置函数，如果您不知道如何使用它，则可以在线阅读文档或查找一些书籍。 但是Python对于每个内置函数都有一个内置文档函数。</p><p>请编写程序以打印一些Python内置函数文档，例如abs（），int（），raw_input（）</p><p>并添加您自己的功能的文档</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="built_in">abs</span>.__doc__</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">int</span>.__doc__</span><br><span class="line"><span class="built_in">print</span> raw_input.__doc__</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">'''Return the square value of the input number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The input number must be integer.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> square(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> square.__doc__</span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.__doc__)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">n,p</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    param n: This is any integer number</span></span><br><span class="line"><span class="string">    param p: This is power over n</span></span><br><span class="line"><span class="string">    return:  n to the power p = n^p</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n**p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>.__doc__)</span><br></pre></td></tr></tbody></table></figure><p>25.定义一个类，该类具有一个类参数并且具有相同的实例参数。</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="comment"># Define the class parameter "name"</span></span><br><span class="line">    name = <span class="string">"Person"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># self.name is the instance parameter</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">jeffrey = Person(<span class="string">"Jeffrey"</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"%s name is %s"</span> % (Person.name, jeffrey.name)</span><br><span class="line"></span><br><span class="line">nico = Person()</span><br><span class="line">nico.name = <span class="string">"Nico"</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"%s name is %s"</span> % (Person.name, nico.name)  <span class="comment">#明天跑一下，不过我觉得第一个不变</span></span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    name = <span class="string">"Car"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name = <span class="literal">None</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">honda=Car(<span class="string">"Honda"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"%s name is %s"</span>%(Car.name,honda.name))</span><br><span class="line"></span><br><span class="line">toyota=Car()</span><br><span class="line">toyota.name=<span class="string">"Toyota"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"%s name is %s"</span>%(Car.name,toyota.name)) <span class="comment">#同</span></span><br><span class="line"><span class="comment">#无参数返回，默认value</span></span><br></pre></td></tr></tbody></table></figure><p>26.定义函数计算和</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SumFunction</span>(<span class="params">number1, number2</span>):</span><br><span class="line"><span class="keyword">return</span> number1 + number2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> SumFunction(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> n1,n2 : n1 + n2      <span class="comment"># here lambda is use to define little function as sum</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment">#lambda表达式</span></span><br></pre></td></tr></tbody></table></figure><p>27.定义一个可以将整数转换为字符串并在控制台中打印的函数。</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printValue</span>(<span class="params">n</span>):</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>(n)</span><br><span class="line">printValue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">conv = <span class="keyword">lambda</span> x : <span class="built_in">str</span>(x)</span><br><span class="line">n = conv(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(n))   <span class="comment">#return type</span></span><br></pre></td></tr></tbody></table></figure><p>28.定义一个函数，该函数可以接收两个字符串形式的整数并计算它们的总和，然后在控制台中打印它</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printValue</span>(<span class="params">s1,s2</span>):</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">int</span>(s1) + <span class="built_in">int</span>(s2)</span><br><span class="line">printValue(<span class="string">"3"</span>,<span class="string">"4"</span>)</span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> s1,s2 : <span class="built_in">int</span>(s1) + <span class="built_in">int</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="string">"10"</span>,<span class="string">"45"</span>)) </span><br></pre></td></tr></tbody></table></figure><p>29.定义一个函数，该函数可以接受两个字符串作为输入并将它们连接起来，然后在控制台中将其打印出来。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printValue</span>(<span class="params">s1,s2</span>):</span><br><span class="line"><span class="built_in">print</span> s1 + s2</span><br><span class="line"></span><br><span class="line">printValue(<span class="string">"3"</span>,<span class="string">"4"</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> s1,s2 : s1 + s2</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="string">"10"</span>,<span class="string">"45"</span>))   </span><br></pre></td></tr></tbody></table></figure><p>30.定义一个可以接受两个字符串作为输入的函数，并在控制台中打印最大长度的字符串。如果两个字符串的长度相同，则该函数应逐行打印所有字符串。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printValue</span>(<span class="params">s1,s2</span>):</span><br><span class="line">len1 = <span class="built_in">len</span>(s1)</span><br><span class="line">len2 = <span class="built_in">len</span>(s2)</span><br><span class="line"><span class="keyword">if</span> len1 &gt; len2:</span><br><span class="line"><span class="built_in">print</span> s1</span><br><span class="line"><span class="keyword">elif</span> len2 &gt; len1:</span><br><span class="line"><span class="built_in">print</span> s2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> s1</span><br><span class="line"><span class="built_in">print</span> s2</span><br><span class="line"></span><br><span class="line">printValue(<span class="string">"one"</span>,<span class="string">"three"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printVal</span>(<span class="params">s1,s2</span>):</span><br><span class="line">    len1 = <span class="built_in">len</span>(s1)</span><br><span class="line">    len2 = <span class="built_in">len</span>(s2)</span><br><span class="line">    <span class="keyword">if</span> len1 &gt; len2:</span><br><span class="line">        <span class="built_in">print</span>(s1)</span><br><span class="line">    <span class="keyword">elif</span> len1 &lt; len2:</span><br><span class="line">        <span class="built_in">print</span>(s2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(s1)</span><br><span class="line">        <span class="built_in">print</span>(s2)</span><br><span class="line"></span><br><span class="line">s1,s2=<span class="built_in">input</span>().split()</span><br><span class="line">printVal(s1,s2)  <span class="comment">#函数的定义</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: yuan1z'''</span></span><br><span class="line">func = <span class="keyword">lambda</span> a,b: <span class="built_in">print</span>(<span class="built_in">max</span>((a,b),key=<span class="built_in">len</span>)) <span class="keyword">if</span> <span class="built_in">len</span>(a)!=<span class="built_in">len</span>(b) <span class="keyword">else</span> <span class="built_in">print</span>(a+<span class="string">'\n'</span>+b)</span><br></pre></td></tr></tbody></table></figure><p>31.定义一个字典，key 1-20  value square</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printDict</span>():</span><br><span class="line">d=<span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>): <span class="comment">#有个小问题，range数字范围1~20</span></span><br><span class="line">d[i]=i**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span> d</span><br><span class="line">printDict()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printDict</span>():</span><br><span class="line">    <span class="built_in">dict</span>={i:i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>)}   <span class="comment"># Using comprehension method and</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br><span class="line">printDict()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>32.同上，但是只输出key值  .keys</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printDict</span>():</span><br><span class="line">d=<span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">d[i]=i**<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="built_in">print</span> k</span><br><span class="line">printDict()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printDict</span>():</span><br><span class="line">    <span class="built_in">dict</span> = {i: i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)}</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dict</span>.keys())      <span class="comment"># print keys of a dictionary</span></span><br><span class="line"></span><br><span class="line">printDict()</span><br></pre></td></tr></tbody></table></figure><p>33.生成并输出列表，1-20 square</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">li=<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">li.append(i**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> li</span><br><span class="line"></span><br><span class="line">printList()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">    lst = [i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)] <span class="comment">#list内部</span></span><br><span class="line">    <span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">printList()</span><br></pre></td></tr></tbody></table></figure><p>34.同上，不过只输出前五value  切片，笨呐</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">li=<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">li.append(i**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> li[:<span class="number">5</span>]</span><br><span class="line">printList()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">    lst = [i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(lst[i])  <span class="comment">#   print(lst[:5]) 一句就好</span></span><br><span class="line"></span><br><span class="line">printList()</span><br></pre></td></tr></tbody></table></figure><p>35.同，输出后五 15:20</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">li=<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">li.append(i**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> li[-<span class="number">5</span>:]</span><br><span class="line">printList()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">    lst = [i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>,<span class="number">14</span>,-<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(lst[i])</span><br><span class="line"></span><br><span class="line">printList()</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: popomaticbubble</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">squares</span>(<span class="params">n</span>):</span><br><span class="line">    squares_list = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br><span class="line">    <span class="built_in">print</span>(squares_list[-<span class="number">5</span>:])</span><br><span class="line">squares(<span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><p>36.同 ，输出除前五个 5：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">li=<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">li.append(i**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> li[<span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line">printList()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">    lst = [i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(lst[i])</span><br><span class="line"></span><br><span class="line">printList()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>37.生成一个元组  1-20 square</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printTuple</span>():</span><br><span class="line">li=<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">li.append(i**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>(li)</span><br><span class="line"></span><br><span class="line">printTuple()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printTupple</span>():</span><br><span class="line">    lst = [i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">tuple</span>(lst))</span><br><span class="line"></span><br><span class="line">printTupple()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Solution by: Seawolf159</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square_of_numbers</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(square_of_numbers()) <span class="comment">#直接转换</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>38.使用给定的元组（1,2,3,4,5,6,7,8,9,10），编写一个程序以在一行中打印前一半值，并在一行中打印后一半值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">tp = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">tp1 = tp[:<span class="number">5</span>]</span><br><span class="line">tp2 = tp[<span class="number">5</span>:]</span><br><span class="line"><span class="built_in">print</span> tp1</span><br><span class="line"><span class="built_in">print</span> tp2</span><br><span class="line"></span><br><span class="line">tpl = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(tpl[i],end = <span class="string">' '</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(tpl[i],end = <span class="string">' '</span>)</span><br><span class="line">    </span><br><span class="line"> tpl = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">lst1,lst2 = [],[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">    lst1.append(tpl[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">10</span>):</span><br><span class="line">    lst2.append(tpl[i])</span><br><span class="line"><span class="built_in">print</span>(lst1)</span><br><span class="line"><span class="built_in">print</span>(lst2)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Solution by: CoffeeBrakeInc</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">lt = <span class="built_in">int</span>(<span class="built_in">len</span>(tup)/<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(tup[:lt], tup[lt:])</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Solution by: AasaiAlangaram</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">tp = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'The Original Tuple:'</span>,tp)</span><br><span class="line"></span><br><span class="line">[<span class="built_in">print</span>(<span class="string">'Splitted List :{List}'</span>.<span class="built_in">format</span>(<span class="type">List</span> = tp[x:x+<span class="number">5</span>])) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(tp),<span class="number">5</span>)] <span class="comment">#emmmm</span></span><br></pre></td></tr></tbody></table></figure><p>39.编写程序以生成并打印另一个在给定元组（1,2,3,4,5,6,7,8,9,10）中其值为偶数的元组。</p><p>转换成列表</p><h4 id="有个错误，懒得提交了"><a href="#有个错误，懒得提交了" class="headerlink" title="有个错误，懒得提交了"></a>有个错误，懒得提交了</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tp = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">li = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tp:</span><br><span class="line"><span class="keyword">if</span> tp[i]%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">li.append(tp[i])</span><br><span class="line">tp2 = <span class="built_in">tuple</span>(li)</span><br><span class="line"><span class="built_in">print</span> tp2   <span class="comment">#有错误 tp元组  直接用value i，网站代码错误</span></span><br><span class="line"></span><br><span class="line">tpl = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">tpl1 = <span class="built_in">tuple</span>(i <span class="keyword">for</span> i <span class="keyword">in</span> tpl <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(tpl1)</span><br><span class="line">---------------------------------------------------</span><br><span class="line">tpl = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">tpl1 = <span class="built_in">tuple</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x : x%<span class="number">2</span>==<span class="number">0</span>,tpl))  <span class="comment"># Lambda function returns True if found even element.                                     # Filter removes data for which function returns False</span></span><br><span class="line"><span class="built_in">print</span>(tpl1) </span><br><span class="line">-------------------------------------------------------</span><br></pre></td></tr></tbody></table></figure><p>40.编写一个接受字符串作为输入的程序，如果字符串为“是”或“是”或“是”，则打印“是”，否则打印“否”。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">s= raw_input()</span><br><span class="line"><span class="keyword">if</span> s==<span class="string">"yes"</span> <span class="keyword">or</span> s==<span class="string">"YES"</span> <span class="keyword">or</span> s==<span class="string">"Yes"</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"Yes"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"No"</span></span><br><span class="line">    </span><br><span class="line">text = <span class="built_in">input</span>(<span class="string">"Please type something. --&gt; "</span>)</span><br><span class="line"><span class="keyword">if</span> text == <span class="string">"yes"</span> <span class="keyword">or</span> text == <span class="string">"YES"</span> <span class="keyword">or</span> text == <span class="string">"Yes"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No"</span>)</span><br><span class="line">    </span><br><span class="line">Solution by: AasaiAlangaram</span><br><span class="line">    </span><br><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>(<span class="string">'Enter string:'</span>)</span><br><span class="line">output = <span class="string">''</span>.join([<span class="string">'Yes'</span> <span class="keyword">if</span> <span class="built_in">input</span> == <span class="string">'yes'</span> <span class="keyword">or</span> <span class="built_in">input</span> ==<span class="string">'YES'</span> <span class="keyword">or</span> <span class="built_in">input</span> ==<span class="string">'Yes'</span> <span class="keyword">else</span> <span class="string">'No'</span> ])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(output))</span><br><span class="line"></span><br><span class="line">Solution by: Prashanth</span><br><span class="line">    </span><br><span class="line">x = <span class="built_in">str</span>(<span class="built_in">input</span>().lower())<span class="comment"># 直接同化，根源简化，学习一哈</span></span><br><span class="line"><span class="keyword">if</span> x == <span class="string">'yes'</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Yes'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'No'</span>)</span><br><span class="line">    </span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h4 id="map与filter用法示例"><a href="#map与filter用法示例" class="headerlink" title="map与filter用法示例"></a>map与filter用法示例</h4><p>41.编写一个程序，该程序可以map（）创建一个列表，该列表的元素是[1,2,3,4,5,6,7,8,9,10]中的元素的平方。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">squaredNumbers = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, li)</span><br><span class="line"><span class="built_in">print</span> squaredNumbers</span><br><span class="line"></span><br><span class="line"><span class="comment"># No different way of code is written as the requirment is specificly mentioned in problem description</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">squaredNumbers = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, li)  <span class="comment"># returns map type object data</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(squaredNumbers))               <span class="comment"># converting the object into list</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>42.编写一个程序，该程序可以map（）和filter（）构成一个列表，该列表的元素为[1,2,3,4,5,6,7,8,9,10]中的偶数平方。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">evenNumbers = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x%<span class="number">2</span>==<span class="number">0</span>, li))</span><br><span class="line"><span class="built_in">print</span> evenNumbers</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">even</span>(<span class="params">x</span>):  <span class="comment">#2333，还是思维问题</span></span><br><span class="line">    <span class="keyword">return</span> x%<span class="number">2</span>==<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">squer</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">li = <span class="built_in">map</span>(squer,<span class="built_in">filter</span>(even,li))   <span class="comment"># first filters number by even number and the apply map() on the resultant elements</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(li))</span><br></pre></td></tr></tbody></table></figure><p>43.编写一个程序，该程序可以使用filter（）创建一个列表，该列表的元素为1到20之间的偶数（均包括在内。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">evenNumbers = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x%<span class="number">2</span>==<span class="number">0</span>, <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span> evenNumbers</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">even</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x%<span class="number">2</span>==<span class="number">0</span></span><br><span class="line">evenNumbers = <span class="built_in">filter</span>(even, <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(evenNumbers))</span><br></pre></td></tr></tbody></table></figure><p>44.编写一个程序，该程序可以map（）创建一个列表，该列表的元素为1到20之间的数字平方（均包括在内）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">squaredNumbers = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span> squaredNumbers</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line">squaredNumbers = <span class="built_in">list</span>(<span class="built_in">map</span>(sqr, <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>)))</span><br><span class="line"><span class="built_in">print</span> (squaredNumbers)</span><br></pre></td></tr></tbody></table></figure><p>45.定义一个名为American的类，该类具有一个称为printNationality的静态方法。  静态方法</p><h1 id="么得意义呀"><a href="#么得意义呀" class="headerlink" title="么得意义呀"></a>么得意义呀</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">American</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printNationality</span>():</span><br><span class="line">        <span class="built_in">print</span> <span class="string">"America"</span></span><br><span class="line"></span><br><span class="line">anAmerican = American()</span><br><span class="line">anAmerican.printNationality()</span><br><span class="line">American.printNationality()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">American</span>():</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printNationality</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"I am American"</span>)</span><br><span class="line"></span><br><span class="line">american = American()</span><br><span class="line">american.printNationality()   <span class="comment"># this will not run if @staticmethod does not decorates the function.</span></span><br><span class="line">                              <span class="comment"># Because the class has no instance.</span></span><br><span class="line">American.printNationality()   <span class="comment"># this will run even though the @staticmethod</span></span><br><span class="line">                              <span class="comment"># does not decorate printNationality()</span></span><br></pre></td></tr></tbody></table></figure><p>46.定义一个名为American的类及其子类NewYorker。</p><p>python</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">American</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewYorker</span>(<span class="title class_ inherited__">American</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">anAmerican = American()</span><br><span class="line">aNewYorker = NewYorker()</span><br><span class="line"><span class="built_in">print</span> anAmerican</span><br><span class="line"><span class="built_in">print</span> aNewYorker</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">American</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewYorker</span>(<span class="title class_ inherited__">American</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">american = American()</span><br><span class="line">newyorker = NewYorker()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(american)</span><br><span class="line"><span class="built_in">print</span>(newyorker)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在 Python3.x 的时候 pass 可以写或不写。空的</p><p>python2.x：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def function():</span><br><span class="line">    # 空函数在Python2.x版本中pass是必须的</span><br><span class="line">    pass</span><br></pre></td></tr></tbody></table></figure><p>python3.x</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def function():</span><br><span class="line">    # 在Python3.x的时候pass可以写或不写</span><br><span class="line">    pass</span><br></pre></td></tr></tbody></table></figure><p>47.定义一个名为Circle的类，该类可以由半径构造。 Circle类具有一种可以计算面积的方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, r</span>):</span><br><span class="line">        self.radius = r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.radius**<span class="number">2</span>*<span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">aCircle = Circle(<span class="number">2</span>) <span class="comment">#参数携带</span></span><br><span class="line"><span class="built_in">print</span> aCircle.area()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,r</span>):</span><br><span class="line">        self.radius = r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.1416</span>*(self.radius**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">circle = Circle(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(circle.area())</span><br></pre></td></tr></tbody></table></figure><p>48.定义一个名为Rectangle的类，该类可以通过长度和宽度来构造。 Rectangle类具有可以计算面积的方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">object</span>):  <span class="comment">#多参数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, l, w</span>):</span><br><span class="line">        self.length = l</span><br><span class="line">        self.width  = w</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length*self.width</span><br><span class="line"></span><br><span class="line">aRectangle = Rectangle(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> aRectangle.area()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,l,w</span>):</span><br><span class="line">        self.length = l</span><br><span class="line">        self.width = w</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length*self.width</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rect = Rectangle(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(rect.area())</span><br></pre></td></tr></tbody></table></figure><p>49.定义一个名为Shape的类及其子类Square。 Square类具有一个init函数，该函数以长度作为参数。 这两个类都有一个Area函数，该函数可以打印Shape的区域默认为0的形状的区域。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, l</span>):</span><br><span class="line">        Shape.__init__(self)</span><br><span class="line">        self.length = l</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length*self.length</span><br><span class="line"></span><br><span class="line">aSquare= Square(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> aSquare.area()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,length = <span class="number">0</span></span>):</span><br><span class="line">        Shape.__init__(self)</span><br><span class="line">        self.length = length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length*self.length</span><br><span class="line"></span><br><span class="line">Asqr = Square(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(Asqr.area())      <span class="comment"># prints 25 as given argument</span></span><br><span class="line"><span class="built_in">print</span>(Square().area())  <span class="comment"># prints zero as default area  设置默认值</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>50.请引发RuntimeError异常。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">'something wrong'</span>)</span><br></pre></td></tr></tbody></table></figure><p>implimantation of object oriented programming</p><p>～～～`～～～～～～～～～～～～～～</p><p><img src="/../life/R.jpg" alt="R"></p><h5 id="try-except"><a href="#try-except" class="headerlink" title="try / except"></a>try / except</h5><p>51.编写一个函数以计算5/0并使用try / except捕获异常。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">throws</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    throws()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"division by zero!"</span></span><br><span class="line"><span class="keyword">except</span> Exception, err:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'Caught an exception'</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'In finally block for cleanup'</span></span><br><span class="line">    </span><br><span class="line">python3</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    divide()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> ze:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Why on earth you are dividing a number by ZERO!!"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Any other exception"</span>)</span><br></pre></td></tr></tbody></table></figure><p>52.定义一个自定义异常类，该类将字符串消息作为属性。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">"""My own exception class</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        msg  -- explanation of the error</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg</span>):</span><br><span class="line">        self.msg = msg</span><br><span class="line"></span><br><span class="line">error = MyError(<span class="string">"something wrong"</span>)</span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">"""Exception raised for custom purpose</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        message -- explanation of the error</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, message</span>):</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">raise</span> CustomException(<span class="string">"Input is less than 10"</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &gt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">raise</span> CustomException(<span class="string">"Input is grater than 10"</span>)</span><br><span class="line"><span class="keyword">except</span> CustomException <span class="keyword">as</span> ce:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The error raised: "</span> + ce.message)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">　　xx</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">　　<span class="keyword">raise</span> CustomException(<span class="string">"自定义报错。。。。。。"</span>)</span><br></pre></td></tr></tbody></table></figure><p>53.假设我们有一些“ username@companyname.com”格式的电子邮件地址，请编写程序以打印给定电子邮件地址的用户名。 用户名和公司名都仅由字母组成。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">emailAddress = raw_input()</span><br><span class="line">pat2 = <span class="string">"(\w+)@((\w+\.)+(com))"</span></span><br><span class="line">r2 = re.<span class="keyword">match</span>(pat2,emailAddress)</span><br><span class="line"><span class="built_in">print</span> r2.group(<span class="number">1</span>)   <span class="comment">#???????????</span></span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line">email = <span class="string">"john@google.com"</span></span><br><span class="line">email = email.split(<span class="string">'@'</span>)</span><br><span class="line"><span class="built_in">print</span>(email[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#re 模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">email = <span class="string">"john@google.com elise@python.com"</span></span><br><span class="line">pattern = <span class="string">"(\w+)@\w+.com"</span>  <span class="comment">#括号</span></span><br><span class="line">ans = re.findall(pattern,email)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line">关于re </span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*- </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">'www'</span>, <span class="string">'www.runoob.com'</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">'com'</span>, <span class="string">'www.runoob.com'</span>))         <span class="comment"># 不在起始位置匹配</span></span><br><span class="line"></span><br><span class="line">findall</span><br><span class="line"></span><br><span class="line">在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</span><br><span class="line"></span><br><span class="line">注意： <span class="keyword">match</span> 和 search 是匹配一次 findall 匹配所有。</span><br><span class="line"></span><br><span class="line">语法格式为：</span><br><span class="line">findall(string[, pos[, endpos]])</span><br><span class="line">参数：</span><br><span class="line">    string : 待匹配的字符串。</span><br><span class="line">    pos : 可选参数，指定字符串的起始位置，默认为 <span class="number">0</span>。</span><br><span class="line">    endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度。</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:UTF8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r'\d+'</span>)   <span class="comment"># 查找数字</span></span><br><span class="line">result1 = pattern.findall(<span class="string">'runoob 123 google 456'</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">'run88oob123google456'</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line">[<span class="string">'123'</span>, <span class="string">'456'</span>]</span><br><span class="line">[<span class="string">'88'</span>, <span class="string">'12'</span>] <span class="comment">#0,10</span></span><br></pre></td></tr></tbody></table></figure><p>54.假设我们有一些电子邮件格式为“ username@companyname.com”，请编写程序以打印给定电子邮件地址的公司名称。 用户名和公司名都仅由字母组成。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">emailAddress = raw_input()</span><br><span class="line">pat2 = <span class="string">"(\w+)@(\w+)\.(com)"</span></span><br><span class="line">r2 = re.<span class="keyword">match</span>(pat2,emailAddress)</span><br><span class="line"><span class="built_in">print</span> r2.group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">email = <span class="string">"john@google.com elise@python.com"</span></span><br><span class="line">pattern = <span class="string">"\w+@(\w+).com"</span></span><br><span class="line">ans = re.findall(pattern,email)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></tbody></table></figure><p>55.编写一个程序，该程序接受由空格分隔的单词序列作为输入，以仅打印由数字组成的单词。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = raw_input()</span><br><span class="line"><span class="built_in">print</span> re.findall(<span class="string">"\d+"</span>,s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">email = <span class="built_in">input</span>()</span><br><span class="line">pattern = <span class="string">"\d+"</span></span><br><span class="line">ans = re.findall(pattern,email)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="comment">#我的解法，还是死脑筋呀</span></span><br><span class="line">email = <span class="built_in">input</span>().split()</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> email:</span><br><span class="line">    <span class="keyword">if</span> word.isdigit():    </span><br><span class="line">       ans.append(word)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line">email = <span class="built_in">input</span>().split()</span><br><span class="line">ans = [word <span class="keyword">for</span> word <span class="keyword">in</span> email <span class="keyword">if</span> word.isdigit()]  <span class="comment"># using list comprehension method</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></tbody></table></figure><p>56.打印一个unicode字符串“ hello world”。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unicodeString = <span class="string">u"hello world!"</span></span><br><span class="line"><span class="built_in">print</span> unicodeString</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="ASCII与unicode"><a href="#ASCII与unicode" class="headerlink" title="ASCII与unicode"></a>ASCII与unicode</h5><p>57.编写程序以读取ASCII字符串并将其转换为utf-8编码的unicode字符串。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = raw_input()</span><br><span class="line">u = unicode( s ,<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="built_in">print</span> u</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line">u = s.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="built_in">print</span>(u)</span><br></pre></td></tr></tbody></table></figure><h4 id="中文字符"><a href="#中文字符" class="headerlink" title="中文字符"></a>中文字符</h4><p>58.编写特殊注释以指示Python源代码文件为unicode。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></tbody></table></figure><p>59.编写一个程序，通过控制台（n&gt; 0）输入给定的n输入来计算1/2 + 2/3 + 3/4 + … + n / n + 1。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(raw_input())</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">sum</span> += <span class="built_in">float</span>(<span class="built_in">float</span>(i)/(i+<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">sum</span>+= i/(i+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="built_in">sum</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># round() 方法返回浮点数x的四舍五入值。</span></span><br><span class="line">语法</span><br><span class="line">以下是 <span class="built_in">round</span>() 方法的语法:</span><br><span class="line"><span class="built_in">round</span>( x [, n]  )</span><br><span class="line">参数</span><br><span class="line">    x -- 数值表达式。</span><br><span class="line">    n -- 数值表达式，表示从小数点位数。</span><br><span class="line"><span class="string">'''Solution by: lcastrooliveira</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question_59</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">round</span>(<span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x/(x+<span class="number">1</span>), <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>))), <span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">我的解法</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">n</span>):</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">i+=<span class="built_in">float</span>(n/(n+<span class="number">1</span>))</span><br><span class="line">n=n-<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n&lt;=<span class="number">0</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="built_in">int</span>(<span class="built_in">input</span>())))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>60.编写程序进行计算：</p><p>当n&gt; 0时f（n）= f（n-1）+100<br>并且f（0）= 0<br>通过控制台输入n（n&gt; 0）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f(n-<span class="number">1</span>)+<span class="number">100</span> <span class="comment">#常用</span></span><br><span class="line"></span><br><span class="line">n=<span class="built_in">int</span>(raw_input())</span><br><span class="line"><span class="built_in">print</span> f(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> f(n-<span class="number">1</span>) + <span class="number">100</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(f(n))</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: NikolayEm</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">f = <span class="keyword">lambda</span> x: f(x-<span class="number">1</span>)+<span class="number">100</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(f(n)) <span class="comment">#lambda表达式</span></span><br></pre></td></tr></tbody></table></figure><p>61.斐波那契数列是根据以下公式计算的：</p><p>如果n = 0，则f（n）= 0<br>如果n = 1，则f（n）= 1<br>如果n&gt; 1，则f（n）= f（n-1）+ f（n-2）<br>请编写一个程序，以控制台输入给定的n输入来计算f（n）的值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> f(n-<span class="number">1</span>)+f(n-<span class="number">2</span>)</span><br><span class="line">n=<span class="built_in">int</span>(raw_input())</span><br><span class="line"><span class="built_in">print</span> f(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> f(n-<span class="number">1</span>) + f(n-<span class="number">2</span>)</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(f(n))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''Solution by: NikolayEm</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#一图流...</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">f = <span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span> x == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">if</span> x == <span class="number">1</span> <span class="keyword">else</span> f(x-<span class="number">1</span>)+f(x-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">','</span>.join([<span class="built_in">str</span>(f(x)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n+<span class="number">1</span>)]))</span><br><span class="line"><span class="comment">#lambda 用到再说吧</span></span><br></pre></td></tr></tbody></table></figure><p>62.斐波那契数列是根据以下公式计算的：</p><p>如果n = 0，则f（n）= 0<br>如果n = 1，则f（n）= 1<br>如果n&gt; 1，则f（n）= f（n-1）+ f（n-2）<br>请编写一个程序，以控制台输入给定的n输入来计算f（n）的值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> f(n-<span class="number">1</span>)+f(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">n=<span class="built_in">int</span>(raw_input())</span><br><span class="line">values = [<span class="built_in">str</span>(f(x)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n+<span class="number">1</span>)]</span><br><span class="line"><span class="built_in">print</span> <span class="string">","</span>.join(values)</span><br><span class="line"></span><br><span class="line"><span class="comment">#奇奇怪怪</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        fibo[n] = n</span><br><span class="line">        <span class="keyword">return</span> fibo[n]</span><br><span class="line">    fibo[n] = f(n-<span class="number">1</span>) + f(n-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> fibo[n]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">fibo = [<span class="number">0</span>]*(n+<span class="number">1</span>)  <span class="comment"># initialize a list of size (n+1)</span></span><br><span class="line">f(n)              <span class="comment"># call once and it will set value to fibo[0-n]</span></span><br><span class="line">fibo = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> fibo]   <span class="comment"># converting integer data to string type</span></span><br><span class="line">ans = <span class="string">","</span>.join(fibo)    <span class="comment"># joining all string element of fibo with ',' character</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line">..................................</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibo</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">return</span> fibo(n-<span class="number">1</span>)+fibo(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_fiblist</span>(<span class="params">n</span>):</span><br><span class="line">    fib_list = [(<span class="built_in">str</span>(fibo(i))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">print</span>(<span class="string">","</span>.join(fib_list))</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">print_fiblist(n)</span><br><span class="line">..............................</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question_62</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    sequence = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">        c = a + b</span><br><span class="line">        sequence.append(c)</span><br><span class="line">        a = b</span><br><span class="line">        b = c</span><br><span class="line">    <span class="keyword">return</span> sequence</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(question_62(<span class="number">10</span>))</span><br></pre></td></tr></tbody></table></figure><p>63.当控制台输入n时，请使用生成器编写一个程序，以逗号分隔的形式打印0到n之间的偶数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">EvenGenerator</span>(<span class="params">n</span>):</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;=n:</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">yield</span> i</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">n=<span class="built_in">int</span>(raw_input())</span><br><span class="line">values = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> EvenGenerator(n):</span><br><span class="line">    values.append(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">","</span>.join(values)</span><br><span class="line"><span class="comment">#复杂，直接遍历感觉好一点呀</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n+<span class="number">1</span>, <span class="number">2</span>): <span class="comment">#好一点，我想着判断%，好处是不用else了，elif</span></span><br><span class="line">  <span class="keyword">if</span> i &lt; n - <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(i, end = <span class="string">','</span> )</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>64.当控制台输入n时，请使用生成器编写一个程序，以逗号分隔的形式打印可以在0和n之间被5和7整除的数字。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">NumGenerator</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">7</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">yield</span> i</span><br><span class="line">n=<span class="built_in">int</span>(raw_input())</span><br><span class="line">values = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> NumGenerator(n):</span><br><span class="line">    values.append(<span class="built_in">str</span>(i))</span><br><span class="line"><span class="built_in">print</span> <span class="string">","</span>.join(values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">35</span> == <span class="number">0</span>:    <span class="comment"># 5*7 = 35, if a number is divisible by a &amp; b then it is also divisible by a*b</span></span><br><span class="line">            <span class="keyword">yield</span> i</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">resp = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> generate(n)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">","</span>.join(resp))</span><br></pre></td></tr></tbody></table></figure><h4 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h4><p>65.请编写assert语句以验证列表[2,4,6,8]中的每个数字都是偶数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    <span class="keyword">assert</span> i%<span class="number">2</span>==<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">data = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">assert</span> i%<span class="number">2</span> == <span class="number">0</span>, <span class="string">"{} is not an even number"</span>.<span class="built_in">format</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。</p><p>断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况，例如我们的代码只能在 Linux 系统下运行，可以先判断当前系统是否符合条件。</p><h4 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h4><p>66.请编写一个从控制台接受基本数学表达式的程序，并打印评估结果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">expression = raw_input()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">eval</span>(expression)</span><br><span class="line"><span class="comment">#eval() 函数用来执行一个字符串表达式，并返回表达式的值。</span></span><br><span class="line">expression = <span class="built_in">input</span>()</span><br><span class="line">ans = <span class="built_in">eval</span>(expression)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></tbody></table></figure><p>67.请编写一个二进制binary搜索功能，该功能可以搜索已排序列表中的项目。 该函数应返回列表中要搜索的元素的索引。 我肯定直接遍历了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin_search</span>(<span class="params">li, element</span>):</span><br><span class="line">    bottom = <span class="number">0</span></span><br><span class="line">    top = <span class="built_in">len</span>(li)-<span class="number">1</span></span><br><span class="line">    index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> top&gt;=bottom <span class="keyword">and</span> index==-<span class="number">1</span>:</span><br><span class="line">        mid = <span class="built_in">int</span>(math.floor((top+bottom)/<span class="number">2.0</span>))</span><br><span class="line">        <span class="keyword">if</span> li[mid]==element:</span><br><span class="line">            index = mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid]&gt;element:</span><br><span class="line">            top = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bottom = mid+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line">li=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">222</span>]</span><br><span class="line"><span class="built_in">print</span> bin_search(li,<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span> bin_search(li,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">lst, item</span>):</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="built_in">len</span>(lst) - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = <span class="built_in">round</span>((low + high) / <span class="number">2</span>) <span class="comment">#四舍五入</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> lst[mid] == item:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> lst[mid] &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,]</span><br><span class="line"><span class="built_in">print</span>(binary_search(lst, <span class="number">9</span>))  </span><br><span class="line"><span class="comment">#二分法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search_Ascending</span>(<span class="params">array, target</span>):</span><br><span class="line">    lower = <span class="number">0</span></span><br><span class="line">    upper = <span class="built_in">len</span>(array)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Array Length:'</span>,upper)</span><br><span class="line">    <span class="keyword">while</span> lower &lt; upper:</span><br><span class="line">        x = (lower + upper) // <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Middle Value:'</span>,x)</span><br><span class="line">        value = array[x]</span><br><span class="line">        <span class="keyword">if</span> target == value:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">elif</span> target &gt; value:</span><br><span class="line">            lower = x</span><br><span class="line">        <span class="keyword">elif</span> target &lt; value:</span><br><span class="line">            upper = x</span><br><span class="line">Array = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">73</span>,<span class="number">78</span>,<span class="number">82</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">99</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'The Value Found at Index:'</span>,binary_search_Ascending(Array, <span class="number">82</span>))</span><br><span class="line">～～～～～～～`～～～～～～～～～～～～～～～</span><br><span class="line">idx = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bs</span>(<span class="params">num,num_list</span>):</span><br><span class="line">    <span class="keyword">global</span> idx</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(num_list) == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num_list[<span class="number">0</span>] == num:</span><br><span class="line">            <span class="keyword">return</span> idx</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"No exit in the list"</span></span><br><span class="line">    <span class="keyword">elif</span> num <span class="keyword">in</span> num_list[:<span class="built_in">len</span>(num_list)//<span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">return</span> bs(num,num_list[:<span class="built_in">len</span>(num_list)//<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        idx += <span class="built_in">len</span>(num_list)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> bs(num,num_list[<span class="built_in">len</span>(num_list)//<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(bs(<span class="number">66</span>,[<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">73</span>,<span class="number">78</span>,<span class="number">82</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">100</span>]))</span><br></pre></td></tr></tbody></table></figure><p>68.请使用Python模块生成一个随机浮点，其值在10到100之间。</p><p><strong>uniform()</strong> 方法将随机生成下一个实数，它在 [x, y] 范围内。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span> random.random()*<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">rand_num = random.uniform(<span class="number">10</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(rand_num)</span><br></pre></td></tr></tbody></table></figure><p>69.请使用Python模块生成一个随机浮点，其值在5到95之间。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span> random.random()*<span class="number">100</span>-<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">rand_num = random.uniform(<span class="number">5</span>,<span class="number">95</span>)</span><br><span class="line"><span class="built_in">print</span>(rand_num)</span><br></pre></td></tr></tbody></table></figure><h4 id="random-choice"><a href="#random-choice" class="headerlink" title="random choice"></a>random choice</h4><p>70.使用random.choice（）从列表中随机元素。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span> random.choice([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">resp = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(random.choice(resp))</span><br></pre></td></tr></tbody></table></figure><p>71.请编写一个程序以输出一个随机数，使用随机模块和列表推导，该随机数可被5和7整除，介于10和150之间（包括10和150）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span> random.choice([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">151</span>) <span class="keyword">if</span> i%<span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">7</span>==<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">resp = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">151</span>) <span class="keyword">if</span> i % <span class="number">35</span> == <span class="number">0</span> ]</span><br><span class="line"><span class="built_in">print</span>(random.choice(resp))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>72.请编写程序以生成包含5个随机数（介于100和200之间）的列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span> random.sample(<span class="built_in">range</span>(<span class="number">100</span>,<span class="number">201</span>), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">resp = random.sample(<span class="built_in">range</span>(<span class="number">100</span>,<span class="number">201</span>),<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(resp)</span><br><span class="line"></span><br><span class="line">sample(序列a，n)</span><br><span class="line"></span><br><span class="line">功能：从序列a中随机抽取n个元素，并将n个元素生以<span class="built_in">list</span>形式返回。</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> randint, sample</span><br><span class="line">    date = [randint(<span class="number">10</span>,<span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    c = sample(date, <span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    <span class="comment"># 输出：[12, 17, 10, 12, 17]</span></span><br></pre></td></tr></tbody></table></figure><p>73.请编写一个程序以随机生成一个列表，该列表包含100至200之间（含100和200）的5个偶数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span> random.sample([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">201</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>], <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">resp = random.sample(<span class="built_in">range</span>(<span class="number">100</span>,<span class="number">201</span>,<span class="number">2</span>),<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(resp)</span><br></pre></td></tr></tbody></table></figure><p>74.请编写一个程序以随机生成一个包含5个数字的列表，这些数字可被5和7整除（介于1和1000之间）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span> random.sample([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1001</span>) <span class="keyword">if</span> i%<span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> i%<span class="number">7</span>==<span class="number">0</span>], <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1001</span>) <span class="keyword">if</span> i%<span class="number">35</span> == <span class="number">0</span>]</span><br><span class="line">resp = random.sample(lst,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(resp)</span><br></pre></td></tr></tbody></table></figure><p>75.请编写一个程序以随机打印7到15之间的一个整数。\</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span> random.randrange(<span class="number">7</span>,<span class="number">16</span>)</span><br></pre></td></tr></tbody></table></figure><p>76.请编写一个程序来压缩和解压缩字符串“ hello world！hello world！hello world！hello world！”。</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line">s = <span class="string">'hello world!hello world!hello world!hello world!'</span></span><br><span class="line">t = zlib.compress(s)</span><br><span class="line"><span class="built_in">print</span> t</span><br><span class="line"><span class="built_in">print</span> zlib.decompress(t)</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: anas1434 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">s = <span class="string">'hello world!hello world!hello world!hello world!'</span></span><br><span class="line"><span class="comment"># In Python 3 zlib.compress() accepts only DataType &lt;bytes&gt;</span></span><br><span class="line">y = <span class="built_in">bytes</span>(s, <span class="string">'utf-8'</span>)</span><br><span class="line">x = zlib.compress(y)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(zlib.decompress(x))</span><br></pre></td></tr></tbody></table></figure><h4 id="程序运行时间"><a href="#程序运行时间" class="headerlink" title="程序运行时间"></a>程序运行时间</h4><p>77.请编写程序以打印执行“ 1 + 1”的运行时间100次。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line">t = Timer(<span class="string">"for i in range(100):1+1"</span>)</span><br><span class="line"><span class="built_in">print</span> t.timeit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">before = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    x = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">after = time.time()</span><br><span class="line">execution_time = after - before</span><br><span class="line"><span class="built_in">print</span>(execution_time)</span><br></pre></td></tr></tbody></table></figure><h4 id="shuffle随机洗牌"><a href="#shuffle随机洗牌" class="headerlink" title="shuffle随机洗牌"></a>shuffle随机洗牌</h4><p>78.请编写一个程序以随机播放并打印列表[3,6,7,8]。</p><p>python2</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line">li = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">shuffle(li)</span><br><span class="line"><span class="built_in">print</span> li</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">lst = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">random.shuffle(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># shuffle with a chosen seed</span></span><br><span class="line">lst = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">seed = <span class="number">7</span></span><br><span class="line">random.Random(seed).shuffle(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></tbody></table></figure><p>79.请编写一个程序以生成所有句子，其中主语位于[“ I”，“ You”]中，动词位于[“ Play”，“ Love”]中，而宾语位于[“ Hockey”，“ Football”]中。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">subjects=[<span class="string">"I"</span>, <span class="string">"You"</span>]</span><br><span class="line">verbs=[<span class="string">"Play"</span>, <span class="string">"Love"</span>]</span><br><span class="line">objects=[<span class="string">"Hockey"</span>,<span class="string">"Football"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(subjects)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(verbs)):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(objects)):</span><br><span class="line">            sentence = <span class="string">"%s %s %s."</span> % (subjects[i], verbs[j], objects[k])</span><br><span class="line">            <span class="built_in">print</span> sentence</span><br><span class="line">                    </span><br><span class="line">subjects=[<span class="string">"I"</span>, <span class="string">"You"</span>]</span><br><span class="line">verbs=[<span class="string">"Play"</span>, <span class="string">"Love"</span>]</span><br><span class="line">objects=[<span class="string">"Hockey"</span>,<span class="string">"Football"</span>]</span><br><span class="line"><span class="keyword">for</span> sub <span class="keyword">in</span> subjects:</span><br><span class="line">    <span class="keyword">for</span> verb <span class="keyword">in</span> verbs:</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> objects:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"{} {} {}"</span>.<span class="built_in">format</span>(sub,verb,obj))</span><br><span class="line">            </span><br><span class="line"><span class="string">'''Solution by: popomaticbubble</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">subject = [<span class="string">"I"</span>, <span class="string">"You"</span>]</span><br><span class="line">verb = [<span class="string">"Play"</span>, <span class="string">"Love"</span>]</span><br><span class="line">objects = [<span class="string">"Hockey"</span>,<span class="string">"Football"</span>]</span><br><span class="line"></span><br><span class="line">sentence = [subject, verb, objects]</span><br><span class="line">n = <span class="built_in">list</span>(itertools.product(*sentence))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> n: </span><br><span class="line">    <span class="built_in">print</span>(i)            </span><br></pre></td></tr></tbody></table></figure><h4 id="3-1-product-迭代工具product"><a href="#3-1-product-迭代工具product" class="headerlink" title="3.1 product  迭代工具product"></a>3.1 product  迭代工具product</h4><p>相当于 嵌套的for</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">‘’‘</span><br><span class="line">排列组合迭代器 product 嵌套的<span class="keyword">for</span></span><br><span class="line">’‘’</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> product([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]):</span><br><span class="line"><span class="built_in">print</span>(i,j）</span><br><span class="line">      </span><br><span class="line">product 用于求多个可迭代对象的笛卡尔积(Cartesian Product)，它跟嵌套的 <span class="keyword">for</span> 循环等价.即:</span><br><span class="line">product(A, B) 和 ((x,y) <span class="keyword">for</span> x <span class="keyword">in</span> A <span class="keyword">for</span> y <span class="keyword">in</span> B)的效果是一样的。</span><br><span class="line"></span><br><span class="line">使用形式如下：</span><br><span class="line"></span><br><span class="line">itertools.product(*iterables, repeat=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">iterables 是可迭代对象, repeat指定 iterable 重复几次,即:</span><br><span class="line"></span><br><span class="line">product(A,repeat=<span class="number">3</span>)等价于product(A,A,A)      </span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="string">'''Solution by: lcastrooliveira</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">question_79</span>():</span><br><span class="line">    subject = [<span class="string">"I"</span>, <span class="string">"You"</span>]</span><br><span class="line">    verb = [<span class="string">"Play"</span>, <span class="string">"Love"</span>]  <span class="comment">#product </span></span><br><span class="line">    <span class="built_in">object</span> = [<span class="string">"Hockey"</span>, <span class="string">"Football"</span>]</span><br><span class="line">    prod = [p <span class="keyword">for</span> p <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">2</span>), repeat=<span class="number">3</span>)]  <span class="comment">#product 排列组合三次</span></span><br><span class="line">    <span class="keyword">for</span> combination <span class="keyword">in</span> prod:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'<span class="subst">{subject[combination[<span class="number">0</span>]]}</span> <span class="subst">{verb[combination[<span class="number">1</span>]]}</span> <span class="subst">{<span class="built_in">object</span>[combination[<span class="number">2</span>]]}</span>'</span>)</span><br></pre></td></tr></tbody></table></figure><p>80.请删除[5,6,77,45,22,12,24]中的偶数后编写程序以打印列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">My solution</span><br><span class="line">lst=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">77</span>,<span class="number">45</span>,<span class="number">22</span>,<span class="number">12</span>,<span class="number">24</span>]</span><br><span class="line">ls=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">ls.append(i)</span><br><span class="line"><span class="built_in">print</span>(ls)</span><br><span class="line"></span><br><span class="line">li = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">77</span>,<span class="number">45</span>,<span class="number">22</span>,<span class="number">12</span>,<span class="number">24</span>] <span class="comment"># 列表内部运算</span></span><br><span class="line">li = [x <span class="keyword">for</span> x <span class="keyword">in</span> li <span class="keyword">if</span> x%<span class="number">2</span>!=<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> li</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isEven</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n%<span class="number">2</span>!=<span class="number">0</span></span><br><span class="line">li = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">77</span>,<span class="number">45</span>,<span class="number">22</span>,<span class="number">12</span>,<span class="number">24</span>]</span><br><span class="line">lst = <span class="built_in">list</span>(<span class="built_in">filter</span>(isEven,li))  <span class="comment">#filter操作</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">li = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">77</span>,<span class="number">45</span>,<span class="number">22</span>,<span class="number">12</span>,<span class="number">24</span>]</span><br><span class="line">lst = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> n:n%<span class="number">2</span>!=<span class="number">0</span>,li))</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>81.通过使用列表理解，请编写一个程序以删除[12,24,35,70,88,120,155]中被5和7整除的数字，然后打印列表。</p><p>没啥不同</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [x <span class="keyword">for</span> x <span class="keyword">in</span> li <span class="keyword">if</span> x%<span class="number">5</span>!=<span class="number">0</span> <span class="keyword">and</span> x%<span class="number">7</span>!=<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> li</span><br><span class="line"></span><br><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [x <span class="keyword">for</span> x <span class="keyword">in</span> li <span class="keyword">if</span> x % <span class="number">35</span>!=<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></tbody></table></figure><p>82.通过使用列表理解，请编写一个程序来删除[12,24,35,70,88,120,155]中的第0、2、4、6个数字，然后打印列表。</p><p>我的常用解法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst=[<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>):</span><br><span class="line">lst.remove(lst[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [x <span class="keyword">for</span> (i,x) <span class="keyword">in</span> <span class="built_in">enumerate</span>(li) <span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span> <span class="keyword">and</span> i &lt;= <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span> li</span><br><span class="line"></span><br><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [li[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)) <span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span> <span class="keyword">and</span> i &lt;= <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: popomaticbubble</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orig_lst = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">indices = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">new_list = [i <span class="keyword">for</span> (j, i) <span class="keyword">in</span> <span class="built_in">enumerate</span>(orig_lst) <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> indices]<span class="comment"># enumerate</span></span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br></pre></td></tr></tbody></table></figure><p>83.通过使用列表理解，请编写一个程序来删除[12,24,35,70,88,120,155]中的第2至4个数字，然后打印列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">lst=[<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line"></span><br><span class="line">lst.remove(lst[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment">#考虑数组删除之后变序问题</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [x <span class="keyword">for</span> (i,x) <span class="keyword">in</span> <span class="built_in">enumerate</span>(li) <span class="keyword">if</span> i&lt;<span class="number">3</span> <span class="keyword">or</span> <span class="number">4</span>&lt;i]</span><br><span class="line"><span class="built_in">print</span> li</span><br><span class="line"></span><br><span class="line"><span class="comment">#to be written</span></span><br><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [li[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)) <span class="keyword">if</span> i &lt; <span class="number">3</span> <span class="keyword">or</span> i &gt; <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: popomaticbubble</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orig_list = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">new_list = [i <span class="keyword">for</span> (j, i) <span class="keyword">in</span> <span class="built_in">enumerate</span>(orig_list) <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)]</span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="array-关于数组"><a href="#array-关于数组" class="headerlink" title="array 关于数组"></a>array 关于数组</h4><p>84.通过使用列表理解，请编写一个程序，生成一个3 <em> 5 </em> 8 3D数组，每个元素为0。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array = [[ [<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span> array</span><br></pre></td></tr></tbody></table></figure><p>85.通过使用列表理解，请编写一个程序以删除[12,24,35,70,88,120,155]中的第0、4、5个数字，然后打印列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [x <span class="keyword">for</span> (i,x) <span class="keyword">in</span> <span class="built_in">enumerate</span>(li) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span> li</span><br><span class="line"></span><br><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [li[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: pratikb0501</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">li = [<span class="number">12</span>, <span class="number">24</span>, <span class="number">35</span>, <span class="number">70</span>, <span class="number">88</span>, <span class="number">120</span>, <span class="number">155</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(li) <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">4</span> <span class="keyword">and</span> i != <span class="number">5</span>))</span><br><span class="line"><span class="comment">#输出语句计算</span></span><br></pre></td></tr></tbody></table></figure><p>86.通过使用列表理解，请在删除[12,24,35,24,88,120,155]中的值24之后编写程序以打印列表。remove</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [x <span class="keyword">for</span> x <span class="keyword">in</span> li <span class="keyword">if</span> x!=<span class="number">24</span>]</span><br><span class="line"><span class="built_in">print</span> li</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li.remove(<span class="number">24</span>)  <span class="comment"># this will remove only the first occurrence of 24</span></span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></tbody></table></figure><p>87.用两个给定的列表[1,3,6,78,35,55]和[12,24,35,24,88,120,155]，编写一个程序来制作一个列表，其元素是上述给定列表的交集。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">set1=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">78</span>,<span class="number">35</span>,<span class="number">55</span>])</span><br><span class="line">set2=<span class="built_in">set</span>([<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>])</span><br><span class="line">set1 &amp;= set2 <span class="comment"># &amp;</span></span><br><span class="line">li=<span class="built_in">list</span>(set1)</span><br><span class="line"><span class="built_in">print</span> li</span><br><span class="line"><span class="comment">#多种用法</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">78</span>,<span class="number">35</span>,<span class="number">55</span>]</span><br><span class="line">list2 = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">set1= <span class="built_in">set</span>(list1)</span><br><span class="line">set2= <span class="built_in">set</span>(list2)</span><br><span class="line">intersection = set1 &amp; set2</span><br><span class="line"><span class="built_in">print</span>(intersection)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">78</span>,<span class="number">35</span>,<span class="number">55</span>]</span><br><span class="line">list2 = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">set1= <span class="built_in">set</span>(list1)</span><br><span class="line">set2= <span class="built_in">set</span>(list2)</span><br><span class="line">intersection = <span class="built_in">set</span>.intersection(set1,set2)</span><br><span class="line"><span class="built_in">print</span>(intersection)</span><br></pre></td></tr></tbody></table></figure><p>88.使用给定的列表[12,24,35,24,88,120,155,88,120,155]，编写一个程序，在删除所有保留原始顺序的重复值之后，打印此列表。（可以直接set的其实，不过无序了，这主人有点笨）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">removeDuplicate</span>(<span class="params"> li </span>):</span><br><span class="line">    newli=[]</span><br><span class="line">    seen = <span class="built_in">set</span>()  </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            seen.add( item )  <span class="comment">#add() 方法用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作语法</span></span><br><span class="line">            newli.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newli</span><br><span class="line">li=[<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line"><span class="built_in">print</span> removeDuplicate(li)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    <span class="keyword">if</span> li.count(i) &gt; <span class="number">1</span>:<span class="comment">#可以</span></span><br><span class="line">        li.remove(i)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">removeDuplicate</span>(<span class="params"> li </span>):</span><br><span class="line">    seen = {}  <span class="comment"># dictionary</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            seen[item] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">li = [<span class="number">12</span>, <span class="number">24</span>, <span class="number">35</span>, <span class="number">24</span>, <span class="number">88</span>, <span class="number">120</span>, <span class="number">155</span>, <span class="number">88</span>, <span class="number">120</span>, <span class="number">155</span>]</span><br><span class="line">ans = <span class="built_in">list</span>(removeDuplicate(li))</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></tbody></table></figure><p>89.定义一个类Person及其两个子类：Male和Female。 所有类都有一个方法“ getGender”，可以为“男”类打印“男”，为“女”打印“女”。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGender</span>(<span class="params"> self </span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Unknown"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Male</span>( <span class="title class_ inherited__">Person</span> ):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGender</span>(<span class="params"> self </span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Male"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Female</span>( <span class="title class_ inherited__">Person</span> ):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGender</span>(<span class="params"> self </span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Female"</span></span><br><span class="line"></span><br><span class="line">aMale = Male()</span><br><span class="line">aFemale= Female()</span><br><span class="line"><span class="built_in">print</span> aMale.getGender()</span><br><span class="line"><span class="built_in">print</span> aFemale.getGender()</span><br><span class="line"></span><br><span class="line"><span class="string">'''Solution by: popomaticbubble</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):  <span class="comment">#参数传递问题</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.gender = <span class="string">"unknown"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGender</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">print</span>(self.gender)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Male</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.gender = <span class="string">"Male"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Female</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.gender = <span class="string">"Female"</span></span><br><span class="line">sharon = Female()</span><br><span class="line">doug = Male()</span><br><span class="line">sharon.getGender()</span><br><span class="line">doug.getGender()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>90.请编写一个程序，该程序对控制台输入的字符串中的每个字符的数量进行计数和打印。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">dic = {}</span><br><span class="line">s=raw_input()</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> s:</span><br><span class="line">    dic[s] = dic.get(s,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'\n'</span>.join([<span class="string">'%s,%s'</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> dic.items()])</span><br><span class="line"></span><br><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line">    cnt = s.count(letter)</span><br><span class="line">    <span class="keyword">if</span> cnt &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"{},{}"</span>.<span class="built_in">format</span>(letter,cnt))</span><br><span class="line">        </span><br><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">'a'</span>),<span class="built_in">ord</span>(<span class="string">'z'</span>)+<span class="number">1</span>):    <span class="comment"># ord() gets the ascii value of a char</span></span><br><span class="line">    letter = <span class="built_in">chr</span>(letter)                     <span class="comment"># chr() gets the char of an ascii value</span></span><br><span class="line">    cnt = s.count(letter)</span><br><span class="line">    <span class="keyword">if</span> cnt &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"{},{}"</span>.<span class="built_in">format</span>(letter,cnt))</span><br><span class="line">        </span><br><span class="line"> <span class="comment">#都为了防止重复，其实可以借用set，我的解法如下</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(s))):                       </span><br><span class="line">    cnt = s.count(letter)</span><br><span class="line">    <span class="keyword">if</span> cnt &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"{},{}"</span>.<span class="built_in">format</span>(letter,cnt))</span><br></pre></td></tr></tbody></table></figure><p>91.请编写一个程序，该程序从控制台接受一个字符串，然后以相反的顺序打印它。…太简单了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=raw_input()</span><br><span class="line">s = s[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span> s <span class="comment">#切片</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line">s = <span class="string">''</span>.join(<span class="built_in">reversed</span>(s))<span class="comment">#函数</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>92.请编写一个程序，该程序从控制台接受一个字符串，并打印具有偶数索引的字符.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s=raw_input()</span><br><span class="line">s = s[::<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span> s</span><br><span class="line"></span><br><span class="line">s = <span class="string">"H1e2l3l4o5w6o7r8l9d"</span></span><br><span class="line">s = [ s[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)) <span class="keyword">if</span> i%<span class="number">2</span> ==<span class="number">0</span> ]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span>.join(s))</span><br><span class="line"></span><br><span class="line">s = <span class="string">"H1e2l3l4o5w6o7r8l9d"</span></span><br><span class="line">ns =<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        ns+=s[i]</span><br><span class="line"><span class="built_in">print</span>(ns)</span><br></pre></td></tr></tbody></table></figure><h4 id="排列组合问题-itertools"><a href="#排列组合问题-itertools" class="headerlink" title="排列组合问题 itertools"></a>排列组合问题 itertools</h4><p>93.请编写一个程序，打印所有[1,2,3]的排列</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>(itertools.permutations([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></tbody></table></figure><p>94.编写一个程序解决经典的中国古代难题：我们在农场的鸡和兔中数出35头和94腿。 我们有几只兔子和几只鸡？</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">numheads,numlegs</span>):</span><br><span class="line">    ns=<span class="string">'No solutions!'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numheads+<span class="number">1</span>):</span><br><span class="line">        j=numheads-i</span><br><span class="line">        <span class="keyword">if</span> <span class="number">2</span>*i+<span class="number">4</span>*j==numlegs:</span><br><span class="line">            <span class="keyword">return</span> i,j</span><br><span class="line">    <span class="keyword">return</span> ns,ns</span><br><span class="line"></span><br><span class="line">numheads=<span class="number">35</span></span><br><span class="line">numlegs=<span class="number">94</span></span><br><span class="line">solutions=solve(numheads,numlegs)</span><br><span class="line"><span class="built_in">print</span> solutions</span><br></pre></td></tr></tbody></table></figure><p>95.根据您在大学运动日的参与者得分表，您需要找到亚军得分。 您得到分数。 将它们存储在列表中，并找到第二名的分数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">arr = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">arr = <span class="built_in">list</span>(<span class="built_in">set</span>(arr))</span><br><span class="line">arr.sort()</span><br><span class="line"><span class="built_in">print</span>(arr[-<span class="number">2</span>])  <span class="comment">#消除同分并且sort</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Solution by: mishrasunny-coder</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"Enter num: "</span>))</span><br><span class="line">L = []</span><br><span class="line"><span class="comment"># 只是读取输入数组方式不同，判断类似</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    L.append(num)</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"Enter another: "</span>))</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">L1 = <span class="built_in">list</span>(<span class="built_in">set</span>(L[:]))</span><br><span class="line">L2 = <span class="built_in">sorted</span>(L1)</span><br><span class="line"><span class="built_in">print</span>(L2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'The runner up is <span class="subst">{L2[-<span class="number">2</span>]}</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#去掉大的，第二变成最大，一般般，不如直接remove最大的233</span></span><br><span class="line"><span class="string">'''Solution by: KailashS3 </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">scores = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">' '</span>)))</span><br><span class="line">winner = <span class="built_in">max</span>(scores)</span><br><span class="line">lst = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(scores) != num:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'length of score is greater than input given'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> score <span class="keyword">in</span> scores:</span><br><span class="line"><span class="keyword">if</span> winner &gt; score:</span><br><span class="line">    lst.append(score)</span><br><span class="line"></span><br><span class="line">runnerup = <span class="built_in">max</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(runnerup)</span><br></pre></td></tr></tbody></table></figure><p>96.给您一个字符串S和宽度W。您的任务是将字符串包装成一段宽度。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"><span class="comment">#导入函数，而没过</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">string, max_width</span>):</span><br><span class="line">    string = textwrap.wrap(string,max_width)</span><br><span class="line">    string = <span class="string">"\n"</span>.join(string)</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    string, max_width = <span class="built_in">input</span>(), <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    result = wrap(string, max_width)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    </span><br><span class="line"><span class="string">'''Solution by: mishrasunny-coder</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line">string = <span class="built_in">input</span>()</span><br><span class="line">width = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(textwrap.fill(string,width))</span><br><span class="line"></span><br><span class="line"><span class="string">'''solution by  : Prashanth</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> wrap</span><br><span class="line">x = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">': '</span>))</span><br><span class="line">w = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">z = <span class="built_in">list</span>(wrap(x, w))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> z:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">#用个常规的</span></span><br><span class="line">string = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">l=[]</span><br><span class="line">width = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">while</span> true:</span><br><span class="line">    <span class="built_in">print</span>(string[:width],end=<span class="string">''</span>)</span><br><span class="line">    string.remove(string[:width])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(string)&lt;=<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(string)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#我的常规解法</span></span><br><span class="line">string = <span class="built_in">input</span>()  <span class="comment">#注意split用法，小心错误分割</span></span><br><span class="line">string=<span class="built_in">list</span>(string)</span><br><span class="line">l=[]</span><br><span class="line">width = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span>.join(string[:width]),end=<span class="string">' \n'</span>) <span class="comment">#去除列表，进行输出   注意一下seq</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string[:width]:</span><br><span class="line">string.remove(i)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(string)&lt;=<span class="number">3</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span>.join((string)))</span><br><span class="line"><span class="keyword">break</span>    </span><br></pre></td></tr></tbody></table></figure><p>97.给您一个整数N。您的任务是打印一个大小为N的字母rangoli。（Rangoli是一种基于图案创建的印度民间艺术形式。）整合一下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_rangoli</span>(<span class="params">size</span>):</span><br><span class="line">    n = size</span><br><span class="line">    alph = string.ascii_lowercase</span><br><span class="line">    width = <span class="number">4</span> * n - <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        left = <span class="string">'-'</span>.join(alph[n - i - <span class="number">1</span>:n])</span><br><span class="line">        mid = left[-<span class="number">1</span>:<span class="number">0</span>:-<span class="number">1</span>] + left</span><br><span class="line">        final = mid.center(width, <span class="string">'-'</span>)</span><br><span class="line">        ans.append(final)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ans) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ans[n - <span class="number">2</span>::-<span class="number">1</span>]:</span><br><span class="line">            ans.append(i)</span><br><span class="line">    ans = <span class="string">'\n'</span>.join(ans)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    print_rangoli(n)</span><br></pre></td></tr></tbody></table></figure><h4 id="查询时间"><a href="#查询时间" class="headerlink" title="查询时间"></a>查询时间</h4><p>98.您有个约会。 您的任务是查找当天的星期几。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line">month, day, year = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">dayId = calendar.weekday(year, month, day)</span><br><span class="line"><span class="built_in">print</span>(calendar.day_name[dayId].lower())</span><br></pre></td></tr></tbody></table></figure><p>99.给定2组整数M和N，按升序打印它们的对称差。 术语“对称差”表示存在于M或N中但不存在于两者中的那些值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    set1 = <span class="built_in">set</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    set2 = <span class="built_in">set</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">    ans = <span class="built_in">list</span>(set1 ^ set2)</span><br><span class="line">    ans.sort()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><h4 id="python-集合运算"><a href="#python-集合运算" class="headerlink" title="python 集合运算"></a>python 集合运算</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在对集合做运算时，不会影响原来的集合，而是返回一个运算结果</span></span><br><span class="line"><span class="comment"># 创建两个集合</span></span><br><span class="line">s = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>}</span><br><span class="line">s2 = {<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; 交集运算</span></span><br><span class="line">result = s &amp; s2 <span class="comment"># {3, 4, 5}</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># | 并集运算</span></span><br><span class="line">result = s | s2 <span class="comment"># {1,2,3,4,5,6,7}</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 差集</span></span><br><span class="line">result = s - s2 <span class="comment"># {1, 2}</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ 异或集 获取只在一个集合中出现的元素</span></span><br><span class="line">result = s ^ s2 <span class="comment"># {1, 2, 6, 7}</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;= 检查一个集合是否是另一个集合的子集</span></span><br><span class="line"><span class="comment"># 如果a集合中的元素全部都在b集合中出现，那么a集合就是b集合的子集，b集合是a集合超集</span></span><br><span class="line">a = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>}</span><br><span class="line">b = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>}</span><br><span class="line"></span><br><span class="line">result = a &lt;= b <span class="comment"># True</span></span><br><span class="line">result = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>} &lt;= {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>} <span class="comment"># True</span></span><br><span class="line">result = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>} &lt;= {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>} <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt; 检查一个集合是否是另一个集合的真子集</span></span><br><span class="line"><span class="comment"># 如果超集b中含有子集a中所有元素，并且b中还有a中没有的元素，则b就是a的真超集，a是b的真子集</span></span><br><span class="line">result = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>} &lt; {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>} <span class="comment"># False</span></span><br><span class="line">result = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>} &lt; {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>} <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;= 检查一个集合是否是另一个的超集</span></span><br><span class="line"><span class="comment"># &gt; 检查一个集合是否是另一个的真超集</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'result ='</span>,result)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dynamixelros</title>
      <link href="/2020/07/28/dynamixelros/dynamixelros/"/>
      <url>/2020/07/28/dynamixelros/dynamixelros/</url>
      
        <content type="html"><![CDATA[<h1 id="Dynamixel-workbench"><a href="#Dynamixel-workbench" class="headerlink" title="Dynamixel_workbench"></a>Dynamixel_workbench</h1><p>目的：解析一下workbench包以及dynamixel_motor包，复习语法以及ros基础</p><span id="more"></span><p>dynamixel_workbench </p><p>0.dynamixel_workbench </p><p>package.xml</p><p>workbench 用于ros开发</p><p>1.controllers  查询电机属性</p><p>2.operators 控制电机</p><p>3.toolbox 库</p><h2 id="dynamixel-motor-python"><a href="#dynamixel-motor-python" class="headerlink" title="dynamixel_motor(python)"></a>dynamixel_motor(python)</h2><p>该软件包包含一个可配置的节点，服务和一个生成器脚本，用于启动，停止和重新启动一个或多个控制器插件。 为常见的Dynamixel电机接头定义了可重复使用的控制器类型。 可以为每个关节设置速度和扭矩。 此python软件包可由更特定的机器人控制器使用，并且所有可配置的参数都可以通过yaml文件加载。</p><p>1.controllers</p><p>node</p><p>controller_manager:</p><p>controller_spawner:</p><p>2.driver</p><p>该软件包为Robotis Dynamixel伺服器提供了低电平IO。 完全支持AX-12，AX-18，RX-24，RX-28，MX-28，RX-64，EX-106型号并经过测试。 定义了特定于硬件的常量，用于从Dynamixel伺服器读取信息或向其写入信息。 大多数ROS用户都不会直接使用此低级软件包。 更高级别的dynamixel_controllers和特定的机器人关节控制器使用此程序包。</p><p>3.motor</p><p>4.msgs</p><p>整个dynamixel_motor堆栈使用的常见消息。</p><p>5.tutorials</p><p>dynamixel_motor堆栈的示例配置和启动文件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>logic_symbol</title>
      <link href="/2020/07/27/logic-symbol/logic-symbol/"/>
      <url>/2020/07/27/logic-symbol/logic-symbol/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑符号"><a href="#逻辑符号" class="headerlink" title="逻辑符号"></a>逻辑符号</h1><p>这篇博文主要为了总结一下逻辑运算符号（拯救混乱记忆，雾）</p><p>(下一篇是题目总结顺便复习)</p><span id="more"></span><p>1.逻辑结构</p><p>与运算：</p><p>与(&amp;&amp;)：逻辑规则是两真才真。与and等同。</p><p>或运算：</p><p>或(||)：逻辑规则是只有一个为真就为真。与or等同。</p><p>异或：</p><p>异或(^)：逻辑规则是两个不同就为真。</p><p>非运算符：</p><p>非(！)：逻辑规则是反转操作数的含义。与not等同。</p> <h2 id="电路中的符合逻辑"><a href="#电路中的符合逻辑" class="headerlink" title="电路中的符合逻辑"></a>电路中的符合逻辑</h2><p>与非：  输入只要有0，输出为1.输入全1，输出才0</p><p>或非：输入只要有1，输出为0，输入全为0，输出才1</p><p>与或非：复合运算</p> <p>电路中还存在异或与同或</p><p>异或：相异则为1</p><p>同或：相同则为1</p><p>关于逻辑电路门，以后再说吧233</p>]]></content>
      
      
      <categories>
          
          <category> logic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pybasic</title>
      <link href="/2020/07/27/pybasic/pybasic/"/>
      <url>/2020/07/27/pybasic/pybasic/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>方便查看，资料来源{<a href="https://github.com/fengdu78/Data-Science-Notes/blob/master/1.python-basic/Python_Basic.ipynb}">https://github.com/fengdu78/Data-Science-Notes/blob/master/1.python-basic/Python_Basic.ipynb}</a></p><p>2020.09.26 添加了python新内容，包括之后的进阶记录会在这里更新。</p><span id="more"></span><p>1.数据类型</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">'hello world!'</span>)</span><br><span class="line">c = <span class="string">'It is a "dog"!'</span></span><br><span class="line"><span class="built_in">print</span> (c)</span><br><span class="line">c1= <span class="string">"It's a dog!"</span></span><br><span class="line"><span class="built_in">print</span> (c1)</span><br><span class="line">c2 = <span class="string">"""hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">!"""</span></span><br><span class="line"><span class="built_in">print</span> (c2)</span><br></pre></td></tr></tbody></table></figure><p>转义字符</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">'It\'s a dog!'</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"hello world!\nhello Python!"</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'\\\t\\'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">r'\\\t\\'</span>) <span class="comment">#原样输出引号内字符串可以使用在引号前加r</span></span><br><span class="line">s = <span class="string">'Python'</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">'Py'</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="built_in">print</span>( <span class="string">'py'</span> <span class="keyword">in</span> s) <span class="comment">#切片</span></span><br><span class="line"><span class="built_in">print</span> (s[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span> (s[<span class="number">1</span>:<span class="number">4</span>])</span><br></pre></td></tr></tbody></table></figure><p>字符串连接与格式化输出</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word1 = <span class="string">'"hello"'</span></span><br><span class="line">word2 = <span class="string">'"world"'</span></span><br><span class="line">sentence = word1.strip(<span class="string">'"'</span>) + <span class="string">' '</span> + word2.strip(<span class="string">'"'</span>) + <span class="string">'!'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( <span class="string">'The first word is %s, and the second word is %s'</span> %(word1, word2))</span><br><span class="line"><span class="built_in">print</span> (sentence)</span><br></pre></td></tr></tbody></table></figure><p>1.2整点与浮点数</p><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样</p><p>%余数  /取整</p><p>浮点数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b1111</span> </span><br><span class="line"><span class="number">0xff</span></span><br><span class="line"><span class="number">1.2e-5</span></span><br></pre></td></tr></tbody></table></figure><p>运算：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (math.log(math.e)) <span class="comment"># 更多运算可查阅文档</span></span><br></pre></td></tr></tbody></table></figure><p>布尔值</p><p>1.4日期与时间</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">now = time.strptime(<span class="string">'2019-08-20'</span>, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="built_in">print</span> (now)</span><br><span class="line">time.strftime(<span class="string">'%Y-%m-%d'</span>, now) <span class="comment">#2019-08-20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">someDay = datetime.date(<span class="number">1999</span>,<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">anotherDay = datetime.date(<span class="number">1999</span>,<span class="number">2</span>,<span class="number">15</span>)</span><br><span class="line">deltaDay = anotherDay - someDay</span><br><span class="line">deltaDay.days</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p align="left">  <img width="400" src="/1.jpg"></p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="literal">None</span>) <span class="comment">#NoneType</span></span><br><span class="line"><span class="built_in">type</span>(<span class="number">1.0</span>) <span class="comment">#float</span></span><br><span class="line"><span class="built_in">type</span>(<span class="literal">True</span>) <span class="comment"># True</span></span><br><span class="line">s=<span class="string">"NoneType"</span></span><br><span class="line"><span class="built_in">type</span>(s) <span class="comment">#str</span></span><br><span class="line"><span class="comment">#类型转化</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">10086</span>) <span class="comment">#‘10086’</span></span><br><span class="line"><span class="built_in">float</span>(<span class="number">10086</span>) <span class="comment">#10086.0</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">'10086'</span>) <span class="comment">#10086</span></span><br><span class="line"><span class="built_in">complex</span>(<span class="number">10086</span>) <span class="comment">#(10086+0j)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="数据结构基础"><a href="#数据结构基础" class="headerlink" title="数据结构基础"></a>数据结构基础</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mylist= [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span> (mylist)</span><br><span class="line"><span class="comment"># 索引从0开始，含左不含右</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">'[4]='</span>, mylist[<span class="number">4</span>]) <span class="comment">#4</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">'[-4]='</span>, mylist[-<span class="number">4</span>]) <span class="comment">#2</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">'[0:4]='</span>, mylist[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment">#0,1,2,3</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">'[:4]='</span>, mylist[:<span class="number">4</span>])<span class="comment">#0,1,2,3</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">'[4:]='</span>, mylist[<span class="number">4</span>:])<span class="comment">#4,5  ！</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">'[0:4:2]='</span>, mylist[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>]) <span class="comment">#0,2</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">'[-5:-1:]='</span>, mylist[-<span class="number">5</span>:-<span class="number">1</span>:]) <span class="comment">#1,2,3,4</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">'[-2::-1]='</span>, mylist[-<span class="number">2</span>::-<span class="number">1</span>])<span class="comment">#4,3,2,1,0  #good</span></span><br><span class="line"></span><br><span class="line">mylist[<span class="number">3</span>] = <span class="string">"小月"</span></span><br><span class="line"><span class="built_in">print</span> (mylist[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">mylist[<span class="number">5</span>]=<span class="string">"小楠"</span></span><br><span class="line"><span class="built_in">print</span> (mylist[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">mylist[<span class="number">5</span>]=<span class="number">19978</span></span><br><span class="line"><span class="built_in">print</span> (mylist[<span class="number">5</span>])</span><br><span class="line"><span class="comment">#插入</span></span><br><span class="line"></span><br><span class="line">mylist.append(<span class="string">'han'</span>) <span class="comment"># 添加到尾部</span></span><br><span class="line">mylist.extend([<span class="string">'long'</span>, <span class="string">'wan'</span>])</span><br><span class="line"><span class="built_in">print</span> (mylist)</span><br><span class="line">scores = [<span class="number">90</span>, <span class="number">80</span>, <span class="number">75</span>, <span class="number">66</span>]</span><br><span class="line">mylist.insert(<span class="number">1</span>, scores) <span class="comment"># 添加到指定位置</span></span><br><span class="line">mylist</span><br></pre></td></tr></tbody></table></figure><p>删除元素</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (mylist.pop(<span class="number">1</span>)) <span class="comment"># 该函数返回被弹出的元素，不传入参数则删除最后一个元素</span></span><br><span class="line"><span class="built_in">print</span> (mylist)</span><br><span class="line"><span class="built_in">print</span>( <span class="string">'wan'</span> <span class="keyword">in</span> mylist)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'han'</span> <span class="keyword">not</span> <span class="keyword">in</span> mylist) <span class="comment">#常见简单判断</span></span><br><span class="line">mylist.count(<span class="string">'wan'</span>) <span class="comment">#计算元素个数</span></span><br><span class="line">mylist.index(<span class="string">'wan'</span>) <span class="comment">#查询位数</span></span><br><span class="line"><span class="comment">#列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">range</span>(-<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">range</span>(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">range</span>(<span class="number">16</span>, <span class="number">10</span>, -<span class="number">1</span>)) <span class="comment">#【】</span></span><br></pre></td></tr></tbody></table></figure><h4 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h4><p>元组类似列表，元组里面的元素也是进行索引计算。列表里面的元素的值可以修改，而元组里面的元素的值不能修改，只能读取。元组的符号是()。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">studentsTuple = (<span class="string">"ming"</span>, <span class="string">"jun"</span>, <span class="string">"qiang"</span>, <span class="string">"wu"</span>, scores)</span><br><span class="line">studentsTuple</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    studentsTuple[<span class="number">1</span>] = <span class="string">'fu'</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">'TypeError'</span>)  <span class="comment">#程序常用格式try</span></span><br><span class="line"><span class="built_in">len</span>(studentsTuple) <span class="comment">#元组不可操作</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h4><p>Python中集合主要有两个功能，一个功能是进行集合操作，另一个功能是消除重复元素。 集合的格式是：set()，其中()内可以是列表、字典或字符串，因为字符串是以列表的形式存储的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">studentsSet = <span class="built_in">set</span>(mylist)</span><br><span class="line"><span class="built_in">print</span> (studentsSet)</span><br><span class="line"></span><br><span class="line">studentsSet.add(<span class="string">'xu'</span>)</span><br><span class="line"><span class="built_in">print</span> (studentsSet) <span class="comment">#乱序</span></span><br><span class="line"></span><br><span class="line">studentsSet.remove(<span class="string">'xu'</span>)</span><br><span class="line"><span class="built_in">print</span> (studentsSet)</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">"abcnmaaaaggsng"</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'a='</span>, a) <span class="comment">#a= {'n', 'g', 'm', 'c', 's', 'b', 'a'}</span></span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">"cdfm"</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'b='</span>, b) <span class="comment">#b= {'f', 'm', 'd', 'c'}</span></span><br><span class="line">’‘’集合运算‘’‘</span><br><span class="line"></span><br><span class="line"><span class="comment">#交集</span></span><br><span class="line">x = a &amp; b </span><br><span class="line"><span class="built_in">print</span>( <span class="string">'x='</span>, x)</span><br><span class="line"><span class="comment">#并集</span></span><br><span class="line">y = a | b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">'y='</span>, y)</span><br><span class="line"><span class="comment">#差集</span></span><br><span class="line">z = a - b</span><br><span class="line"><span class="built_in">print</span>( <span class="string">'z='</span>, z)</span><br><span class="line"><span class="comment">#去除重复元素</span></span><br><span class="line">new = <span class="built_in">set</span>(a)</span><br><span class="line"><span class="built_in">print</span>( z)</span><br></pre></td></tr></tbody></table></figure><h4 id="字典dict"><a href="#字典dict" class="headerlink" title="字典dict"></a>字典dict</h4><p>Python中的字典dict也叫做关联数组，用大括号{}括起来，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度，其中key不能重复。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">k = {<span class="string">"name"</span>:<span class="string">"weiwei"</span>, <span class="string">"home"</span>:<span class="string">"guilin"</span>}</span><br><span class="line"><span class="built_in">print</span> (k[<span class="string">"home"</span>])</span><br><span class="line"><span class="built_in">print</span>( k.keys())</span><br><span class="line"><span class="built_in">print</span>( k.values())</span><br><span class="line">k[<span class="string">"like"</span>] = <span class="string">"music"</span></span><br><span class="line">k[<span class="string">'name'</span>] = <span class="string">'guangzhou'</span></span><br><span class="line"><span class="built_in">print</span> (k) <span class="comment">#添加</span></span><br><span class="line">k.get(<span class="string">'edu'</span>, -<span class="number">1</span>) <span class="comment"># 通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value</span></span><br><span class="line">k.pop(<span class="string">'like'</span>)</span><br><span class="line"><span class="built_in">print</span> (k) <span class="comment">#删除元素</span></span><br></pre></td></tr></tbody></table></figure><h4 id="数据结构转换（0-0）"><a href="#数据结构转换（0-0）" class="headerlink" title="数据结构转换（0.0）"></a>数据结构转换（0.0）</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(mylist) <span class="comment">#list</span></span><br><span class="line"><span class="built_in">tuple</span>(mylist)</span><br><span class="line"><span class="built_in">list</span>(k) <span class="comment">#['name', 'home']</span></span><br><span class="line">zl = <span class="built_in">zip</span>((<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment"># zip可以将列表、元组、集合、字典‘缝合’起来</span></span><br><span class="line"><span class="built_in">print</span> (zl)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>(zl))  <span class="comment">#获得了新知识，猫猫头.jpg</span></span><br><span class="line"><span class="comment">#&lt;zip object at 0x00000135BEAF2A88&gt;</span></span><br><span class="line"><span class="comment">#{'A': 1, 'B': 2, 'C': 3}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="python-控制流"><a href="#python-控制流" class="headerlink" title="python 控制流"></a>python 控制流</h3><p>在Python中通常的情况下程序的执行是从上往下执行的，而某些时候我们为了改变程序的执行顺序，使用控制流语句控制程序执行方式。Python中有三种控制流类型：顺序结构、分支结构、循环结构。</p><p>另外，Python可以使用分号”;”分隔语句，但一般是使用换行来分隔；语句块不用大括号”{}”，而使用缩进（可以使用四个空格）来表示</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'7'</span></span><br><span class="line">num = <span class="built_in">int</span>(s) <span class="comment"># 一般不使用这种分隔方式</span></span><br><span class="line">num -= <span class="number">1</span> <span class="comment"># num = num - 1 </span></span><br><span class="line">num *= <span class="number">6</span> <span class="comment"># num = num * 6</span></span><br><span class="line"><span class="built_in">print</span> (num) <span class="comment">#顺序结构</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''分支结构if'''</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h3>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>plan+review</title>
      <link href="/2020/07/27/Fplan/Fplan/"/>
      <url>/2020/07/27/Fplan/Fplan/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-7-27"><a href="#2020-7-27" class="headerlink" title="2020.7.27"></a>2020.7.27</h1><p>1.Dynamixel work_bench   c++  python</p><p>2.python 100 </p><p>3.movie+6</p><p>4.基础 复 习 √</p><p>4.未完待续，下午继续补充……</p><span id="more"></span><p>tags 后面也要加空格，浪费了好多时间2333，晚上总结</p><h1 id="QAQ"><a href="#QAQ" class="headerlink" title="QAQ"></a>QAQ</h1><p>复习基础py，资料来源github{<a href="https://github.com/fengdu78/Data-Science-Notes/blob/master}">https://github.com/fengdu78/Data-Science-Notes/blob/master}</a></p><p>0.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">"What is your name?"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello "</span>+name )</span><br></pre></td></tr></tbody></table></figure><p>1.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="built_in">input</span>(<span class="string">"Name:"</span>)</span><br><span class="line">age=<span class="built_in">input</span>(<span class="string">"age:"</span>)</span><br><span class="line">job=<span class="built_in">input</span>(<span class="string">"job:"</span>)</span><br><span class="line"></span><br><span class="line">info=<span class="string">'''---------info of ---------'''</span> + <span class="string">''' #info of用法</span></span><br><span class="line"><span class="string">Name:'''</span>+name+<span class="string">'''</span></span><br><span class="line"><span class="string">Age:'''</span>+age+<span class="string">'''</span></span><br><span class="line"><span class="string">Job:'''</span>+job</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="built_in">input</span>(<span class="string">"Name:"</span>)</span><br><span class="line">age=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"age:"</span>))</span><br><span class="line">job=<span class="built_in">input</span>(<span class="string">"job:"</span>)</span><br><span class="line"></span><br><span class="line">info=<span class="string">'''---------info of ---------</span></span><br><span class="line"><span class="string">Name:%s</span></span><br><span class="line"><span class="string">Age:%d</span></span><br><span class="line"><span class="string">Job:%s'''</span>%(name,age,job)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="built_in">input</span>(<span class="string">"Name:"</span>)</span><br><span class="line">age=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"age:"</span>)) </span><br><span class="line">job=<span class="built_in">input</span>(<span class="string">"job:"</span>)</span><br><span class="line"></span><br><span class="line">info=<span class="string">'''---------info of ---------</span></span><br><span class="line"><span class="string">Name:{_name}</span></span><br><span class="line"><span class="string">Age:{_age}</span></span><br><span class="line"><span class="string">Job:{_job}'''</span>.<span class="built_in">format</span>(_name=name,_age=age,_job=job)  <span class="comment">#format</span></span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="built_in">input</span>(<span class="string">"Name:"</span>)</span><br><span class="line">age=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"age:"</span>)) </span><br><span class="line">job=<span class="built_in">input</span>(<span class="string">"job:"</span>)</span><br><span class="line"></span><br><span class="line">info=<span class="string">'''---------info of ---------</span></span><br><span class="line"><span class="string">Name:{0}</span></span><br><span class="line"><span class="string">Age:{1}</span></span><br><span class="line"><span class="string">Job:{2}'''</span>.<span class="built_in">format</span>(name,age,job)</span><br><span class="line"><span class="built_in">print</span>(info)   </span><br></pre></td></tr></tbody></table></figure><p>8.隐藏</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">pwd=getpass.getpass(<span class="string">"请输入密码:"</span>)</span><br><span class="line"><span class="built_in">print</span>(pwd)  <span class="comment">#知识盲区了2333，可以用来隐藏密码输入...</span></span><br></pre></td></tr></tbody></table></figure><p>9.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_username=<span class="string">'Alex Li'</span></span><br><span class="line">_password=<span class="string">'abc123'</span></span><br><span class="line">username=<span class="built_in">input</span>(<span class="string">"username:"</span>)</span><br><span class="line">password=<span class="built_in">input</span>(<span class="string">"password:"</span>)</span><br><span class="line"><span class="keyword">if</span> _username==username <span class="keyword">and</span> _password==password:</span><br><span class="line">    <span class="built_in">print</span>((<span class="string">"Welcome user {name} login..."</span>).<span class="built_in">format</span>(name=username))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Invalid username or password!"</span>)</span><br></pre></td></tr></tbody></table></figure><p>10.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello World"</span>)</span><br><span class="line">name = <span class="string">"Alex Li"</span></span><br><span class="line">name2=name</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"My name is"</span>, name,name2) <span class="comment"># Alex Li Alex Li</span></span><br><span class="line">name = <span class="string">"PaoChe Ge"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"My name is"</span>, name,name2) <span class="comment"># PaoChe Ge Alex Li</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"您好，我来了"</span>)</span><br></pre></td></tr></tbody></table></figure><p>11.简单，注释而已 ‘’‘   ‘’‘</p><p>12.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">'''这是第一行内容</span></span><br><span class="line"><span class="string">这是第二行内容'''</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)  <span class="comment">#多行</span></span><br></pre></td></tr></tbody></table></figure><p>13.简单字符</p><h1 id="mudule"><a href="#mudule" class="headerlink" title="*mudule*"></a><strong>*</strong>mudule*</h1><p>14.模块初始与os</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 打印环境变量</span></span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.argv)</span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">2</span>])</span><br></pre></td></tr></tbody></table></figure><p>15.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进度条</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    sys.stdout.write(<span class="string">'#'</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></tbody></table></figure><p>16.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd_res = os.system(<span class="string">"dir"</span>) <span class="comment"># os.system()执行后直接输出到终端，然后结束，最后cmd_res保存的是os.system()执行后的状态码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"---&gt;"</span>,cmd_res) <span class="comment"># ---&gt; 0</span></span><br></pre></td></tr></tbody></table></figure><p>17.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd_res1=os.popen(<span class="string">"dir"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"---&gt;"</span>,cmd_res1) <span class="comment"># 得到的是内存对象值 ---&gt; &lt;os._wrap_close object at 0x00000000029187B8&gt;  # 有些问题</span></span><br></pre></td></tr></tbody></table></figure><p>18.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd_res1=os.popen(<span class="string">"dir"</span>).read()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"---&gt;"</span>,cmd_res1) <span class="comment"># 读取数据必须再后面加个read()</span></span><br></pre></td></tr></tbody></table></figure><p>19.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(<span class="string">"new_dir3"</span>) <span class="comment"># 创建一个目录</span></span><br><span class="line">os.removedirs(<span class="string">"new_dir3"</span>) <span class="comment"># 删除一个目录</span></span><br></pre></td></tr></tbody></table></figure><h3 id="20-运算问题"><a href="#20-运算问题" class="headerlink" title="20.运算问题"></a>20.运算问题</h3><p>简单计算</p><p>py3和py2</p><p>python3中最重要的新特性大概是对文本和二进制数据作了更为清晰的区分。文本总是Unicode，由str类型表示, 二进制数据则由bytes类型表示。Python3不会以任意隐式的方式混用str和bytes，正是这使得两者区分特别清晰。 即：在python2中类型会自动转化，而在python3中则要么报错，要么不转化 str与bytes相互转化</p><p>21.bytes与str转化</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg=<span class="string">"我爱北京天安门"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"><span class="built_in">print</span>(msg.encode(encoding=<span class="string">"utf-8"</span>)) <span class="comment"># str转bytes,编码</span></span><br><span class="line"><span class="built_in">print</span>(msg.encode(encoding=<span class="string">"utf-8"</span>).decode(encoding=<span class="string">"utf-8"</span>)) <span class="comment"># bytes转str,解码</span></span><br></pre></td></tr></tbody></table></figure><p>31.python中的循环</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"第一种循环"</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"count:"</span>,count)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"第二种循环"</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"count:"</span>, count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"loop "</span>,i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hehe...."</span>)</span><br><span class="line">my_age=<span class="number">28</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count&lt;<span class="number">3</span>:</span><br><span class="line">    user_input=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"input your guess num:"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user_input==my_age:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Congratulations,you got it!"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> user_input&lt;my_age:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Oops,think bigger!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"think smaller!"</span>)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"猜这么多次都不对，你个笨蛋."</span>)</span><br></pre></td></tr></tbody></table></figure><p>33.三级菜单</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">data={</span><br><span class="line">    <span class="string">'北京'</span>:{</span><br><span class="line">        <span class="string">"昌平"</span>:{</span><br><span class="line">            <span class="string">"沙河"</span>:[<span class="string">"oldboys"</span>,<span class="string">'test'</span>],</span><br><span class="line">            <span class="string">"天通苑"</span>:[<span class="string">"链家地产"</span>,<span class="string">"我爱我家"</span>]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"朝阳"</span>:{</span><br><span class="line">            <span class="string">"望京"</span>:[<span class="string">"oldboys"</span>,<span class="string">'默陌陌'</span>],</span><br><span class="line">            <span class="string">"国贸"</span>:[<span class="string">"CICC"</span>,<span class="string">"HP"</span>],</span><br><span class="line">            <span class="string">"东直门"</span>:[<span class="string">"Advent"</span>,<span class="string">"飞信"</span>]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"海淀"</span>:{}</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'山东'</span>:{</span><br><span class="line">        <span class="string">"德州"</span>:{},</span><br><span class="line">        <span class="string">"青岛"</span>:{},</span><br><span class="line">        <span class="string">"济南"</span>:{}</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'广东'</span>:{</span><br><span class="line">        <span class="string">"德州"</span>:{},</span><br><span class="line">        <span class="string">"青岛"</span>:{},</span><br><span class="line">        <span class="string">"济南"</span>:{}</span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line">exit_flag = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exit_flag:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    choice=<span class="built_in">input</span>(<span class="string">"选择进入1&gt;&gt;:"</span>)</span><br><span class="line">    <span class="keyword">if</span> choice <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> exit_flag:</span><br><span class="line">            <span class="keyword">for</span> i2 <span class="keyword">in</span> data[choice]:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"\t"</span>,i2)</span><br><span class="line">            choice2=<span class="built_in">input</span>(<span class="string">"选择进入2&gt;&gt;:"</span>)</span><br><span class="line">            <span class="keyword">if</span> choice2 <span class="keyword">in</span> data[choice]:</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> exit_flag:</span><br><span class="line">                    <span class="keyword">for</span> i3 <span class="keyword">in</span> data[choice][choice2]:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">"\t\t"</span>, i3)</span><br><span class="line">                    choice3 = <span class="built_in">input</span>(<span class="string">"选择进入3&gt;&gt;:"</span>)</span><br><span class="line">                    <span class="keyword">if</span> choice3 <span class="keyword">in</span> data[choice][choice2]:</span><br><span class="line">                        <span class="keyword">for</span> i4 <span class="keyword">in</span> data[choice][choice2][choice3]:  <span class="comment">#RED内层，循环可参考</span></span><br><span class="line">                            <span class="built_in">print</span>(i4)</span><br><span class="line">                        choice4=<span class="built_in">input</span>(<span class="string">"最后一层，按b返回&gt;&gt;:"</span>)</span><br><span class="line">                        <span class="keyword">if</span> choice4==<span class="string">'b'</span>:</span><br><span class="line">                            <span class="keyword">pass</span> <span class="comment"># pass可以理解为占位符，表示什么都不做，返回循环起始位置，以后可以在此处添加内容</span></span><br><span class="line">                        <span class="keyword">elif</span> choice4==<span class="string">'q'</span>:</span><br><span class="line">                            exit_flag=<span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> (choice3 == <span class="string">'b'</span>):</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">elif</span> choice3 == <span class="string">'q'</span>:</span><br><span class="line">                        exit_flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> (choice2 == <span class="string">'b'</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> choice2 == <span class="string">'q'</span>:</span><br><span class="line">                exit_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (choice == <span class="string">'b'</span>):</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># </span></span><br></pre></td></tr></tbody></table></figure><p>32.编码变换</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># utf-8与gbk互相转化需要通过Unicode作为中介</span></span><br><span class="line">s=<span class="string">"我爱北京天安门"</span>  <span class="comment"># 默认编码为Unicode</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(<span class="string">"gbk"</span>)) <span class="comment"># Unicode可直接转化为gbk</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(<span class="string">"utf-8"</span>)) <span class="comment"># Unicode可直接转化为utf-8</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(<span class="string">"utf-8"</span>).decode(<span class="string">"utf-8"</span>).encode(<span class="string">"gb2312"</span>))</span><br><span class="line"><span class="comment"># 此时s.encode("utf-8")即转为utf-8了，然后转为gb2312，则需要先告诉Unicode你原先的编码是什么，即s.encode("utf-8").decode("utf-8"),再对其进行编码为gb2312，即最终为s.encode("utf-8").decode("utf-8").encode("gb2312")</span></span><br><span class="line"></span><br><span class="line">打开文件</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">'ly.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="comment"># 文件句柄 'w'为创建文件，之前的数据就没了</span></span><br><span class="line">data=f.read()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">f.close()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> bor </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
